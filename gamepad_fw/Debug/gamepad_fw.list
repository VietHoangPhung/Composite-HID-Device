
gamepad_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000094e8  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e8  08009688  08009688  0000a688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009d70  08009d70  0000b220  2**0
                  CONTENTS
  4 .ARM          00000008  08009d70  08009d70  0000ad70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009d78  08009d78  0000b220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009d78  08009d78  0000ad78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009d7c  08009d7c  0000ad7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000220  20000000  08009d80  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010f4  20000220  08009fa0  0000b220  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001314  08009fa0  0000b314  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b220  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017232  00000000  00000000  0000b250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a4a  00000000  00000000  00022482  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001560  00000000  00000000  00025ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001070  00000000  00000000  00027430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001af36  00000000  00000000  000284a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bcb5  00000000  00000000  000433d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ddf2  00000000  00000000  0005f08b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000fce7d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005f24  00000000  00000000  000fcec0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  00102de4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000220 	.word	0x20000220
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009670 	.word	0x08009670

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000224 	.word	0x20000224
 80001dc:	08009670 	.word	0x08009670

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b96a 	b.w	800056c <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	460c      	mov	r4, r1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	d14e      	bne.n	800035a <__udivmoddi4+0xaa>
 80002bc:	4694      	mov	ip, r2
 80002be:	458c      	cmp	ip, r1
 80002c0:	4686      	mov	lr, r0
 80002c2:	fab2 f282 	clz	r2, r2
 80002c6:	d962      	bls.n	800038e <__udivmoddi4+0xde>
 80002c8:	b14a      	cbz	r2, 80002de <__udivmoddi4+0x2e>
 80002ca:	f1c2 0320 	rsb	r3, r2, #32
 80002ce:	4091      	lsls	r1, r2
 80002d0:	fa20 f303 	lsr.w	r3, r0, r3
 80002d4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002d8:	4319      	orrs	r1, r3
 80002da:	fa00 fe02 	lsl.w	lr, r0, r2
 80002de:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002e2:	fa1f f68c 	uxth.w	r6, ip
 80002e6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ee:	fb07 1114 	mls	r1, r7, r4, r1
 80002f2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002f6:	fb04 f106 	mul.w	r1, r4, r6
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f104 30ff 	add.w	r0, r4, #4294967295
 8000306:	f080 8112 	bcs.w	800052e <__udivmoddi4+0x27e>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 810f 	bls.w	800052e <__udivmoddi4+0x27e>
 8000310:	3c02      	subs	r4, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a59      	subs	r1, r3, r1
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb1 f0f7 	udiv	r0, r1, r7
 800031e:	fb07 1110 	mls	r1, r7, r0, r1
 8000322:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000326:	fb00 f606 	mul.w	r6, r0, r6
 800032a:	429e      	cmp	r6, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x94>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 31ff 	add.w	r1, r0, #4294967295
 8000336:	f080 80fc 	bcs.w	8000532 <__udivmoddi4+0x282>
 800033a:	429e      	cmp	r6, r3
 800033c:	f240 80f9 	bls.w	8000532 <__udivmoddi4+0x282>
 8000340:	4463      	add	r3, ip
 8000342:	3802      	subs	r0, #2
 8000344:	1b9b      	subs	r3, r3, r6
 8000346:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800034a:	2100      	movs	r1, #0
 800034c:	b11d      	cbz	r5, 8000356 <__udivmoddi4+0xa6>
 800034e:	40d3      	lsrs	r3, r2
 8000350:	2200      	movs	r2, #0
 8000352:	e9c5 3200 	strd	r3, r2, [r5]
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d905      	bls.n	800036a <__udivmoddi4+0xba>
 800035e:	b10d      	cbz	r5, 8000364 <__udivmoddi4+0xb4>
 8000360:	e9c5 0100 	strd	r0, r1, [r5]
 8000364:	2100      	movs	r1, #0
 8000366:	4608      	mov	r0, r1
 8000368:	e7f5      	b.n	8000356 <__udivmoddi4+0xa6>
 800036a:	fab3 f183 	clz	r1, r3
 800036e:	2900      	cmp	r1, #0
 8000370:	d146      	bne.n	8000400 <__udivmoddi4+0x150>
 8000372:	42a3      	cmp	r3, r4
 8000374:	d302      	bcc.n	800037c <__udivmoddi4+0xcc>
 8000376:	4290      	cmp	r0, r2
 8000378:	f0c0 80f0 	bcc.w	800055c <__udivmoddi4+0x2ac>
 800037c:	1a86      	subs	r6, r0, r2
 800037e:	eb64 0303 	sbc.w	r3, r4, r3
 8000382:	2001      	movs	r0, #1
 8000384:	2d00      	cmp	r5, #0
 8000386:	d0e6      	beq.n	8000356 <__udivmoddi4+0xa6>
 8000388:	e9c5 6300 	strd	r6, r3, [r5]
 800038c:	e7e3      	b.n	8000356 <__udivmoddi4+0xa6>
 800038e:	2a00      	cmp	r2, #0
 8000390:	f040 8090 	bne.w	80004b4 <__udivmoddi4+0x204>
 8000394:	eba1 040c 	sub.w	r4, r1, ip
 8000398:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800039c:	fa1f f78c 	uxth.w	r7, ip
 80003a0:	2101      	movs	r1, #1
 80003a2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003a6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003aa:	fb08 4416 	mls	r4, r8, r6, r4
 80003ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003b2:	fb07 f006 	mul.w	r0, r7, r6
 80003b6:	4298      	cmp	r0, r3
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x11c>
 80003ba:	eb1c 0303 	adds.w	r3, ip, r3
 80003be:	f106 34ff 	add.w	r4, r6, #4294967295
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x11a>
 80003c4:	4298      	cmp	r0, r3
 80003c6:	f200 80cd 	bhi.w	8000564 <__udivmoddi4+0x2b4>
 80003ca:	4626      	mov	r6, r4
 80003cc:	1a1c      	subs	r4, r3, r0
 80003ce:	fa1f f38e 	uxth.w	r3, lr
 80003d2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003d6:	fb08 4410 	mls	r4, r8, r0, r4
 80003da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003de:	fb00 f707 	mul.w	r7, r0, r7
 80003e2:	429f      	cmp	r7, r3
 80003e4:	d908      	bls.n	80003f8 <__udivmoddi4+0x148>
 80003e6:	eb1c 0303 	adds.w	r3, ip, r3
 80003ea:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ee:	d202      	bcs.n	80003f6 <__udivmoddi4+0x146>
 80003f0:	429f      	cmp	r7, r3
 80003f2:	f200 80b0 	bhi.w	8000556 <__udivmoddi4+0x2a6>
 80003f6:	4620      	mov	r0, r4
 80003f8:	1bdb      	subs	r3, r3, r7
 80003fa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003fe:	e7a5      	b.n	800034c <__udivmoddi4+0x9c>
 8000400:	f1c1 0620 	rsb	r6, r1, #32
 8000404:	408b      	lsls	r3, r1
 8000406:	fa22 f706 	lsr.w	r7, r2, r6
 800040a:	431f      	orrs	r7, r3
 800040c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000410:	fa04 f301 	lsl.w	r3, r4, r1
 8000414:	ea43 030c 	orr.w	r3, r3, ip
 8000418:	40f4      	lsrs	r4, r6
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	0c38      	lsrs	r0, r7, #16
 8000420:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000424:	fbb4 fef0 	udiv	lr, r4, r0
 8000428:	fa1f fc87 	uxth.w	ip, r7
 800042c:	fb00 441e 	mls	r4, r0, lr, r4
 8000430:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000434:	fb0e f90c 	mul.w	r9, lr, ip
 8000438:	45a1      	cmp	r9, r4
 800043a:	fa02 f201 	lsl.w	r2, r2, r1
 800043e:	d90a      	bls.n	8000456 <__udivmoddi4+0x1a6>
 8000440:	193c      	adds	r4, r7, r4
 8000442:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000446:	f080 8084 	bcs.w	8000552 <__udivmoddi4+0x2a2>
 800044a:	45a1      	cmp	r9, r4
 800044c:	f240 8081 	bls.w	8000552 <__udivmoddi4+0x2a2>
 8000450:	f1ae 0e02 	sub.w	lr, lr, #2
 8000454:	443c      	add	r4, r7
 8000456:	eba4 0409 	sub.w	r4, r4, r9
 800045a:	fa1f f983 	uxth.w	r9, r3
 800045e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000462:	fb00 4413 	mls	r4, r0, r3, r4
 8000466:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800046a:	fb03 fc0c 	mul.w	ip, r3, ip
 800046e:	45a4      	cmp	ip, r4
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x1d2>
 8000472:	193c      	adds	r4, r7, r4
 8000474:	f103 30ff 	add.w	r0, r3, #4294967295
 8000478:	d267      	bcs.n	800054a <__udivmoddi4+0x29a>
 800047a:	45a4      	cmp	ip, r4
 800047c:	d965      	bls.n	800054a <__udivmoddi4+0x29a>
 800047e:	3b02      	subs	r3, #2
 8000480:	443c      	add	r4, r7
 8000482:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000486:	fba0 9302 	umull	r9, r3, r0, r2
 800048a:	eba4 040c 	sub.w	r4, r4, ip
 800048e:	429c      	cmp	r4, r3
 8000490:	46ce      	mov	lr, r9
 8000492:	469c      	mov	ip, r3
 8000494:	d351      	bcc.n	800053a <__udivmoddi4+0x28a>
 8000496:	d04e      	beq.n	8000536 <__udivmoddi4+0x286>
 8000498:	b155      	cbz	r5, 80004b0 <__udivmoddi4+0x200>
 800049a:	ebb8 030e 	subs.w	r3, r8, lr
 800049e:	eb64 040c 	sbc.w	r4, r4, ip
 80004a2:	fa04 f606 	lsl.w	r6, r4, r6
 80004a6:	40cb      	lsrs	r3, r1
 80004a8:	431e      	orrs	r6, r3
 80004aa:	40cc      	lsrs	r4, r1
 80004ac:	e9c5 6400 	strd	r6, r4, [r5]
 80004b0:	2100      	movs	r1, #0
 80004b2:	e750      	b.n	8000356 <__udivmoddi4+0xa6>
 80004b4:	f1c2 0320 	rsb	r3, r2, #32
 80004b8:	fa20 f103 	lsr.w	r1, r0, r3
 80004bc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c0:	fa24 f303 	lsr.w	r3, r4, r3
 80004c4:	4094      	lsls	r4, r2
 80004c6:	430c      	orrs	r4, r1
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004d0:	fa1f f78c 	uxth.w	r7, ip
 80004d4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004d8:	fb08 3110 	mls	r1, r8, r0, r3
 80004dc:	0c23      	lsrs	r3, r4, #16
 80004de:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004e2:	fb00 f107 	mul.w	r1, r0, r7
 80004e6:	4299      	cmp	r1, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x24c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f100 36ff 	add.w	r6, r0, #4294967295
 80004f2:	d22c      	bcs.n	800054e <__udivmoddi4+0x29e>
 80004f4:	4299      	cmp	r1, r3
 80004f6:	d92a      	bls.n	800054e <__udivmoddi4+0x29e>
 80004f8:	3802      	subs	r0, #2
 80004fa:	4463      	add	r3, ip
 80004fc:	1a5b      	subs	r3, r3, r1
 80004fe:	b2a4      	uxth	r4, r4
 8000500:	fbb3 f1f8 	udiv	r1, r3, r8
 8000504:	fb08 3311 	mls	r3, r8, r1, r3
 8000508:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800050c:	fb01 f307 	mul.w	r3, r1, r7
 8000510:	42a3      	cmp	r3, r4
 8000512:	d908      	bls.n	8000526 <__udivmoddi4+0x276>
 8000514:	eb1c 0404 	adds.w	r4, ip, r4
 8000518:	f101 36ff 	add.w	r6, r1, #4294967295
 800051c:	d213      	bcs.n	8000546 <__udivmoddi4+0x296>
 800051e:	42a3      	cmp	r3, r4
 8000520:	d911      	bls.n	8000546 <__udivmoddi4+0x296>
 8000522:	3902      	subs	r1, #2
 8000524:	4464      	add	r4, ip
 8000526:	1ae4      	subs	r4, r4, r3
 8000528:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800052c:	e739      	b.n	80003a2 <__udivmoddi4+0xf2>
 800052e:	4604      	mov	r4, r0
 8000530:	e6f0      	b.n	8000314 <__udivmoddi4+0x64>
 8000532:	4608      	mov	r0, r1
 8000534:	e706      	b.n	8000344 <__udivmoddi4+0x94>
 8000536:	45c8      	cmp	r8, r9
 8000538:	d2ae      	bcs.n	8000498 <__udivmoddi4+0x1e8>
 800053a:	ebb9 0e02 	subs.w	lr, r9, r2
 800053e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000542:	3801      	subs	r0, #1
 8000544:	e7a8      	b.n	8000498 <__udivmoddi4+0x1e8>
 8000546:	4631      	mov	r1, r6
 8000548:	e7ed      	b.n	8000526 <__udivmoddi4+0x276>
 800054a:	4603      	mov	r3, r0
 800054c:	e799      	b.n	8000482 <__udivmoddi4+0x1d2>
 800054e:	4630      	mov	r0, r6
 8000550:	e7d4      	b.n	80004fc <__udivmoddi4+0x24c>
 8000552:	46d6      	mov	lr, sl
 8000554:	e77f      	b.n	8000456 <__udivmoddi4+0x1a6>
 8000556:	4463      	add	r3, ip
 8000558:	3802      	subs	r0, #2
 800055a:	e74d      	b.n	80003f8 <__udivmoddi4+0x148>
 800055c:	4606      	mov	r6, r0
 800055e:	4623      	mov	r3, r4
 8000560:	4608      	mov	r0, r1
 8000562:	e70f      	b.n	8000384 <__udivmoddi4+0xd4>
 8000564:	3e02      	subs	r6, #2
 8000566:	4463      	add	r3, ip
 8000568:	e730      	b.n	80003cc <__udivmoddi4+0x11c>
 800056a:	bf00      	nop

0800056c <__aeabi_idiv0>:
 800056c:	4770      	bx	lr
 800056e:	bf00      	nop

08000570 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000574:	f000 fffc 	bl	8001570 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000578:	f000 fa10 	bl	800099c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800057c:	f000 fb76 	bl	8000c6c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000580:	f000 fa76 	bl	8000a70 <MX_ADC1_Init>
  MX_I2C3_Init();
 8000584:	f000 faf0 	bl	8000b68 <MX_I2C3_Init>
  MX_TIM2_Init();
 8000588:	f000 fb1c 	bl	8000bc4 <MX_TIM2_Init>
  MX_USB_DEVICE_Init();
 800058c:	f007 ff70 	bl	8008470 <MX_USB_DEVICE_Init>
  ssd1306_Init();
 8000590:	f000 fc06 	bl	8000da0 <ssd1306_Init>

  ssd1306_Fill(Black);
 8000594:	2000      	movs	r0, #0
 8000596:	f000 fc6d 	bl	8000e74 <ssd1306_Fill>
  ssd1306_SetCursor(1, 15);
 800059a:	210f      	movs	r1, #15
 800059c:	2001      	movs	r0, #1
 800059e:	f000 fdb7 	bl	8001110 <ssd1306_SetCursor>
  ssd1306_WriteString("Test 2", Font_6x8, White);
 80005a2:	4a1b      	ldr	r2, [pc, #108]	@ (8000610 <main+0xa0>)
 80005a4:	2301      	movs	r3, #1
 80005a6:	ca06      	ldmia	r2, {r1, r2}
 80005a8:	481a      	ldr	r0, [pc, #104]	@ (8000614 <main+0xa4>)
 80005aa:	f000 fd8b 	bl	80010c4 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 80005ae:	f000 fc85 	bl	8000ebc <ssd1306_UpdateScreen>
  HAL_Delay(3000);
 80005b2:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80005b6:	f001 f84d 	bl	8001654 <HAL_Delay>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1 | TIM_CHANNEL_2);
 80005ba:	2104      	movs	r1, #4
 80005bc:	4816      	ldr	r0, [pc, #88]	@ (8000618 <main+0xa8>)
 80005be:	f004 faa7 	bl	8004b10 <HAL_TIM_Encoder_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  getAllADCValue();
 80005c2:	f000 f8b3 	bl	800072c <getAllADCValue>
	  if(switchMode())
 80005c6:	f000 f82f 	bl	8000628 <switchMode>
 80005ca:	4603      	mov	r3, r0
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d014      	beq.n	80005fa <main+0x8a>
	  {
		  while(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == 0);
 80005d0:	bf00      	nop
 80005d2:	2102      	movs	r1, #2
 80005d4:	4811      	ldr	r0, [pc, #68]	@ (800061c <main+0xac>)
 80005d6:	f001 fed9 	bl	800238c <HAL_GPIO_ReadPin>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d0f8      	beq.n	80005d2 <main+0x62>
		  modeState++;
 80005e0:	4b0f      	ldr	r3, [pc, #60]	@ (8000620 <main+0xb0>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	3301      	adds	r3, #1
 80005e6:	b2da      	uxtb	r2, r3
 80005e8:	4b0d      	ldr	r3, [pc, #52]	@ (8000620 <main+0xb0>)
 80005ea:	701a      	strb	r2, [r3, #0]
		  if(modeState > MODE_COUNT)
 80005ec:	4b0c      	ldr	r3, [pc, #48]	@ (8000620 <main+0xb0>)
 80005ee:	781b      	ldrb	r3, [r3, #0]
 80005f0:	2b02      	cmp	r3, #2
 80005f2:	d902      	bls.n	80005fa <main+0x8a>
			  modeState = MODE_GAMEPAD;
 80005f4:	4b0a      	ldr	r3, [pc, #40]	@ (8000620 <main+0xb0>)
 80005f6:	2201      	movs	r2, #1
 80005f8:	701a      	strb	r2, [r3, #0]
	  }

	  modeHandlers[modeState]();
 80005fa:	4b09      	ldr	r3, [pc, #36]	@ (8000620 <main+0xb0>)
 80005fc:	781b      	ldrb	r3, [r3, #0]
 80005fe:	461a      	mov	r2, r3
 8000600:	4b08      	ldr	r3, [pc, #32]	@ (8000624 <main+0xb4>)
 8000602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000606:	4798      	blx	r3
	  updateDisplay();
 8000608:	f000 f830 	bl	800066c <updateDisplay>
	  getAllADCValue();
 800060c:	e7d9      	b.n	80005c2 <main+0x52>
 800060e:	bf00      	nop
 8000610:	20000078 	.word	0x20000078
 8000614:	08009688 	.word	0x08009688
 8000618:	200002d8 	.word	0x200002d8
 800061c:	40020400 	.word	0x40020400
 8000620:	2000006f 	.word	0x2000006f
 8000624:	20000070 	.word	0x20000070

08000628 <switchMode>:
 * @brief	Switch mode condition
 * @retval	none
 * @note	Hold PB0, PA6, PB1 at the same time and then release PB1 to switch mode
 */
uint8_t switchMode(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	af00      	add	r7, sp, #0
	return (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) && HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) && HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1));
 800062c:	2101      	movs	r1, #1
 800062e:	480d      	ldr	r0, [pc, #52]	@ (8000664 <switchMode+0x3c>)
 8000630:	f001 feac 	bl	800238c <HAL_GPIO_ReadPin>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d00f      	beq.n	800065a <switchMode+0x32>
 800063a:	2140      	movs	r1, #64	@ 0x40
 800063c:	480a      	ldr	r0, [pc, #40]	@ (8000668 <switchMode+0x40>)
 800063e:	f001 fea5 	bl	800238c <HAL_GPIO_ReadPin>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d008      	beq.n	800065a <switchMode+0x32>
 8000648:	2102      	movs	r1, #2
 800064a:	4806      	ldr	r0, [pc, #24]	@ (8000664 <switchMode+0x3c>)
 800064c:	f001 fe9e 	bl	800238c <HAL_GPIO_ReadPin>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <switchMode+0x32>
 8000656:	2301      	movs	r3, #1
 8000658:	e000      	b.n	800065c <switchMode+0x34>
 800065a:	2300      	movs	r3, #0
 800065c:	b2db      	uxtb	r3, r3
}
 800065e:	4618      	mov	r0, r3
 8000660:	bd80      	pop	{r7, pc}
 8000662:	bf00      	nop
 8000664:	40020400 	.word	0x40020400
 8000668:	40020000 	.word	0x40020000

0800066c <updateDisplay>:
/*
 * @brief	Update Display
 * @retval	None
 */
void updateDisplay(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b082      	sub	sp, #8
 8000670:	af00      	add	r7, sp, #0
    const char *modeNames[] = { "Gamepad Mode", "Mouse Mode"};
 8000672:	4a25      	ldr	r2, [pc, #148]	@ (8000708 <updateDisplay+0x9c>)
 8000674:	463b      	mov	r3, r7
 8000676:	e892 0003 	ldmia.w	r2, {r0, r1}
 800067a:	e883 0003 	stmia.w	r3, {r0, r1}
    sprintf(lcdBuffer[0], "%s", modeNames[modeState]);
 800067e:	4b23      	ldr	r3, [pc, #140]	@ (800070c <updateDisplay+0xa0>)
 8000680:	781b      	ldrb	r3, [r3, #0]
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	3308      	adds	r3, #8
 8000686:	443b      	add	r3, r7
 8000688:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800068c:	461a      	mov	r2, r3
 800068e:	4920      	ldr	r1, [pc, #128]	@ (8000710 <updateDisplay+0xa4>)
 8000690:	4820      	ldr	r0, [pc, #128]	@ (8000714 <updateDisplay+0xa8>)
 8000692:	f008 fb4d 	bl	8008d30 <siprintf>
    sprintf(lcdBuffer[1], "ADC: %d %d", adcValues[0], adcValues[1]);
 8000696:	4b20      	ldr	r3, [pc, #128]	@ (8000718 <updateDisplay+0xac>)
 8000698:	881b      	ldrh	r3, [r3, #0]
 800069a:	461a      	mov	r2, r3
 800069c:	4b1e      	ldr	r3, [pc, #120]	@ (8000718 <updateDisplay+0xac>)
 800069e:	885b      	ldrh	r3, [r3, #2]
 80006a0:	491e      	ldr	r1, [pc, #120]	@ (800071c <updateDisplay+0xb0>)
 80006a2:	481f      	ldr	r0, [pc, #124]	@ (8000720 <updateDisplay+0xb4>)
 80006a4:	f008 fb44 	bl	8008d30 <siprintf>
    sprintf(lcdBuffer[2], "ADC: %d %d", adcValues[2], adcValues[3]);
 80006a8:	4b1b      	ldr	r3, [pc, #108]	@ (8000718 <updateDisplay+0xac>)
 80006aa:	889b      	ldrh	r3, [r3, #4]
 80006ac:	461a      	mov	r2, r3
 80006ae:	4b1a      	ldr	r3, [pc, #104]	@ (8000718 <updateDisplay+0xac>)
 80006b0:	88db      	ldrh	r3, [r3, #6]
 80006b2:	491a      	ldr	r1, [pc, #104]	@ (800071c <updateDisplay+0xb0>)
 80006b4:	481b      	ldr	r0, [pc, #108]	@ (8000724 <updateDisplay+0xb8>)
 80006b6:	f008 fb3b 	bl	8008d30 <siprintf>

    ssd1306_Fill(Black);
 80006ba:	2000      	movs	r0, #0
 80006bc:	f000 fbda 	bl	8000e74 <ssd1306_Fill>
    ssd1306_SetCursor(1, 10);
 80006c0:	210a      	movs	r1, #10
 80006c2:	2001      	movs	r0, #1
 80006c4:	f000 fd24 	bl	8001110 <ssd1306_SetCursor>
    ssd1306_WriteString(lcdBuffer[0], Font_6x8, White);
 80006c8:	4a17      	ldr	r2, [pc, #92]	@ (8000728 <updateDisplay+0xbc>)
 80006ca:	2301      	movs	r3, #1
 80006cc:	ca06      	ldmia	r2, {r1, r2}
 80006ce:	4811      	ldr	r0, [pc, #68]	@ (8000714 <updateDisplay+0xa8>)
 80006d0:	f000 fcf8 	bl	80010c4 <ssd1306_WriteString>
    ssd1306_SetCursor(1, 30);
 80006d4:	211e      	movs	r1, #30
 80006d6:	2001      	movs	r0, #1
 80006d8:	f000 fd1a 	bl	8001110 <ssd1306_SetCursor>
    ssd1306_WriteString(lcdBuffer[1], Font_6x8, White);
 80006dc:	4a12      	ldr	r2, [pc, #72]	@ (8000728 <updateDisplay+0xbc>)
 80006de:	2301      	movs	r3, #1
 80006e0:	ca06      	ldmia	r2, {r1, r2}
 80006e2:	480f      	ldr	r0, [pc, #60]	@ (8000720 <updateDisplay+0xb4>)
 80006e4:	f000 fcee 	bl	80010c4 <ssd1306_WriteString>
    ssd1306_SetCursor(1, 50);
 80006e8:	2132      	movs	r1, #50	@ 0x32
 80006ea:	2001      	movs	r0, #1
 80006ec:	f000 fd10 	bl	8001110 <ssd1306_SetCursor>
    ssd1306_WriteString(lcdBuffer[2], Font_6x8, White);
 80006f0:	4a0d      	ldr	r2, [pc, #52]	@ (8000728 <updateDisplay+0xbc>)
 80006f2:	2301      	movs	r3, #1
 80006f4:	ca06      	ldmia	r2, {r1, r2}
 80006f6:	480b      	ldr	r0, [pc, #44]	@ (8000724 <updateDisplay+0xb8>)
 80006f8:	f000 fce4 	bl	80010c4 <ssd1306_WriteString>
    ssd1306_UpdateScreen();
 80006fc:	f000 fbde 	bl	8000ebc <ssd1306_UpdateScreen>
}
 8000700:	bf00      	nop
 8000702:	3708      	adds	r7, #8
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	080096bc 	.word	0x080096bc
 800070c:	2000006f 	.word	0x2000006f
 8000710:	08009690 	.word	0x08009690
 8000714:	20000320 	.word	0x20000320
 8000718:	20000380 	.word	0x20000380
 800071c:	08009694 	.word	0x08009694
 8000720:	20000340 	.word	0x20000340
 8000724:	20000360 	.word	0x20000360
 8000728:	20000078 	.word	0x20000078

0800072c <getAllADCValue>:
/*
 * @brief	Get values from ADC1 channel 0-4 and assign into array adcValues
 * @retval	None
 */
void getAllADCValue(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
    HAL_ADC_Start(&hadc1);
 8000732:	4812      	ldr	r0, [pc, #72]	@ (800077c <getAllADCValue+0x50>)
 8000734:	f000 fff6 	bl	8001724 <HAL_ADC_Start>
    for (uint8_t i = 0; i < 4; i++)
 8000738:	2300      	movs	r3, #0
 800073a:	71fb      	strb	r3, [r7, #7]
 800073c:	e013      	b.n	8000766 <getAllADCValue+0x3a>
    {
        if (HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY) == HAL_OK)
 800073e:	f04f 31ff 	mov.w	r1, #4294967295
 8000742:	480e      	ldr	r0, [pc, #56]	@ (800077c <getAllADCValue+0x50>)
 8000744:	f001 f8d5 	bl	80018f2 <HAL_ADC_PollForConversion>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d108      	bne.n	8000760 <getAllADCValue+0x34>
        {
            adcValues[i] = HAL_ADC_GetValue(&hadc1);
 800074e:	480b      	ldr	r0, [pc, #44]	@ (800077c <getAllADCValue+0x50>)
 8000750:	f001 f95a 	bl	8001a08 <HAL_ADC_GetValue>
 8000754:	4602      	mov	r2, r0
 8000756:	79fb      	ldrb	r3, [r7, #7]
 8000758:	b291      	uxth	r1, r2
 800075a:	4a09      	ldr	r2, [pc, #36]	@ (8000780 <getAllADCValue+0x54>)
 800075c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (uint8_t i = 0; i < 4; i++)
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	3301      	adds	r3, #1
 8000764:	71fb      	strb	r3, [r7, #7]
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b03      	cmp	r3, #3
 800076a:	d9e8      	bls.n	800073e <getAllADCValue+0x12>
        }
    }

    HAL_ADC_Stop(&hadc1);
 800076c:	4803      	ldr	r0, [pc, #12]	@ (800077c <getAllADCValue+0x50>)
 800076e:	f001 f88d 	bl	800188c <HAL_ADC_Stop>
}
 8000772:	bf00      	nop
 8000774:	3708      	adds	r7, #8
 8000776:	46bd      	mov	sp, r7
 8000778:	bd80      	pop	{r7, pc}
 800077a:	bf00      	nop
 800077c:	2000023c 	.word	0x2000023c
 8000780:	20000380 	.word	0x20000380

08000784 <mouseProcess>:
/*
 * @brief	Gamepad Process
 * @retval	None
 */
void mouseProcess(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
	sprintf((char*)lcdBuffer[0], "Mouse mode ON");
 8000788:	4931      	ldr	r1, [pc, #196]	@ (8000850 <mouseProcess+0xcc>)
 800078a:	4832      	ldr	r0, [pc, #200]	@ (8000854 <mouseProcess+0xd0>)
 800078c:	f008 fad0 	bl	8008d30 <siprintf>
    mouseReport.pointerX = (adcValues[3] - 2047) * 255 / 4095;		// -127 - 127
 8000790:	4b31      	ldr	r3, [pc, #196]	@ (8000858 <mouseProcess+0xd4>)
 8000792:	88db      	ldrh	r3, [r3, #6]
 8000794:	f2a3 72ff 	subw	r2, r3, #2047	@ 0x7ff
 8000798:	4613      	mov	r3, r2
 800079a:	021b      	lsls	r3, r3, #8
 800079c:	1a9b      	subs	r3, r3, r2
 800079e:	4a2f      	ldr	r2, [pc, #188]	@ (800085c <mouseProcess+0xd8>)
 80007a0:	fb82 1203 	smull	r1, r2, r2, r3
 80007a4:	441a      	add	r2, r3
 80007a6:	12d2      	asrs	r2, r2, #11
 80007a8:	17db      	asrs	r3, r3, #31
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	b25a      	sxtb	r2, r3
 80007ae:	4b2c      	ldr	r3, [pc, #176]	@ (8000860 <mouseProcess+0xdc>)
 80007b0:	709a      	strb	r2, [r3, #2]
    mouseReport.pointerY = (2047 - adcValues[2]) * 255 / 4095;
 80007b2:	4b29      	ldr	r3, [pc, #164]	@ (8000858 <mouseProcess+0xd4>)
 80007b4:	889b      	ldrh	r3, [r3, #4]
 80007b6:	f5c3 63ff 	rsb	r3, r3, #2040	@ 0x7f8
 80007ba:	3307      	adds	r3, #7
 80007bc:	461a      	mov	r2, r3
 80007be:	0212      	lsls	r2, r2, #8
 80007c0:	1ad3      	subs	r3, r2, r3
 80007c2:	4a26      	ldr	r2, [pc, #152]	@ (800085c <mouseProcess+0xd8>)
 80007c4:	fb82 1203 	smull	r1, r2, r2, r3
 80007c8:	441a      	add	r2, r3
 80007ca:	12d2      	asrs	r2, r2, #11
 80007cc:	17db      	asrs	r3, r3, #31
 80007ce:	1ad3      	subs	r3, r2, r3
 80007d0:	b25a      	sxtb	r2, r3
 80007d2:	4b23      	ldr	r3, [pc, #140]	@ (8000860 <mouseProcess+0xdc>)
 80007d4:	70da      	strb	r2, [r3, #3]
    mouseReport.leftClick = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0) == GPIO_PIN_RESET);
 80007d6:	2101      	movs	r1, #1
 80007d8:	4822      	ldr	r0, [pc, #136]	@ (8000864 <mouseProcess+0xe0>)
 80007da:	f001 fdd7 	bl	800238c <HAL_GPIO_ReadPin>
 80007de:	4603      	mov	r3, r0
 80007e0:	2b00      	cmp	r3, #0
 80007e2:	bf0c      	ite	eq
 80007e4:	2301      	moveq	r3, #1
 80007e6:	2300      	movne	r3, #0
 80007e8:	b2d9      	uxtb	r1, r3
 80007ea:	4a1d      	ldr	r2, [pc, #116]	@ (8000860 <mouseProcess+0xdc>)
 80007ec:	7853      	ldrb	r3, [r2, #1]
 80007ee:	f361 0300 	bfi	r3, r1, #0, #1
 80007f2:	7053      	strb	r3, [r2, #1]
    mouseReport.rightClick = (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6) == GPIO_PIN_RESET);
 80007f4:	2140      	movs	r1, #64	@ 0x40
 80007f6:	481c      	ldr	r0, [pc, #112]	@ (8000868 <mouseProcess+0xe4>)
 80007f8:	f001 fdc8 	bl	800238c <HAL_GPIO_ReadPin>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	bf0c      	ite	eq
 8000802:	2301      	moveq	r3, #1
 8000804:	2300      	movne	r3, #0
 8000806:	b2d9      	uxtb	r1, r3
 8000808:	4a15      	ldr	r2, [pc, #84]	@ (8000860 <mouseProcess+0xdc>)
 800080a:	7853      	ldrb	r3, [r2, #1]
 800080c:	f361 0341 	bfi	r3, r1, #1, #1
 8000810:	7053      	strb	r3, [r2, #1]
    mouseReport.midClick = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1) == GPIO_PIN_RESET);
 8000812:	2102      	movs	r1, #2
 8000814:	4813      	ldr	r0, [pc, #76]	@ (8000864 <mouseProcess+0xe0>)
 8000816:	f001 fdb9 	bl	800238c <HAL_GPIO_ReadPin>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	bf0c      	ite	eq
 8000820:	2301      	moveq	r3, #1
 8000822:	2300      	movne	r3, #0
 8000824:	b2d9      	uxtb	r1, r3
 8000826:	4a0e      	ldr	r2, [pc, #56]	@ (8000860 <mouseProcess+0xdc>)
 8000828:	7853      	ldrb	r3, [r2, #1]
 800082a:	f361 0382 	bfi	r3, r1, #2, #1
 800082e:	7053      	strb	r3, [r2, #1]
    mouseReport.wheel = __HAL_TIM_GET_COUNTER(&htim2) - 127;
 8000830:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <mouseProcess+0xe8>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000836:	b2db      	uxtb	r3, r3
 8000838:	3b7f      	subs	r3, #127	@ 0x7f
 800083a:	b2db      	uxtb	r3, r3
 800083c:	b25a      	sxtb	r2, r3
 800083e:	4b08      	ldr	r3, [pc, #32]	@ (8000860 <mouseProcess+0xdc>)
 8000840:	711a      	strb	r2, [r3, #4]

    USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &mouseReport, sizeof(mouseReport));
 8000842:	2205      	movs	r2, #5
 8000844:	4906      	ldr	r1, [pc, #24]	@ (8000860 <mouseProcess+0xdc>)
 8000846:	480a      	ldr	r0, [pc, #40]	@ (8000870 <mouseProcess+0xec>)
 8000848:	f006 f992 	bl	8006b70 <USBD_CUSTOM_HID_SendReport>
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	080096c4 	.word	0x080096c4
 8000854:	20000320 	.word	0x20000320
 8000858:	20000380 	.word	0x20000380
 800085c:	80080081 	.word	0x80080081
 8000860:	20000060 	.word	0x20000060
 8000864:	40020400 	.word	0x40020400
 8000868:	40020000 	.word	0x40020000
 800086c:	200002d8 	.word	0x200002d8
 8000870:	2000079c 	.word	0x2000079c

08000874 <gamepadProcess>:

/*
 * Mouse Process
 */
void gamepadProcess(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
	sprintf((char*)lcdBuffer[0], "Gamepad mode ON");
 800087a:	4940      	ldr	r1, [pc, #256]	@ (800097c <gamepadProcess+0x108>)
 800087c:	4840      	ldr	r0, [pc, #256]	@ (8000980 <gamepadProcess+0x10c>)
 800087e:	f008 fa57 	bl	8008d30 <siprintf>
    gamepadReport.leftX = (adcValues[3] - 2047) * 255 / 4095;		// -127 - 127
 8000882:	4b40      	ldr	r3, [pc, #256]	@ (8000984 <gamepadProcess+0x110>)
 8000884:	88db      	ldrh	r3, [r3, #6]
 8000886:	f2a3 72ff 	subw	r2, r3, #2047	@ 0x7ff
 800088a:	4613      	mov	r3, r2
 800088c:	021b      	lsls	r3, r3, #8
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	4a3d      	ldr	r2, [pc, #244]	@ (8000988 <gamepadProcess+0x114>)
 8000892:	fb82 1203 	smull	r1, r2, r2, r3
 8000896:	441a      	add	r2, r3
 8000898:	12d2      	asrs	r2, r2, #11
 800089a:	17db      	asrs	r3, r3, #31
 800089c:	1ad3      	subs	r3, r2, r3
 800089e:	b25a      	sxtb	r2, r3
 80008a0:	4b3a      	ldr	r3, [pc, #232]	@ (800098c <gamepadProcess+0x118>)
 80008a2:	70da      	strb	r2, [r3, #3]
    gamepadReport.leftY = (2047 - adcValues[2]) * 255 / 4095;
 80008a4:	4b37      	ldr	r3, [pc, #220]	@ (8000984 <gamepadProcess+0x110>)
 80008a6:	889b      	ldrh	r3, [r3, #4]
 80008a8:	f5c3 63ff 	rsb	r3, r3, #2040	@ 0x7f8
 80008ac:	3307      	adds	r3, #7
 80008ae:	461a      	mov	r2, r3
 80008b0:	0212      	lsls	r2, r2, #8
 80008b2:	1ad3      	subs	r3, r2, r3
 80008b4:	4a34      	ldr	r2, [pc, #208]	@ (8000988 <gamepadProcess+0x114>)
 80008b6:	fb82 1203 	smull	r1, r2, r2, r3
 80008ba:	441a      	add	r2, r3
 80008bc:	12d2      	asrs	r2, r2, #11
 80008be:	17db      	asrs	r3, r3, #31
 80008c0:	1ad3      	subs	r3, r2, r3
 80008c2:	b25a      	sxtb	r2, r3
 80008c4:	4b31      	ldr	r3, [pc, #196]	@ (800098c <gamepadProcess+0x118>)
 80008c6:	711a      	strb	r2, [r3, #4]
    gamepadReport.rightX = (adcValues[1] - 2047) * 255 / 4095;
 80008c8:	4b2e      	ldr	r3, [pc, #184]	@ (8000984 <gamepadProcess+0x110>)
 80008ca:	885b      	ldrh	r3, [r3, #2]
 80008cc:	f2a3 72ff 	subw	r2, r3, #2047	@ 0x7ff
 80008d0:	4613      	mov	r3, r2
 80008d2:	021b      	lsls	r3, r3, #8
 80008d4:	1a9b      	subs	r3, r3, r2
 80008d6:	4a2c      	ldr	r2, [pc, #176]	@ (8000988 <gamepadProcess+0x114>)
 80008d8:	fb82 1203 	smull	r1, r2, r2, r3
 80008dc:	441a      	add	r2, r3
 80008de:	12d2      	asrs	r2, r2, #11
 80008e0:	17db      	asrs	r3, r3, #31
 80008e2:	1ad3      	subs	r3, r2, r3
 80008e4:	b25a      	sxtb	r2, r3
 80008e6:	4b29      	ldr	r3, [pc, #164]	@ (800098c <gamepadProcess+0x118>)
 80008e8:	715a      	strb	r2, [r3, #5]
    gamepadReport.rightY = (2047 - adcValues[0]) * 255 / 4095;
 80008ea:	4b26      	ldr	r3, [pc, #152]	@ (8000984 <gamepadProcess+0x110>)
 80008ec:	881b      	ldrh	r3, [r3, #0]
 80008ee:	f5c3 63ff 	rsb	r3, r3, #2040	@ 0x7f8
 80008f2:	3307      	adds	r3, #7
 80008f4:	461a      	mov	r2, r3
 80008f6:	0212      	lsls	r2, r2, #8
 80008f8:	1ad3      	subs	r3, r2, r3
 80008fa:	4a23      	ldr	r2, [pc, #140]	@ (8000988 <gamepadProcess+0x114>)
 80008fc:	fb82 1203 	smull	r1, r2, r2, r3
 8000900:	441a      	add	r2, r3
 8000902:	12d2      	asrs	r2, r2, #11
 8000904:	17db      	asrs	r3, r3, #31
 8000906:	1ad3      	subs	r3, r2, r3
 8000908:	b25a      	sxtb	r2, r3
 800090a:	4b20      	ldr	r3, [pc, #128]	@ (800098c <gamepadProcess+0x118>)
 800090c:	719a      	strb	r2, [r3, #6]
    gamepadReport.buttons = 0;
 800090e:	4b1f      	ldr	r3, [pc, #124]	@ (800098c <gamepadProcess+0x118>)
 8000910:	2200      	movs	r2, #0
 8000912:	705a      	strb	r2, [r3, #1]
 8000914:	2200      	movs	r2, #0
 8000916:	709a      	strb	r2, [r3, #2]

    for (int i = 0; i < 16; i++)
 8000918:	2300      	movs	r3, #0
 800091a:	607b      	str	r3, [r7, #4]
 800091c:	e021      	b.n	8000962 <gamepadProcess+0xee>
    {
        if (HAL_GPIO_ReadPin(port[i], pin[i]) == GPIO_PIN_RESET)
 800091e:	4a1c      	ldr	r2, [pc, #112]	@ (8000990 <gamepadProcess+0x11c>)
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000926:	491b      	ldr	r1, [pc, #108]	@ (8000994 <gamepadProcess+0x120>)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800092e:	4619      	mov	r1, r3
 8000930:	4610      	mov	r0, r2
 8000932:	f001 fd2b 	bl	800238c <HAL_GPIO_ReadPin>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d10f      	bne.n	800095c <gamepadProcess+0xe8>
        {
            gamepadReport.buttons |= (1 << i);
 800093c:	4b13      	ldr	r3, [pc, #76]	@ (800098c <gamepadProcess+0x118>)
 800093e:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 8000942:	b29b      	uxth	r3, r3
 8000944:	b21a      	sxth	r2, r3
 8000946:	2101      	movs	r1, #1
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	fa01 f303 	lsl.w	r3, r1, r3
 800094e:	b21b      	sxth	r3, r3
 8000950:	4313      	orrs	r3, r2
 8000952:	b21b      	sxth	r3, r3
 8000954:	b29a      	uxth	r2, r3
 8000956:	4b0d      	ldr	r3, [pc, #52]	@ (800098c <gamepadProcess+0x118>)
 8000958:	f8a3 2001 	strh.w	r2, [r3, #1]
    for (int i = 0; i < 16; i++)
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	3301      	adds	r3, #1
 8000960:	607b      	str	r3, [r7, #4]
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	2b0f      	cmp	r3, #15
 8000966:	ddda      	ble.n	800091e <gamepadProcess+0xaa>
        }
    }

    USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &gamepadReport, sizeof(gamepadReport));
 8000968:	2207      	movs	r2, #7
 800096a:	4908      	ldr	r1, [pc, #32]	@ (800098c <gamepadProcess+0x118>)
 800096c:	480a      	ldr	r0, [pc, #40]	@ (8000998 <gamepadProcess+0x124>)
 800096e:	f006 f8ff 	bl	8006b70 <USBD_CUSTOM_HID_SendReport>
}
 8000972:	bf00      	nop
 8000974:	3708      	adds	r7, #8
 8000976:	46bd      	mov	sp, r7
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	080096d4 	.word	0x080096d4
 8000980:	20000320 	.word	0x20000320
 8000984:	20000380 	.word	0x20000380
 8000988:	80080081 	.word	0x80080081
 800098c:	20000068 	.word	0x20000068
 8000990:	20000000 	.word	0x20000000
 8000994:	20000040 	.word	0x20000040
 8000998:	2000079c 	.word	0x2000079c

0800099c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b094      	sub	sp, #80	@ 0x50
 80009a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a2:	f107 0320 	add.w	r3, r7, #32
 80009a6:	2230      	movs	r2, #48	@ 0x30
 80009a8:	2100      	movs	r1, #0
 80009aa:	4618      	mov	r0, r3
 80009ac:	f008 f9fa 	bl	8008da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b0:	f107 030c 	add.w	r3, r7, #12
 80009b4:	2200      	movs	r2, #0
 80009b6:	601a      	str	r2, [r3, #0]
 80009b8:	605a      	str	r2, [r3, #4]
 80009ba:	609a      	str	r2, [r3, #8]
 80009bc:	60da      	str	r2, [r3, #12]
 80009be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009c0:	2300      	movs	r3, #0
 80009c2:	60bb      	str	r3, [r7, #8]
 80009c4:	4b28      	ldr	r3, [pc, #160]	@ (8000a68 <SystemClock_Config+0xcc>)
 80009c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009c8:	4a27      	ldr	r2, [pc, #156]	@ (8000a68 <SystemClock_Config+0xcc>)
 80009ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80009d0:	4b25      	ldr	r3, [pc, #148]	@ (8000a68 <SystemClock_Config+0xcc>)
 80009d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d8:	60bb      	str	r3, [r7, #8]
 80009da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80009dc:	2300      	movs	r3, #0
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	4b22      	ldr	r3, [pc, #136]	@ (8000a6c <SystemClock_Config+0xd0>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80009e8:	4a20      	ldr	r2, [pc, #128]	@ (8000a6c <SystemClock_Config+0xd0>)
 80009ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80009ee:	6013      	str	r3, [r2, #0]
 80009f0:	4b1e      	ldr	r3, [pc, #120]	@ (8000a6c <SystemClock_Config+0xd0>)
 80009f2:	681b      	ldr	r3, [r3, #0]
 80009f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009fc:	2301      	movs	r3, #1
 80009fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a00:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a06:	2302      	movs	r3, #2
 8000a08:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a0a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000a0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000a10:	2319      	movs	r3, #25
 8000a12:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000a14:	2390      	movs	r3, #144	@ 0x90
 8000a16:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a18:	2302      	movs	r3, #2
 8000a1a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000a1c:	2303      	movs	r3, #3
 8000a1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a20:	f107 0320 	add.w	r3, r7, #32
 8000a24:	4618      	mov	r0, r3
 8000a26:	f003 fb89 	bl	800413c <HAL_RCC_OscConfig>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000a30:	f000 f976 	bl	8000d20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a34:	230f      	movs	r3, #15
 8000a36:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000a40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a44:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a4a:	f107 030c 	add.w	r3, r7, #12
 8000a4e:	2102      	movs	r1, #2
 8000a50:	4618      	mov	r0, r3
 8000a52:	f003 fdeb 	bl	800462c <HAL_RCC_ClockConfig>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d001      	beq.n	8000a60 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a5c:	f000 f960 	bl	8000d20 <Error_Handler>
  }
}
 8000a60:	bf00      	nop
 8000a62:	3750      	adds	r7, #80	@ 0x50
 8000a64:	46bd      	mov	sp, r7
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	40023800 	.word	0x40023800
 8000a6c:	40007000 	.word	0x40007000

08000a70 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a76:	463b      	mov	r3, r7
 8000a78:	2200      	movs	r2, #0
 8000a7a:	601a      	str	r2, [r3, #0]
 8000a7c:	605a      	str	r2, [r3, #4]
 8000a7e:	609a      	str	r2, [r3, #8]
 8000a80:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a82:	4b36      	ldr	r3, [pc, #216]	@ (8000b5c <MX_ADC1_Init+0xec>)
 8000a84:	4a36      	ldr	r2, [pc, #216]	@ (8000b60 <MX_ADC1_Init+0xf0>)
 8000a86:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000a88:	4b34      	ldr	r3, [pc, #208]	@ (8000b5c <MX_ADC1_Init+0xec>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a8e:	4b33      	ldr	r3, [pc, #204]	@ (8000b5c <MX_ADC1_Init+0xec>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000a94:	4b31      	ldr	r3, [pc, #196]	@ (8000b5c <MX_ADC1_Init+0xec>)
 8000a96:	2201      	movs	r2, #1
 8000a98:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000a9a:	4b30      	ldr	r3, [pc, #192]	@ (8000b5c <MX_ADC1_Init+0xec>)
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aa0:	4b2e      	ldr	r3, [pc, #184]	@ (8000b5c <MX_ADC1_Init+0xec>)
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000aa8:	4b2c      	ldr	r3, [pc, #176]	@ (8000b5c <MX_ADC1_Init+0xec>)
 8000aaa:	2200      	movs	r2, #0
 8000aac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aae:	4b2b      	ldr	r3, [pc, #172]	@ (8000b5c <MX_ADC1_Init+0xec>)
 8000ab0:	4a2c      	ldr	r2, [pc, #176]	@ (8000b64 <MX_ADC1_Init+0xf4>)
 8000ab2:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ab4:	4b29      	ldr	r3, [pc, #164]	@ (8000b5c <MX_ADC1_Init+0xec>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000aba:	4b28      	ldr	r3, [pc, #160]	@ (8000b5c <MX_ADC1_Init+0xec>)
 8000abc:	2204      	movs	r2, #4
 8000abe:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ac0:	4b26      	ldr	r3, [pc, #152]	@ (8000b5c <MX_ADC1_Init+0xec>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ac8:	4b24      	ldr	r3, [pc, #144]	@ (8000b5c <MX_ADC1_Init+0xec>)
 8000aca:	2201      	movs	r2, #1
 8000acc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ace:	4823      	ldr	r0, [pc, #140]	@ (8000b5c <MX_ADC1_Init+0xec>)
 8000ad0:	f000 fde4 	bl	800169c <HAL_ADC_Init>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d001      	beq.n	8000ade <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ada:	f000 f921 	bl	8000d20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000aea:	463b      	mov	r3, r7
 8000aec:	4619      	mov	r1, r3
 8000aee:	481b      	ldr	r0, [pc, #108]	@ (8000b5c <MX_ADC1_Init+0xec>)
 8000af0:	f000 ff98 	bl	8001a24 <HAL_ADC_ConfigChannel>
 8000af4:	4603      	mov	r3, r0
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d001      	beq.n	8000afe <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000afa:	f000 f911 	bl	8000d20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000afe:	2301      	movs	r3, #1
 8000b00:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000b02:	2302      	movs	r3, #2
 8000b04:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b06:	463b      	mov	r3, r7
 8000b08:	4619      	mov	r1, r3
 8000b0a:	4814      	ldr	r0, [pc, #80]	@ (8000b5c <MX_ADC1_Init+0xec>)
 8000b0c:	f000 ff8a 	bl	8001a24 <HAL_ADC_ConfigChannel>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d001      	beq.n	8000b1a <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000b16:	f000 f903 	bl	8000d20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b22:	463b      	mov	r3, r7
 8000b24:	4619      	mov	r1, r3
 8000b26:	480d      	ldr	r0, [pc, #52]	@ (8000b5c <MX_ADC1_Init+0xec>)
 8000b28:	f000 ff7c 	bl	8001a24 <HAL_ADC_ConfigChannel>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d001      	beq.n	8000b36 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000b32:	f000 f8f5 	bl	8000d20 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000b36:	2303      	movs	r3, #3
 8000b38:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000b3a:	2304      	movs	r3, #4
 8000b3c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b3e:	463b      	mov	r3, r7
 8000b40:	4619      	mov	r1, r3
 8000b42:	4806      	ldr	r0, [pc, #24]	@ (8000b5c <MX_ADC1_Init+0xec>)
 8000b44:	f000 ff6e 	bl	8001a24 <HAL_ADC_ConfigChannel>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000b4e:	f000 f8e7 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b52:	bf00      	nop
 8000b54:	3710      	adds	r7, #16
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	2000023c 	.word	0x2000023c
 8000b60:	40012000 	.word	0x40012000
 8000b64:	0f000001 	.word	0x0f000001

08000b68 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000b6c:	4b12      	ldr	r3, [pc, #72]	@ (8000bb8 <MX_I2C3_Init+0x50>)
 8000b6e:	4a13      	ldr	r2, [pc, #76]	@ (8000bbc <MX_I2C3_Init+0x54>)
 8000b70:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 400000;
 8000b72:	4b11      	ldr	r3, [pc, #68]	@ (8000bb8 <MX_I2C3_Init+0x50>)
 8000b74:	4a12      	ldr	r2, [pc, #72]	@ (8000bc0 <MX_I2C3_Init+0x58>)
 8000b76:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b78:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb8 <MX_I2C3_Init+0x50>)
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8000b7e:	4b0e      	ldr	r3, [pc, #56]	@ (8000bb8 <MX_I2C3_Init+0x50>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000b84:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb8 <MX_I2C3_Init+0x50>)
 8000b86:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000b8a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000b8c:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <MX_I2C3_Init+0x50>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8000b92:	4b09      	ldr	r3, [pc, #36]	@ (8000bb8 <MX_I2C3_Init+0x50>)
 8000b94:	2200      	movs	r2, #0
 8000b96:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b98:	4b07      	ldr	r3, [pc, #28]	@ (8000bb8 <MX_I2C3_Init+0x50>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b9e:	4b06      	ldr	r3, [pc, #24]	@ (8000bb8 <MX_I2C3_Init+0x50>)
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ba4:	4804      	ldr	r0, [pc, #16]	@ (8000bb8 <MX_I2C3_Init+0x50>)
 8000ba6:	f001 fc09 	bl	80023bc <HAL_I2C_Init>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 8000bb0:	f000 f8b6 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000bb4:	bf00      	nop
 8000bb6:	bd80      	pop	{r7, pc}
 8000bb8:	20000284 	.word	0x20000284
 8000bbc:	40005c00 	.word	0x40005c00
 8000bc0:	00061a80 	.word	0x00061a80

08000bc4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b08c      	sub	sp, #48	@ 0x30
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000bca:	f107 030c 	add.w	r3, r7, #12
 8000bce:	2224      	movs	r2, #36	@ 0x24
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f008 f8e6 	bl	8008da4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000bd8:	1d3b      	adds	r3, r7, #4
 8000bda:	2200      	movs	r2, #0
 8000bdc:	601a      	str	r2, [r3, #0]
 8000bde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000be0:	4b21      	ldr	r3, [pc, #132]	@ (8000c68 <MX_TIM2_Init+0xa4>)
 8000be2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000be6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000be8:	4b1f      	ldr	r3, [pc, #124]	@ (8000c68 <MX_TIM2_Init+0xa4>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bee:	4b1e      	ldr	r3, [pc, #120]	@ (8000c68 <MX_TIM2_Init+0xa4>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 256;
 8000bf4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c68 <MX_TIM2_Init+0xa4>)
 8000bf6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000bfa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bfc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c68 <MX_TIM2_Init+0xa4>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c02:	4b19      	ldr	r3, [pc, #100]	@ (8000c68 <MX_TIM2_Init+0xa4>)
 8000c04:	2200      	movs	r2, #0
 8000c06:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8000c08:	2303      	movs	r3, #3
 8000c0a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000c0c:	2300      	movs	r3, #0
 8000c0e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000c10:	2301      	movs	r3, #1
 8000c12:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000c14:	2300      	movs	r3, #0
 8000c16:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000c20:	2301      	movs	r3, #1
 8000c22:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8000c2c:	f107 030c 	add.w	r3, r7, #12
 8000c30:	4619      	mov	r1, r3
 8000c32:	480d      	ldr	r0, [pc, #52]	@ (8000c68 <MX_TIM2_Init+0xa4>)
 8000c34:	f003 fec6 	bl	80049c4 <HAL_TIM_Encoder_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000c3e:	f000 f86f 	bl	8000d20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c42:	2300      	movs	r3, #0
 8000c44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c46:	2300      	movs	r3, #0
 8000c48:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4806      	ldr	r0, [pc, #24]	@ (8000c68 <MX_TIM2_Init+0xa4>)
 8000c50:	f004 f892 	bl	8004d78 <HAL_TIMEx_MasterConfigSynchronization>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8000c5a:	f000 f861 	bl	8000d20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c5e:	bf00      	nop
 8000c60:	3730      	adds	r7, #48	@ 0x30
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bd80      	pop	{r7, pc}
 8000c66:	bf00      	nop
 8000c68:	200002d8 	.word	0x200002d8

08000c6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b088      	sub	sp, #32
 8000c70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c72:	f107 030c 	add.w	r3, r7, #12
 8000c76:	2200      	movs	r2, #0
 8000c78:	601a      	str	r2, [r3, #0]
 8000c7a:	605a      	str	r2, [r3, #4]
 8000c7c:	609a      	str	r2, [r3, #8]
 8000c7e:	60da      	str	r2, [r3, #12]
 8000c80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c82:	2300      	movs	r3, #0
 8000c84:	60bb      	str	r3, [r7, #8]
 8000c86:	4b23      	ldr	r3, [pc, #140]	@ (8000d14 <MX_GPIO_Init+0xa8>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c8a:	4a22      	ldr	r2, [pc, #136]	@ (8000d14 <MX_GPIO_Init+0xa8>)
 8000c8c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c92:	4b20      	ldr	r3, [pc, #128]	@ (8000d14 <MX_GPIO_Init+0xa8>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c96:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d14 <MX_GPIO_Init+0xa8>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ca6:	4a1b      	ldr	r2, [pc, #108]	@ (8000d14 <MX_GPIO_Init+0xa8>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cae:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <MX_GPIO_Init+0xa8>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	4b15      	ldr	r3, [pc, #84]	@ (8000d14 <MX_GPIO_Init+0xa8>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	4a14      	ldr	r2, [pc, #80]	@ (8000d14 <MX_GPIO_Init+0xa8>)
 8000cc4:	f043 0302 	orr.w	r3, r3, #2
 8000cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cca:	4b12      	ldr	r3, [pc, #72]	@ (8000d14 <MX_GPIO_Init+0xa8>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	f003 0302 	and.w	r3, r3, #2
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA4 PA6 PA7 PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_9;
 8000cd6:	f44f 7334 	mov.w	r3, #720	@ 0x2d0
 8000cda:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce4:	f107 030c 	add.w	r3, r7, #12
 8000ce8:	4619      	mov	r1, r3
 8000cea:	480b      	ldr	r0, [pc, #44]	@ (8000d18 <MX_GPIO_Init+0xac>)
 8000cec:	f001 f9ca 	bl	8002084 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB12 PB13 PB14 PB15
                           PB5 PB6 PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000cf0:	f24f 53e7 	movw	r3, #62951	@ 0xf5e7
 8000cf4:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15
                          |GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfe:	f107 030c 	add.w	r3, r7, #12
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <MX_GPIO_Init+0xb0>)
 8000d06:	f001 f9bd 	bl	8002084 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d0a:	bf00      	nop
 8000d0c:	3720      	adds	r7, #32
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40023800 	.word	0x40023800
 8000d18:	40020000 	.word	0x40020000
 8000d1c:	40020400 	.word	0x40020400

08000d20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d24:	b672      	cpsid	i
}
 8000d26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d28:	bf00      	nop
 8000d2a:	e7fd      	b.n	8000d28 <Error_Handler+0x8>

08000d2c <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
	...

08000d3c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af04      	add	r7, sp, #16
 8000d42:	4603      	mov	r3, r0
 8000d44:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000d46:	f04f 33ff 	mov.w	r3, #4294967295
 8000d4a:	9302      	str	r3, [sp, #8]
 8000d4c:	2301      	movs	r3, #1
 8000d4e:	9301      	str	r3, [sp, #4]
 8000d50:	1dfb      	adds	r3, r7, #7
 8000d52:	9300      	str	r3, [sp, #0]
 8000d54:	2301      	movs	r3, #1
 8000d56:	2200      	movs	r2, #0
 8000d58:	2178      	movs	r1, #120	@ 0x78
 8000d5a:	4803      	ldr	r0, [pc, #12]	@ (8000d68 <ssd1306_WriteCommand+0x2c>)
 8000d5c:	f001 fc72 	bl	8002644 <HAL_I2C_Mem_Write>
}
 8000d60:	bf00      	nop
 8000d62:	3708      	adds	r7, #8
 8000d64:	46bd      	mov	sp, r7
 8000d66:	bd80      	pop	{r7, pc}
 8000d68:	20000284 	.word	0x20000284

08000d6c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b086      	sub	sp, #24
 8000d70:	af04      	add	r7, sp, #16
 8000d72:	6078      	str	r0, [r7, #4]
 8000d74:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000d76:	683b      	ldr	r3, [r7, #0]
 8000d78:	b29b      	uxth	r3, r3
 8000d7a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d7e:	9202      	str	r2, [sp, #8]
 8000d80:	9301      	str	r3, [sp, #4]
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	9300      	str	r3, [sp, #0]
 8000d86:	2301      	movs	r3, #1
 8000d88:	2240      	movs	r2, #64	@ 0x40
 8000d8a:	2178      	movs	r1, #120	@ 0x78
 8000d8c:	4803      	ldr	r0, [pc, #12]	@ (8000d9c <ssd1306_WriteData+0x30>)
 8000d8e:	f001 fc59 	bl	8002644 <HAL_I2C_Mem_Write>
}
 8000d92:	bf00      	nop
 8000d94:	3708      	adds	r7, #8
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000284 	.word	0x20000284

08000da0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000da4:	f7ff ffc2 	bl	8000d2c <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000da8:	2064      	movs	r0, #100	@ 0x64
 8000daa:	f000 fc53 	bl	8001654 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000dae:	2000      	movs	r0, #0
 8000db0:	f000 f9da 	bl	8001168 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000db4:	2020      	movs	r0, #32
 8000db6:	f7ff ffc1 	bl	8000d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000dba:	2000      	movs	r0, #0
 8000dbc:	f7ff ffbe 	bl	8000d3c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000dc0:	20b0      	movs	r0, #176	@ 0xb0
 8000dc2:	f7ff ffbb 	bl	8000d3c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000dc6:	20c8      	movs	r0, #200	@ 0xc8
 8000dc8:	f7ff ffb8 	bl	8000d3c <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000dcc:	2000      	movs	r0, #0
 8000dce:	f7ff ffb5 	bl	8000d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000dd2:	2010      	movs	r0, #16
 8000dd4:	f7ff ffb2 	bl	8000d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000dd8:	2040      	movs	r0, #64	@ 0x40
 8000dda:	f7ff ffaf 	bl	8000d3c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000dde:	20ff      	movs	r0, #255	@ 0xff
 8000de0:	f000 f9ae 	bl	8001140 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000de4:	20a1      	movs	r0, #161	@ 0xa1
 8000de6:	f7ff ffa9 	bl	8000d3c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000dea:	20a6      	movs	r0, #166	@ 0xa6
 8000dec:	f7ff ffa6 	bl	8000d3c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000df0:	20a8      	movs	r0, #168	@ 0xa8
 8000df2:	f7ff ffa3 	bl	8000d3c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000df6:	203f      	movs	r0, #63	@ 0x3f
 8000df8:	f7ff ffa0 	bl	8000d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000dfc:	20a4      	movs	r0, #164	@ 0xa4
 8000dfe:	f7ff ff9d 	bl	8000d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000e02:	20d3      	movs	r0, #211	@ 0xd3
 8000e04:	f7ff ff9a 	bl	8000d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000e08:	2000      	movs	r0, #0
 8000e0a:	f7ff ff97 	bl	8000d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000e0e:	20d5      	movs	r0, #213	@ 0xd5
 8000e10:	f7ff ff94 	bl	8000d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000e14:	20f0      	movs	r0, #240	@ 0xf0
 8000e16:	f7ff ff91 	bl	8000d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000e1a:	20d9      	movs	r0, #217	@ 0xd9
 8000e1c:	f7ff ff8e 	bl	8000d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000e20:	2022      	movs	r0, #34	@ 0x22
 8000e22:	f7ff ff8b 	bl	8000d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000e26:	20da      	movs	r0, #218	@ 0xda
 8000e28:	f7ff ff88 	bl	8000d3c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000e2c:	2012      	movs	r0, #18
 8000e2e:	f7ff ff85 	bl	8000d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000e32:	20db      	movs	r0, #219	@ 0xdb
 8000e34:	f7ff ff82 	bl	8000d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000e38:	2020      	movs	r0, #32
 8000e3a:	f7ff ff7f 	bl	8000d3c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000e3e:	208d      	movs	r0, #141	@ 0x8d
 8000e40:	f7ff ff7c 	bl	8000d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000e44:	2014      	movs	r0, #20
 8000e46:	f7ff ff79 	bl	8000d3c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000e4a:	2001      	movs	r0, #1
 8000e4c:	f000 f98c 	bl	8001168 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000e50:	2000      	movs	r0, #0
 8000e52:	f000 f80f 	bl	8000e74 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000e56:	f000 f831 	bl	8000ebc <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000e5a:	4b05      	ldr	r3, [pc, #20]	@ (8000e70 <ssd1306_Init+0xd0>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000e60:	4b03      	ldr	r3, [pc, #12]	@ (8000e70 <ssd1306_Init+0xd0>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000e66:	4b02      	ldr	r3, [pc, #8]	@ (8000e70 <ssd1306_Init+0xd0>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	711a      	strb	r2, [r3, #4]
}
 8000e6c:	bf00      	nop
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	20000788 	.word	0x20000788

08000e74 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000e74:	b480      	push	{r7}
 8000e76:	b085      	sub	sp, #20
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	71fb      	strb	r3, [r7, #7]
    uint32_t i;

    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000e7e:	2300      	movs	r3, #0
 8000e80:	60fb      	str	r3, [r7, #12]
 8000e82:	e00d      	b.n	8000ea0 <ssd1306_Fill+0x2c>
        SSD1306_Buffer[i] = (color == Black) ? 0x00 : 0xFF;
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d101      	bne.n	8000e8e <ssd1306_Fill+0x1a>
 8000e8a:	2100      	movs	r1, #0
 8000e8c:	e000      	b.n	8000e90 <ssd1306_Fill+0x1c>
 8000e8e:	21ff      	movs	r1, #255	@ 0xff
 8000e90:	4a09      	ldr	r2, [pc, #36]	@ (8000eb8 <ssd1306_Fill+0x44>)
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	4413      	add	r3, r2
 8000e96:	460a      	mov	r2, r1
 8000e98:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < sizeof(SSD1306_Buffer); i++) {
 8000e9a:	68fb      	ldr	r3, [r7, #12]
 8000e9c:	3301      	adds	r3, #1
 8000e9e:	60fb      	str	r3, [r7, #12]
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000ea6:	d3ed      	bcc.n	8000e84 <ssd1306_Fill+0x10>
    }
}
 8000ea8:	bf00      	nop
 8000eaa:	bf00      	nop
 8000eac:	3714      	adds	r7, #20
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb4:	4770      	bx	lr
 8000eb6:	bf00      	nop
 8000eb8:	20000388 	.word	0x20000388

08000ebc <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	71fb      	strb	r3, [r7, #7]
 8000ec6:	e016      	b.n	8000ef6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000ec8:	79fb      	ldrb	r3, [r7, #7]
 8000eca:	3b50      	subs	r3, #80	@ 0x50
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f7ff ff34 	bl	8000d3c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000ed4:	2000      	movs	r0, #0
 8000ed6:	f7ff ff31 	bl	8000d3c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000eda:	2010      	movs	r0, #16
 8000edc:	f7ff ff2e 	bl	8000d3c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000ee0:	79fb      	ldrb	r3, [r7, #7]
 8000ee2:	01db      	lsls	r3, r3, #7
 8000ee4:	4a08      	ldr	r2, [pc, #32]	@ (8000f08 <ssd1306_UpdateScreen+0x4c>)
 8000ee6:	4413      	add	r3, r2
 8000ee8:	2180      	movs	r1, #128	@ 0x80
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff3e 	bl	8000d6c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000ef0:	79fb      	ldrb	r3, [r7, #7]
 8000ef2:	3301      	adds	r3, #1
 8000ef4:	71fb      	strb	r3, [r7, #7]
 8000ef6:	79fb      	ldrb	r3, [r7, #7]
 8000ef8:	2b07      	cmp	r3, #7
 8000efa:	d9e5      	bls.n	8000ec8 <ssd1306_UpdateScreen+0xc>
    }
}
 8000efc:	bf00      	nop
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	20000388 	.word	0x20000388

08000f0c <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
 8000f16:	460b      	mov	r3, r1
 8000f18:	71bb      	strb	r3, [r7, #6]
 8000f1a:	4613      	mov	r3, r2
 8000f1c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000f1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	db3d      	blt.n	8000fa2 <ssd1306_DrawPixel+0x96>
 8000f26:	79bb      	ldrb	r3, [r7, #6]
 8000f28:	2b3f      	cmp	r3, #63	@ 0x3f
 8000f2a:	d83a      	bhi.n	8000fa2 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000f2c:	797b      	ldrb	r3, [r7, #5]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d11a      	bne.n	8000f68 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000f32:	79fa      	ldrb	r2, [r7, #7]
 8000f34:	79bb      	ldrb	r3, [r7, #6]
 8000f36:	08db      	lsrs	r3, r3, #3
 8000f38:	b2d8      	uxtb	r0, r3
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	01db      	lsls	r3, r3, #7
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a1b      	ldr	r2, [pc, #108]	@ (8000fb0 <ssd1306_DrawPixel+0xa4>)
 8000f42:	5cd3      	ldrb	r3, [r2, r3]
 8000f44:	b25a      	sxtb	r2, r3
 8000f46:	79bb      	ldrb	r3, [r7, #6]
 8000f48:	f003 0307 	and.w	r3, r3, #7
 8000f4c:	2101      	movs	r1, #1
 8000f4e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f52:	b25b      	sxtb	r3, r3
 8000f54:	4313      	orrs	r3, r2
 8000f56:	b259      	sxtb	r1, r3
 8000f58:	79fa      	ldrb	r2, [r7, #7]
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	01db      	lsls	r3, r3, #7
 8000f5e:	4413      	add	r3, r2
 8000f60:	b2c9      	uxtb	r1, r1
 8000f62:	4a13      	ldr	r2, [pc, #76]	@ (8000fb0 <ssd1306_DrawPixel+0xa4>)
 8000f64:	54d1      	strb	r1, [r2, r3]
 8000f66:	e01d      	b.n	8000fa4 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000f68:	79fa      	ldrb	r2, [r7, #7]
 8000f6a:	79bb      	ldrb	r3, [r7, #6]
 8000f6c:	08db      	lsrs	r3, r3, #3
 8000f6e:	b2d8      	uxtb	r0, r3
 8000f70:	4603      	mov	r3, r0
 8000f72:	01db      	lsls	r3, r3, #7
 8000f74:	4413      	add	r3, r2
 8000f76:	4a0e      	ldr	r2, [pc, #56]	@ (8000fb0 <ssd1306_DrawPixel+0xa4>)
 8000f78:	5cd3      	ldrb	r3, [r2, r3]
 8000f7a:	b25a      	sxtb	r2, r3
 8000f7c:	79bb      	ldrb	r3, [r7, #6]
 8000f7e:	f003 0307 	and.w	r3, r3, #7
 8000f82:	2101      	movs	r1, #1
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	b25b      	sxtb	r3, r3
 8000f8a:	43db      	mvns	r3, r3
 8000f8c:	b25b      	sxtb	r3, r3
 8000f8e:	4013      	ands	r3, r2
 8000f90:	b259      	sxtb	r1, r3
 8000f92:	79fa      	ldrb	r2, [r7, #7]
 8000f94:	4603      	mov	r3, r0
 8000f96:	01db      	lsls	r3, r3, #7
 8000f98:	4413      	add	r3, r2
 8000f9a:	b2c9      	uxtb	r1, r1
 8000f9c:	4a04      	ldr	r2, [pc, #16]	@ (8000fb0 <ssd1306_DrawPixel+0xa4>)
 8000f9e:	54d1      	strb	r1, [r2, r3]
 8000fa0:	e000      	b.n	8000fa4 <ssd1306_DrawPixel+0x98>
        return;
 8000fa2:	bf00      	nop
    }
}
 8000fa4:	370c      	adds	r7, #12
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	20000388 	.word	0x20000388

08000fb4 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000fb4:	b590      	push	{r4, r7, lr}
 8000fb6:	b089      	sub	sp, #36	@ 0x24
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	4604      	mov	r4, r0
 8000fbc:	1d38      	adds	r0, r7, #4
 8000fbe:	e880 0006 	stmia.w	r0, {r1, r2}
 8000fc2:	461a      	mov	r2, r3
 8000fc4:	4623      	mov	r3, r4
 8000fc6:	73fb      	strb	r3, [r7, #15]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000fcc:	7bfb      	ldrb	r3, [r7, #15]
 8000fce:	2b1f      	cmp	r3, #31
 8000fd0:	d902      	bls.n	8000fd8 <ssd1306_WriteChar+0x24>
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	2b7e      	cmp	r3, #126	@ 0x7e
 8000fd6:	d901      	bls.n	8000fdc <ssd1306_WriteChar+0x28>
        return 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	e06c      	b.n	80010b6 <ssd1306_WriteChar+0x102>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000fdc:	4b38      	ldr	r3, [pc, #224]	@ (80010c0 <ssd1306_WriteChar+0x10c>)
 8000fde:	881b      	ldrh	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	793b      	ldrb	r3, [r7, #4]
 8000fe4:	4413      	add	r3, r2
 8000fe6:	2b80      	cmp	r3, #128	@ 0x80
 8000fe8:	dc06      	bgt.n	8000ff8 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000fea:	4b35      	ldr	r3, [pc, #212]	@ (80010c0 <ssd1306_WriteChar+0x10c>)
 8000fec:	885b      	ldrh	r3, [r3, #2]
 8000fee:	461a      	mov	r2, r3
 8000ff0:	797b      	ldrb	r3, [r7, #5]
 8000ff2:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000ff4:	2b40      	cmp	r3, #64	@ 0x40
 8000ff6:	dd01      	ble.n	8000ffc <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	e05c      	b.n	80010b6 <ssd1306_WriteChar+0x102>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	61fb      	str	r3, [r7, #28]
 8001000:	e04c      	b.n	800109c <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8001002:	68ba      	ldr	r2, [r7, #8]
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	3b20      	subs	r3, #32
 8001008:	7979      	ldrb	r1, [r7, #5]
 800100a:	fb01 f303 	mul.w	r3, r1, r3
 800100e:	4619      	mov	r1, r3
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	440b      	add	r3, r1
 8001014:	005b      	lsls	r3, r3, #1
 8001016:	4413      	add	r3, r2
 8001018:	881b      	ldrh	r3, [r3, #0]
 800101a:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 800101c:	2300      	movs	r3, #0
 800101e:	61bb      	str	r3, [r7, #24]
 8001020:	e034      	b.n	800108c <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8001022:	697a      	ldr	r2, [r7, #20]
 8001024:	69bb      	ldr	r3, [r7, #24]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d012      	beq.n	8001058 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8001032:	4b23      	ldr	r3, [pc, #140]	@ (80010c0 <ssd1306_WriteChar+0x10c>)
 8001034:	881b      	ldrh	r3, [r3, #0]
 8001036:	b2da      	uxtb	r2, r3
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	b2db      	uxtb	r3, r3
 800103c:	4413      	add	r3, r2
 800103e:	b2d8      	uxtb	r0, r3
 8001040:	4b1f      	ldr	r3, [pc, #124]	@ (80010c0 <ssd1306_WriteChar+0x10c>)
 8001042:	885b      	ldrh	r3, [r3, #2]
 8001044:	b2da      	uxtb	r2, r3
 8001046:	69fb      	ldr	r3, [r7, #28]
 8001048:	b2db      	uxtb	r3, r3
 800104a:	4413      	add	r3, r2
 800104c:	b2db      	uxtb	r3, r3
 800104e:	7bba      	ldrb	r2, [r7, #14]
 8001050:	4619      	mov	r1, r3
 8001052:	f7ff ff5b 	bl	8000f0c <ssd1306_DrawPixel>
 8001056:	e016      	b.n	8001086 <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8001058:	4b19      	ldr	r3, [pc, #100]	@ (80010c0 <ssd1306_WriteChar+0x10c>)
 800105a:	881b      	ldrh	r3, [r3, #0]
 800105c:	b2da      	uxtb	r2, r3
 800105e:	69bb      	ldr	r3, [r7, #24]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	4413      	add	r3, r2
 8001064:	b2d8      	uxtb	r0, r3
 8001066:	4b16      	ldr	r3, [pc, #88]	@ (80010c0 <ssd1306_WriteChar+0x10c>)
 8001068:	885b      	ldrh	r3, [r3, #2]
 800106a:	b2da      	uxtb	r2, r3
 800106c:	69fb      	ldr	r3, [r7, #28]
 800106e:	b2db      	uxtb	r3, r3
 8001070:	4413      	add	r3, r2
 8001072:	b2d9      	uxtb	r1, r3
 8001074:	7bbb      	ldrb	r3, [r7, #14]
 8001076:	2b00      	cmp	r3, #0
 8001078:	bf0c      	ite	eq
 800107a:	2301      	moveq	r3, #1
 800107c:	2300      	movne	r3, #0
 800107e:	b2db      	uxtb	r3, r3
 8001080:	461a      	mov	r2, r3
 8001082:	f7ff ff43 	bl	8000f0c <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	3301      	adds	r3, #1
 800108a:	61bb      	str	r3, [r7, #24]
 800108c:	793b      	ldrb	r3, [r7, #4]
 800108e:	461a      	mov	r2, r3
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	4293      	cmp	r3, r2
 8001094:	d3c5      	bcc.n	8001022 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8001096:	69fb      	ldr	r3, [r7, #28]
 8001098:	3301      	adds	r3, #1
 800109a:	61fb      	str	r3, [r7, #28]
 800109c:	797b      	ldrb	r3, [r7, #5]
 800109e:	461a      	mov	r2, r3
 80010a0:	69fb      	ldr	r3, [r7, #28]
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d3ad      	bcc.n	8001002 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 80010a6:	4b06      	ldr	r3, [pc, #24]	@ (80010c0 <ssd1306_WriteChar+0x10c>)
 80010a8:	881b      	ldrh	r3, [r3, #0]
 80010aa:	793a      	ldrb	r2, [r7, #4]
 80010ac:	4413      	add	r3, r2
 80010ae:	b29a      	uxth	r2, r3
 80010b0:	4b03      	ldr	r3, [pc, #12]	@ (80010c0 <ssd1306_WriteChar+0x10c>)
 80010b2:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	3724      	adds	r7, #36	@ 0x24
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd90      	pop	{r4, r7, pc}
 80010be:	bf00      	nop
 80010c0:	20000788 	.word	0x20000788

080010c4 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b084      	sub	sp, #16
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	1d38      	adds	r0, r7, #4
 80010ce:	e880 0006 	stmia.w	r0, {r1, r2}
 80010d2:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 80010d4:	e012      	b.n	80010fc <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	7818      	ldrb	r0, [r3, #0]
 80010da:	78fb      	ldrb	r3, [r7, #3]
 80010dc:	1d3a      	adds	r2, r7, #4
 80010de:	ca06      	ldmia	r2, {r1, r2}
 80010e0:	f7ff ff68 	bl	8000fb4 <ssd1306_WriteChar>
 80010e4:	4603      	mov	r3, r0
 80010e6:	461a      	mov	r2, r3
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	429a      	cmp	r2, r3
 80010ee:	d002      	beq.n	80010f6 <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	e008      	b.n	8001108 <ssd1306_WriteString+0x44>
        }
        str++;
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	3301      	adds	r3, #1
 80010fa:	60fb      	str	r3, [r7, #12]
    while (*str) {
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	781b      	ldrb	r3, [r3, #0]
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1e8      	bne.n	80010d6 <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	781b      	ldrb	r3, [r3, #0]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	4603      	mov	r3, r0
 8001118:	460a      	mov	r2, r1
 800111a:	71fb      	strb	r3, [r7, #7]
 800111c:	4613      	mov	r3, r2
 800111e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8001120:	79fb      	ldrb	r3, [r7, #7]
 8001122:	b29a      	uxth	r2, r3
 8001124:	4b05      	ldr	r3, [pc, #20]	@ (800113c <ssd1306_SetCursor+0x2c>)
 8001126:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8001128:	79bb      	ldrb	r3, [r7, #6]
 800112a:	b29a      	uxth	r2, r3
 800112c:	4b03      	ldr	r3, [pc, #12]	@ (800113c <ssd1306_SetCursor+0x2c>)
 800112e:	805a      	strh	r2, [r3, #2]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	20000788 	.word	0x20000788

08001140 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8001140:	b580      	push	{r7, lr}
 8001142:	b084      	sub	sp, #16
 8001144:	af00      	add	r7, sp, #0
 8001146:	4603      	mov	r3, r0
 8001148:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800114a:	2381      	movs	r3, #129	@ 0x81
 800114c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff fdf3 	bl	8000d3c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8001156:	79fb      	ldrb	r3, [r7, #7]
 8001158:	4618      	mov	r0, r3
 800115a:	f7ff fdef 	bl	8000d3c <ssd1306_WriteCommand>
}
 800115e:	bf00      	nop
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8001168:	b580      	push	{r7, lr}
 800116a:	b084      	sub	sp, #16
 800116c:	af00      	add	r7, sp, #0
 800116e:	4603      	mov	r3, r0
 8001170:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8001172:	79fb      	ldrb	r3, [r7, #7]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d005      	beq.n	8001184 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8001178:	23af      	movs	r3, #175	@ 0xaf
 800117a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 800117c:	4b08      	ldr	r3, [pc, #32]	@ (80011a0 <ssd1306_SetDisplayOn+0x38>)
 800117e:	2201      	movs	r2, #1
 8001180:	715a      	strb	r2, [r3, #5]
 8001182:	e004      	b.n	800118e <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8001184:	23ae      	movs	r3, #174	@ 0xae
 8001186:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8001188:	4b05      	ldr	r3, [pc, #20]	@ (80011a0 <ssd1306_SetDisplayOn+0x38>)
 800118a:	2200      	movs	r2, #0
 800118c:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800118e:	7bfb      	ldrb	r3, [r7, #15]
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff fdd3 	bl	8000d3c <ssd1306_WriteCommand>
}
 8001196:	bf00      	nop
 8001198:	3710      	adds	r7, #16
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000788 	.word	0x20000788

080011a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	4b10      	ldr	r3, [pc, #64]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b2:	4a0f      	ldr	r2, [pc, #60]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80011ba:	4b0d      	ldr	r3, [pc, #52]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011c6:	2300      	movs	r3, #0
 80011c8:	603b      	str	r3, [r7, #0]
 80011ca:	4b09      	ldr	r3, [pc, #36]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011ce:	4a08      	ldr	r2, [pc, #32]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80011d6:	4b06      	ldr	r3, [pc, #24]	@ (80011f0 <HAL_MspInit+0x4c>)
 80011d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011de:	603b      	str	r3, [r7, #0]
 80011e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011e2:	bf00      	nop
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr
 80011ee:	bf00      	nop
 80011f0:	40023800 	.word	0x40023800

080011f4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b08a      	sub	sp, #40	@ 0x28
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fc:	f107 0314 	add.w	r3, r7, #20
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]
 8001204:	605a      	str	r2, [r3, #4]
 8001206:	609a      	str	r2, [r3, #8]
 8001208:	60da      	str	r2, [r3, #12]
 800120a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4a17      	ldr	r2, [pc, #92]	@ (8001270 <HAL_ADC_MspInit+0x7c>)
 8001212:	4293      	cmp	r3, r2
 8001214:	d127      	bne.n	8001266 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001216:	2300      	movs	r3, #0
 8001218:	613b      	str	r3, [r7, #16]
 800121a:	4b16      	ldr	r3, [pc, #88]	@ (8001274 <HAL_ADC_MspInit+0x80>)
 800121c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800121e:	4a15      	ldr	r2, [pc, #84]	@ (8001274 <HAL_ADC_MspInit+0x80>)
 8001220:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001224:	6453      	str	r3, [r2, #68]	@ 0x44
 8001226:	4b13      	ldr	r3, [pc, #76]	@ (8001274 <HAL_ADC_MspInit+0x80>)
 8001228:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800122a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800122e:	613b      	str	r3, [r7, #16]
 8001230:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001232:	2300      	movs	r3, #0
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <HAL_ADC_MspInit+0x80>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800123a:	4a0e      	ldr	r2, [pc, #56]	@ (8001274 <HAL_ADC_MspInit+0x80>)
 800123c:	f043 0301 	orr.w	r3, r3, #1
 8001240:	6313      	str	r3, [r2, #48]	@ 0x30
 8001242:	4b0c      	ldr	r3, [pc, #48]	@ (8001274 <HAL_ADC_MspInit+0x80>)
 8001244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001246:	f003 0301 	and.w	r3, r3, #1
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800124e:	230f      	movs	r3, #15
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001252:	2303      	movs	r3, #3
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125a:	f107 0314 	add.w	r3, r7, #20
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	@ (8001278 <HAL_ADC_MspInit+0x84>)
 8001262:	f000 ff0f 	bl	8002084 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001266:	bf00      	nop
 8001268:	3728      	adds	r7, #40	@ 0x28
 800126a:	46bd      	mov	sp, r7
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	40012000 	.word	0x40012000
 8001274:	40023800 	.word	0x40023800
 8001278:	40020000 	.word	0x40020000

0800127c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b08a      	sub	sp, #40	@ 0x28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001284:	f107 0314 	add.w	r3, r7, #20
 8001288:	2200      	movs	r2, #0
 800128a:	601a      	str	r2, [r3, #0]
 800128c:	605a      	str	r2, [r3, #4]
 800128e:	609a      	str	r2, [r3, #8]
 8001290:	60da      	str	r2, [r3, #12]
 8001292:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C3)
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a28      	ldr	r2, [pc, #160]	@ (800133c <HAL_I2C_MspInit+0xc0>)
 800129a:	4293      	cmp	r3, r2
 800129c:	d14a      	bne.n	8001334 <HAL_I2C_MspInit+0xb8>
  {
  /* USER CODE BEGIN I2C3_MspInit 0 */

  /* USER CODE END I2C3_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	613b      	str	r3, [r7, #16]
 80012a2:	4b27      	ldr	r3, [pc, #156]	@ (8001340 <HAL_I2C_MspInit+0xc4>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	4a26      	ldr	r2, [pc, #152]	@ (8001340 <HAL_I2C_MspInit+0xc4>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ae:	4b24      	ldr	r3, [pc, #144]	@ (8001340 <HAL_I2C_MspInit+0xc4>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	613b      	str	r3, [r7, #16]
 80012b8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	60fb      	str	r3, [r7, #12]
 80012be:	4b20      	ldr	r3, [pc, #128]	@ (8001340 <HAL_I2C_MspInit+0xc4>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	4a1f      	ldr	r2, [pc, #124]	@ (8001340 <HAL_I2C_MspInit+0xc4>)
 80012c4:	f043 0302 	orr.w	r3, r3, #2
 80012c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001340 <HAL_I2C_MspInit+0xc4>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ce:	f003 0302 	and.w	r3, r3, #2
 80012d2:	60fb      	str	r3, [r7, #12]
 80012d4:	68fb      	ldr	r3, [r7, #12]
    /**I2C3 GPIO Configuration
    PA8     ------> I2C3_SCL
    PB4     ------> I2C3_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80012d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012dc:	2312      	movs	r3, #18
 80012de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e0:	2300      	movs	r3, #0
 80012e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e4:	2303      	movs	r3, #3
 80012e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80012e8:	2304      	movs	r3, #4
 80012ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012ec:	f107 0314 	add.w	r3, r7, #20
 80012f0:	4619      	mov	r1, r3
 80012f2:	4814      	ldr	r0, [pc, #80]	@ (8001344 <HAL_I2C_MspInit+0xc8>)
 80012f4:	f000 fec6 	bl	8002084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80012f8:	2310      	movs	r3, #16
 80012fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012fc:	2312      	movs	r3, #18
 80012fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001300:	2300      	movs	r3, #0
 8001302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001304:	2303      	movs	r3, #3
 8001306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C3;
 8001308:	2309      	movs	r3, #9
 800130a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130c:	f107 0314 	add.w	r3, r7, #20
 8001310:	4619      	mov	r1, r3
 8001312:	480d      	ldr	r0, [pc, #52]	@ (8001348 <HAL_I2C_MspInit+0xcc>)
 8001314:	f000 feb6 	bl	8002084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001318:	2300      	movs	r3, #0
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <HAL_I2C_MspInit+0xc4>)
 800131e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001320:	4a07      	ldr	r2, [pc, #28]	@ (8001340 <HAL_I2C_MspInit+0xc4>)
 8001322:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8001326:	6413      	str	r3, [r2, #64]	@ 0x40
 8001328:	4b05      	ldr	r3, [pc, #20]	@ (8001340 <HAL_I2C_MspInit+0xc4>)
 800132a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800132c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8001334:	bf00      	nop
 8001336:	3728      	adds	r7, #40	@ 0x28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	40005c00 	.word	0x40005c00
 8001340:	40023800 	.word	0x40023800
 8001344:	40020000 	.word	0x40020000
 8001348:	40020400 	.word	0x40020400

0800134c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800136c:	d149      	bne.n	8001402 <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800136e:	2300      	movs	r3, #0
 8001370:	613b      	str	r3, [r7, #16]
 8001372:	4b26      	ldr	r3, [pc, #152]	@ (800140c <HAL_TIM_Encoder_MspInit+0xc0>)
 8001374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001376:	4a25      	ldr	r2, [pc, #148]	@ (800140c <HAL_TIM_Encoder_MspInit+0xc0>)
 8001378:	f043 0301 	orr.w	r3, r3, #1
 800137c:	6413      	str	r3, [r2, #64]	@ 0x40
 800137e:	4b23      	ldr	r3, [pc, #140]	@ (800140c <HAL_TIM_Encoder_MspInit+0xc0>)
 8001380:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001382:	f003 0301 	and.w	r3, r3, #1
 8001386:	613b      	str	r3, [r7, #16]
 8001388:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b1f      	ldr	r3, [pc, #124]	@ (800140c <HAL_TIM_Encoder_MspInit+0xc0>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a1e      	ldr	r2, [pc, #120]	@ (800140c <HAL_TIM_Encoder_MspInit+0xc0>)
 8001394:	f043 0301 	orr.w	r3, r3, #1
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b1c      	ldr	r3, [pc, #112]	@ (800140c <HAL_TIM_Encoder_MspInit+0xc0>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0301 	and.w	r3, r3, #1
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b18      	ldr	r3, [pc, #96]	@ (800140c <HAL_TIM_Encoder_MspInit+0xc0>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a17      	ldr	r2, [pc, #92]	@ (800140c <HAL_TIM_Encoder_MspInit+0xc0>)
 80013b0:	f043 0302 	orr.w	r3, r3, #2
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b15      	ldr	r3, [pc, #84]	@ (800140c <HAL_TIM_Encoder_MspInit+0xc0>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0302 	and.w	r3, r3, #2
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80013c2:	2320      	movs	r3, #32
 80013c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c6:	2302      	movs	r3, #2
 80013c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013d2:	2301      	movs	r3, #1
 80013d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f107 0314 	add.w	r3, r7, #20
 80013da:	4619      	mov	r1, r3
 80013dc:	480c      	ldr	r0, [pc, #48]	@ (8001410 <HAL_TIM_Encoder_MspInit+0xc4>)
 80013de:	f000 fe51 	bl	8002084 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80013e2:	2308      	movs	r3, #8
 80013e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e6:	2302      	movs	r3, #2
 80013e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ea:	2300      	movs	r3, #0
 80013ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ee:	2300      	movs	r3, #0
 80013f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80013f2:	2301      	movs	r3, #1
 80013f4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013f6:	f107 0314 	add.w	r3, r7, #20
 80013fa:	4619      	mov	r1, r3
 80013fc:	4805      	ldr	r0, [pc, #20]	@ (8001414 <HAL_TIM_Encoder_MspInit+0xc8>)
 80013fe:	f000 fe41 	bl	8002084 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001402:	bf00      	nop
 8001404:	3728      	adds	r7, #40	@ 0x28
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
 800140a:	bf00      	nop
 800140c:	40023800 	.word	0x40023800
 8001410:	40020000 	.word	0x40020000
 8001414:	40020400 	.word	0x40020400

08001418 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001418:	b480      	push	{r7}
 800141a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800141c:	bf00      	nop
 800141e:	e7fd      	b.n	800141c <NMI_Handler+0x4>

08001420 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001420:	b480      	push	{r7}
 8001422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001424:	bf00      	nop
 8001426:	e7fd      	b.n	8001424 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <MemManage_Handler+0x4>

08001430 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001434:	bf00      	nop
 8001436:	e7fd      	b.n	8001434 <BusFault_Handler+0x4>

08001438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800143c:	bf00      	nop
 800143e:	e7fd      	b.n	800143c <UsageFault_Handler+0x4>

08001440 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001452:	bf00      	nop
 8001454:	46bd      	mov	sp, r7
 8001456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800145a:	4770      	bx	lr

0800145c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001460:	bf00      	nop
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr

0800146a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800146a:	b580      	push	{r7, lr}
 800146c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800146e:	f000 f8d1 	bl	8001614 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001472:	bf00      	nop
 8001474:	bd80      	pop	{r7, pc}
	...

08001478 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800147c:	4802      	ldr	r0, [pc, #8]	@ (8001488 <OTG_FS_IRQHandler+0x10>)
 800147e:	f001 fd48 	bl	8002f12 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001482:	bf00      	nop
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	20000c78 	.word	0x20000c78

0800148c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001494:	4a14      	ldr	r2, [pc, #80]	@ (80014e8 <_sbrk+0x5c>)
 8001496:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <_sbrk+0x60>)
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a0:	4b13      	ldr	r3, [pc, #76]	@ (80014f0 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d102      	bne.n	80014ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a8:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <_sbrk+0x64>)
 80014aa:	4a12      	ldr	r2, [pc, #72]	@ (80014f4 <_sbrk+0x68>)
 80014ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ae:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d207      	bcs.n	80014cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014bc:	f007 fc7a 	bl	8008db4 <__errno>
 80014c0:	4603      	mov	r3, r0
 80014c2:	220c      	movs	r2, #12
 80014c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	e009      	b.n	80014e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014cc:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014d2:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <_sbrk+0x64>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	4a05      	ldr	r2, [pc, #20]	@ (80014f0 <_sbrk+0x64>)
 80014dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014de:	68fb      	ldr	r3, [r7, #12]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20010000 	.word	0x20010000
 80014ec:	00000400 	.word	0x00000400
 80014f0:	20000790 	.word	0x20000790
 80014f4:	20001318 	.word	0x20001318

080014f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014fc:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <SystemInit+0x20>)
 80014fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001502:	4a05      	ldr	r2, [pc, #20]	@ (8001518 <SystemInit+0x20>)
 8001504:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001508:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800151c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001554 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001520:	480d      	ldr	r0, [pc, #52]	@ (8001558 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001522:	490e      	ldr	r1, [pc, #56]	@ (800155c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001524:	4a0e      	ldr	r2, [pc, #56]	@ (8001560 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001526:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001528:	e002      	b.n	8001530 <LoopCopyDataInit>

0800152a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800152a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800152c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800152e:	3304      	adds	r3, #4

08001530 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001530:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001532:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001534:	d3f9      	bcc.n	800152a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001536:	4a0b      	ldr	r2, [pc, #44]	@ (8001564 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001538:	4c0b      	ldr	r4, [pc, #44]	@ (8001568 <LoopFillZerobss+0x26>)
  movs r3, #0
 800153a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800153c:	e001      	b.n	8001542 <LoopFillZerobss>

0800153e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800153e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001540:	3204      	adds	r2, #4

08001542 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001542:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001544:	d3fb      	bcc.n	800153e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001546:	f7ff ffd7 	bl	80014f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800154a:	f007 fc39 	bl	8008dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800154e:	f7ff f80f 	bl	8000570 <main>
  bx  lr    
 8001552:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001554:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001558:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800155c:	20000220 	.word	0x20000220
  ldr r2, =_sidata
 8001560:	08009d80 	.word	0x08009d80
  ldr r2, =_sbss
 8001564:	20000220 	.word	0x20000220
  ldr r4, =_ebss
 8001568:	20001314 	.word	0x20001314

0800156c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800156c:	e7fe      	b.n	800156c <ADC_IRQHandler>
	...

08001570 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001574:	4b0e      	ldr	r3, [pc, #56]	@ (80015b0 <HAL_Init+0x40>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0d      	ldr	r2, [pc, #52]	@ (80015b0 <HAL_Init+0x40>)
 800157a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800157e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001580:	4b0b      	ldr	r3, [pc, #44]	@ (80015b0 <HAL_Init+0x40>)
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	4a0a      	ldr	r2, [pc, #40]	@ (80015b0 <HAL_Init+0x40>)
 8001586:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800158a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800158c:	4b08      	ldr	r3, [pc, #32]	@ (80015b0 <HAL_Init+0x40>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a07      	ldr	r2, [pc, #28]	@ (80015b0 <HAL_Init+0x40>)
 8001592:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001596:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001598:	2003      	movs	r0, #3
 800159a:	f000 fd31 	bl	8002000 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800159e:	200f      	movs	r0, #15
 80015a0:	f000 f808 	bl	80015b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015a4:	f7ff fdfe 	bl	80011a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015a8:	2300      	movs	r3, #0
}
 80015aa:	4618      	mov	r0, r3
 80015ac:	bd80      	pop	{r7, pc}
 80015ae:	bf00      	nop
 80015b0:	40023c00 	.word	0x40023c00

080015b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80015bc:	4b12      	ldr	r3, [pc, #72]	@ (8001608 <HAL_InitTick+0x54>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	4b12      	ldr	r3, [pc, #72]	@ (800160c <HAL_InitTick+0x58>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	4619      	mov	r1, r3
 80015c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80015ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80015ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80015d2:	4618      	mov	r0, r3
 80015d4:	f000 fd49 	bl	800206a <HAL_SYSTICK_Config>
 80015d8:	4603      	mov	r3, r0
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d001      	beq.n	80015e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80015de:	2301      	movs	r3, #1
 80015e0:	e00e      	b.n	8001600 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2b0f      	cmp	r3, #15
 80015e6:	d80a      	bhi.n	80015fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015e8:	2200      	movs	r2, #0
 80015ea:	6879      	ldr	r1, [r7, #4]
 80015ec:	f04f 30ff 	mov.w	r0, #4294967295
 80015f0:	f000 fd11 	bl	8002016 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80015f4:	4a06      	ldr	r2, [pc, #24]	@ (8001610 <HAL_InitTick+0x5c>)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80015fa:	2300      	movs	r3, #0
 80015fc:	e000      	b.n	8001600 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
}
 8001600:	4618      	mov	r0, r3
 8001602:	3708      	adds	r7, #8
 8001604:	46bd      	mov	sp, r7
 8001606:	bd80      	pop	{r7, pc}
 8001608:	20000080 	.word	0x20000080
 800160c:	20000088 	.word	0x20000088
 8001610:	20000084 	.word	0x20000084

08001614 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001618:	4b06      	ldr	r3, [pc, #24]	@ (8001634 <HAL_IncTick+0x20>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	461a      	mov	r2, r3
 800161e:	4b06      	ldr	r3, [pc, #24]	@ (8001638 <HAL_IncTick+0x24>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4413      	add	r3, r2
 8001624:	4a04      	ldr	r2, [pc, #16]	@ (8001638 <HAL_IncTick+0x24>)
 8001626:	6013      	str	r3, [r2, #0]
}
 8001628:	bf00      	nop
 800162a:	46bd      	mov	sp, r7
 800162c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001630:	4770      	bx	lr
 8001632:	bf00      	nop
 8001634:	20000088 	.word	0x20000088
 8001638:	20000794 	.word	0x20000794

0800163c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
  return uwTick;
 8001640:	4b03      	ldr	r3, [pc, #12]	@ (8001650 <HAL_GetTick+0x14>)
 8001642:	681b      	ldr	r3, [r3, #0]
}
 8001644:	4618      	mov	r0, r3
 8001646:	46bd      	mov	sp, r7
 8001648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000794 	.word	0x20000794

08001654 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001654:	b580      	push	{r7, lr}
 8001656:	b084      	sub	sp, #16
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800165c:	f7ff ffee 	bl	800163c <HAL_GetTick>
 8001660:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	f1b3 3fff 	cmp.w	r3, #4294967295
 800166c:	d005      	beq.n	800167a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800166e:	4b0a      	ldr	r3, [pc, #40]	@ (8001698 <HAL_Delay+0x44>)
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	461a      	mov	r2, r3
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	4413      	add	r3, r2
 8001678:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800167a:	bf00      	nop
 800167c:	f7ff ffde 	bl	800163c <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	68bb      	ldr	r3, [r7, #8]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	68fa      	ldr	r2, [r7, #12]
 8001688:	429a      	cmp	r2, r3
 800168a:	d8f7      	bhi.n	800167c <HAL_Delay+0x28>
  {
  }
}
 800168c:	bf00      	nop
 800168e:	bf00      	nop
 8001690:	3710      	adds	r7, #16
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000088 	.word	0x20000088

0800169c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80016a4:	2300      	movs	r3, #0
 80016a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d101      	bne.n	80016b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80016ae:	2301      	movs	r3, #1
 80016b0:	e033      	b.n	800171a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d109      	bne.n	80016ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff fd9a 	bl	80011f4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	2200      	movs	r2, #0
 80016c4:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	2200      	movs	r2, #0
 80016ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d118      	bne.n	800170c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016e2:	f023 0302 	bic.w	r3, r3, #2
 80016e6:	f043 0202 	orr.w	r2, r3, #2
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80016ee:	6878      	ldr	r0, [r7, #4]
 80016f0:	f000 faba 	bl	8001c68 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	2200      	movs	r2, #0
 80016f8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	f023 0303 	bic.w	r3, r3, #3
 8001702:	f043 0201 	orr.w	r2, r3, #1
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	641a      	str	r2, [r3, #64]	@ 0x40
 800170a:	e001      	b.n	8001710 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800170c:	2301      	movs	r3, #1
 800170e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2200      	movs	r2, #0
 8001714:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001718:	7bfb      	ldrb	r3, [r7, #15]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001724:	b480      	push	{r7}
 8001726:	b085      	sub	sp, #20
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001736:	2b01      	cmp	r3, #1
 8001738:	d101      	bne.n	800173e <HAL_ADC_Start+0x1a>
 800173a:	2302      	movs	r3, #2
 800173c:	e097      	b.n	800186e <HAL_ADC_Start+0x14a>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	689b      	ldr	r3, [r3, #8]
 800174c:	f003 0301 	and.w	r3, r3, #1
 8001750:	2b01      	cmp	r3, #1
 8001752:	d018      	beq.n	8001786 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f042 0201 	orr.w	r2, r2, #1
 8001762:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001764:	4b45      	ldr	r3, [pc, #276]	@ (800187c <HAL_ADC_Start+0x158>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a45      	ldr	r2, [pc, #276]	@ (8001880 <HAL_ADC_Start+0x15c>)
 800176a:	fba2 2303 	umull	r2, r3, r2, r3
 800176e:	0c9a      	lsrs	r2, r3, #18
 8001770:	4613      	mov	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001778:	e002      	b.n	8001780 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800177a:	68bb      	ldr	r3, [r7, #8]
 800177c:	3b01      	subs	r3, #1
 800177e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001780:	68bb      	ldr	r3, [r7, #8]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d1f9      	bne.n	800177a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f003 0301 	and.w	r3, r3, #1
 8001790:	2b01      	cmp	r3, #1
 8001792:	d15f      	bne.n	8001854 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001798:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 800179c:	f023 0301 	bic.w	r3, r3, #1
 80017a0:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d007      	beq.n	80017c6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ba:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80017be:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80017ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80017d2:	d106      	bne.n	80017e2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017d8:	f023 0206 	bic.w	r2, r3, #6
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	645a      	str	r2, [r3, #68]	@ 0x44
 80017e0:	e002      	b.n	80017e8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	2200      	movs	r2, #0
 80017ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017f0:	4b24      	ldr	r3, [pc, #144]	@ (8001884 <HAL_ADC_Start+0x160>)
 80017f2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 80017fc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	f003 031f 	and.w	r3, r3, #31
 8001806:	2b00      	cmp	r3, #0
 8001808:	d10f      	bne.n	800182a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	689b      	ldr	r3, [r3, #8]
 8001810:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8001814:	2b00      	cmp	r3, #0
 8001816:	d129      	bne.n	800186c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	689a      	ldr	r2, [r3, #8]
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001826:	609a      	str	r2, [r3, #8]
 8001828:	e020      	b.n	800186c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a16      	ldr	r2, [pc, #88]	@ (8001888 <HAL_ADC_Start+0x164>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d11b      	bne.n	800186c <HAL_ADC_Start+0x148>
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	689b      	ldr	r3, [r3, #8]
 800183a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800183e:	2b00      	cmp	r3, #0
 8001840:	d114      	bne.n	800186c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8001850:	609a      	str	r2, [r3, #8]
 8001852:	e00b      	b.n	800186c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001858:	f043 0210 	orr.w	r2, r3, #16
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001864:	f043 0201 	orr.w	r2, r3, #1
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3714      	adds	r7, #20
 8001872:	46bd      	mov	sp, r7
 8001874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001878:	4770      	bx	lr
 800187a:	bf00      	nop
 800187c:	20000080 	.word	0x20000080
 8001880:	431bde83 	.word	0x431bde83
 8001884:	40012300 	.word	0x40012300
 8001888:	40012000 	.word	0x40012000

0800188c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800189a:	2b01      	cmp	r3, #1
 800189c:	d101      	bne.n	80018a2 <HAL_ADC_Stop+0x16>
 800189e:	2302      	movs	r3, #2
 80018a0:	e021      	b.n	80018e6 <HAL_ADC_Stop+0x5a>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	2201      	movs	r2, #1
 80018a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0201 	bic.w	r2, r2, #1
 80018b8:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d109      	bne.n	80018dc <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018cc:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80018d0:	f023 0301 	bic.w	r3, r3, #1
 80018d4:	f043 0201 	orr.w	r2, r3, #1
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018e4:	2300      	movs	r3, #0
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	370c      	adds	r7, #12
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr

080018f2 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b084      	sub	sp, #16
 80018f6:	af00      	add	r7, sp, #0
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800190a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800190e:	d113      	bne.n	8001938 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800191a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800191e:	d10b      	bne.n	8001938 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001924:	f043 0220 	orr.w	r2, r3, #32
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001934:	2301      	movs	r3, #1
 8001936:	e063      	b.n	8001a00 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001938:	f7ff fe80 	bl	800163c <HAL_GetTick>
 800193c:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800193e:	e021      	b.n	8001984 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001946:	d01d      	beq.n	8001984 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d007      	beq.n	800195e <HAL_ADC_PollForConversion+0x6c>
 800194e:	f7ff fe75 	bl	800163c <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	683a      	ldr	r2, [r7, #0]
 800195a:	429a      	cmp	r2, r3
 800195c:	d212      	bcs.n	8001984 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	f003 0302 	and.w	r3, r3, #2
 8001968:	2b02      	cmp	r3, #2
 800196a:	d00b      	beq.n	8001984 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001970:	f043 0204 	orr.w	r2, r3, #4
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e03d      	b.n	8001a00 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b02      	cmp	r3, #2
 8001990:	d1d6      	bne.n	8001940 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f06f 0212 	mvn.w	r2, #18
 800199a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a0:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d123      	bne.n	80019fe <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d11f      	bne.n	80019fe <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019c4:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d006      	beq.n	80019da <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d111      	bne.n	80019fe <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d105      	bne.n	80019fe <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019f6:	f043 0201 	orr.w	r2, r3, #1
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80019fe:	2300      	movs	r3, #0
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	3710      	adds	r7, #16
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bd80      	pop	{r7, pc}

08001a08 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	370c      	adds	r7, #12
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a20:	4770      	bx	lr
	...

08001a24 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b085      	sub	sp, #20
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
 8001a2c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a38:	2b01      	cmp	r3, #1
 8001a3a:	d101      	bne.n	8001a40 <HAL_ADC_ConfigChannel+0x1c>
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	e105      	b.n	8001c4c <HAL_ADC_ConfigChannel+0x228>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	2201      	movs	r2, #1
 8001a44:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b09      	cmp	r3, #9
 8001a4e:	d925      	bls.n	8001a9c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68d9      	ldr	r1, [r3, #12]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	b29b      	uxth	r3, r3
 8001a5c:	461a      	mov	r2, r3
 8001a5e:	4613      	mov	r3, r2
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	4413      	add	r3, r2
 8001a64:	3b1e      	subs	r3, #30
 8001a66:	2207      	movs	r2, #7
 8001a68:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6c:	43da      	mvns	r2, r3
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	400a      	ands	r2, r1
 8001a74:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	68d9      	ldr	r1, [r3, #12]
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	689a      	ldr	r2, [r3, #8]
 8001a80:	683b      	ldr	r3, [r7, #0]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	b29b      	uxth	r3, r3
 8001a86:	4618      	mov	r0, r3
 8001a88:	4603      	mov	r3, r0
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	4403      	add	r3, r0
 8001a8e:	3b1e      	subs	r3, #30
 8001a90:	409a      	lsls	r2, r3
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	430a      	orrs	r2, r1
 8001a98:	60da      	str	r2, [r3, #12]
 8001a9a:	e022      	b.n	8001ae2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6919      	ldr	r1, [r3, #16]
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	b29b      	uxth	r3, r3
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab6:	43da      	mvns	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	400a      	ands	r2, r1
 8001abe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	6919      	ldr	r1, [r3, #16]
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	689a      	ldr	r2, [r3, #8]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	b29b      	uxth	r3, r3
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	4403      	add	r3, r0
 8001ad8:	409a      	lsls	r2, r3
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	430a      	orrs	r2, r1
 8001ae0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b06      	cmp	r3, #6
 8001ae8:	d824      	bhi.n	8001b34 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685a      	ldr	r2, [r3, #4]
 8001af4:	4613      	mov	r3, r2
 8001af6:	009b      	lsls	r3, r3, #2
 8001af8:	4413      	add	r3, r2
 8001afa:	3b05      	subs	r3, #5
 8001afc:	221f      	movs	r2, #31
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43da      	mvns	r2, r3
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	400a      	ands	r2, r1
 8001b0a:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	4618      	mov	r0, r3
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685a      	ldr	r2, [r3, #4]
 8001b1e:	4613      	mov	r3, r2
 8001b20:	009b      	lsls	r3, r3, #2
 8001b22:	4413      	add	r3, r2
 8001b24:	3b05      	subs	r3, #5
 8001b26:	fa00 f203 	lsl.w	r2, r0, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	430a      	orrs	r2, r1
 8001b30:	635a      	str	r2, [r3, #52]	@ 0x34
 8001b32:	e04c      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001b34:	683b      	ldr	r3, [r7, #0]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b0c      	cmp	r3, #12
 8001b3a:	d824      	bhi.n	8001b86 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	685a      	ldr	r2, [r3, #4]
 8001b46:	4613      	mov	r3, r2
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	3b23      	subs	r3, #35	@ 0x23
 8001b4e:	221f      	movs	r2, #31
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43da      	mvns	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	400a      	ands	r2, r1
 8001b5c:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	b29b      	uxth	r3, r3
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	4613      	mov	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	4413      	add	r3, r2
 8001b76:	3b23      	subs	r3, #35	@ 0x23
 8001b78:	fa00 f203 	lsl.w	r2, r0, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	430a      	orrs	r2, r1
 8001b82:	631a      	str	r2, [r3, #48]	@ 0x30
 8001b84:	e023      	b.n	8001bce <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	3b41      	subs	r3, #65	@ 0x41
 8001b98:	221f      	movs	r2, #31
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	400a      	ands	r2, r1
 8001ba6:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	b29b      	uxth	r3, r3
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	4613      	mov	r3, r2
 8001bbc:	009b      	lsls	r3, r3, #2
 8001bbe:	4413      	add	r3, r2
 8001bc0:	3b41      	subs	r3, #65	@ 0x41
 8001bc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	430a      	orrs	r2, r1
 8001bcc:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001bce:	4b22      	ldr	r3, [pc, #136]	@ (8001c58 <HAL_ADC_ConfigChannel+0x234>)
 8001bd0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	4a21      	ldr	r2, [pc, #132]	@ (8001c5c <HAL_ADC_ConfigChannel+0x238>)
 8001bd8:	4293      	cmp	r3, r2
 8001bda:	d109      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x1cc>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b12      	cmp	r3, #18
 8001be2:	d105      	bne.n	8001bf0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a19      	ldr	r2, [pc, #100]	@ (8001c5c <HAL_ADC_ConfigChannel+0x238>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d123      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x21e>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	2b10      	cmp	r3, #16
 8001c00:	d003      	beq.n	8001c0a <HAL_ADC_ConfigChannel+0x1e6>
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	2b11      	cmp	r3, #17
 8001c08:	d11b      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	2b10      	cmp	r3, #16
 8001c1c:	d111      	bne.n	8001c42 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001c1e:	4b10      	ldr	r3, [pc, #64]	@ (8001c60 <HAL_ADC_ConfigChannel+0x23c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a10      	ldr	r2, [pc, #64]	@ (8001c64 <HAL_ADC_ConfigChannel+0x240>)
 8001c24:	fba2 2303 	umull	r2, r3, r2, r3
 8001c28:	0c9a      	lsrs	r2, r3, #18
 8001c2a:	4613      	mov	r3, r2
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	4413      	add	r3, r2
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c34:	e002      	b.n	8001c3c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001c3c:	68bb      	ldr	r3, [r7, #8]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d1f9      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2200      	movs	r2, #0
 8001c46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	40012300 	.word	0x40012300
 8001c5c:	40012000 	.word	0x40012000
 8001c60:	20000080 	.word	0x20000080
 8001c64:	431bde83 	.word	0x431bde83

08001c68 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b085      	sub	sp, #20
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001c70:	4b79      	ldr	r3, [pc, #484]	@ (8001e58 <ADC_Init+0x1f0>)
 8001c72:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	685a      	ldr	r2, [r3, #4]
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001c9c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	6859      	ldr	r1, [r3, #4]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	691b      	ldr	r3, [r3, #16]
 8001ca8:	021a      	lsls	r2, r3, #8
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	430a      	orrs	r2, r1
 8001cb0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685a      	ldr	r2, [r3, #4]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001cc0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	6859      	ldr	r1, [r3, #4]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689a      	ldr	r2, [r3, #8]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	689a      	ldr	r2, [r3, #8]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001ce2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6899      	ldr	r1, [r3, #8]
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	68da      	ldr	r2, [r3, #12]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cfa:	4a58      	ldr	r2, [pc, #352]	@ (8001e5c <ADC_Init+0x1f4>)
 8001cfc:	4293      	cmp	r3, r2
 8001cfe:	d022      	beq.n	8001d46 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689a      	ldr	r2, [r3, #8]
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d0e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	6899      	ldr	r1, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	689a      	ldr	r2, [r3, #8]
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d30:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6899      	ldr	r1, [r3, #8]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	430a      	orrs	r2, r1
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	e00f      	b.n	8001d66 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	689a      	ldr	r2, [r3, #8]
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001d54:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001d64:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	689a      	ldr	r2, [r3, #8]
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f022 0202 	bic.w	r2, r2, #2
 8001d74:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	6899      	ldr	r1, [r3, #8]
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	7e1b      	ldrb	r3, [r3, #24]
 8001d80:	005a      	lsls	r2, r3, #1
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	430a      	orrs	r2, r1
 8001d88:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d01b      	beq.n	8001dcc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	685a      	ldr	r2, [r3, #4]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001da2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	685a      	ldr	r2, [r3, #4]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8001db2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	6859      	ldr	r1, [r3, #4]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	035a      	lsls	r2, r3, #13
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	430a      	orrs	r2, r1
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	e007      	b.n	8001ddc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001dda:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8001dea:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	69db      	ldr	r3, [r3, #28]
 8001df6:	3b01      	subs	r3, #1
 8001df8:	051a      	lsls	r2, r3, #20
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	430a      	orrs	r2, r1
 8001e00:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	689a      	ldr	r2, [r3, #8]
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001e10:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6899      	ldr	r1, [r3, #8]
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001e1e:	025a      	lsls	r2, r3, #9
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	430a      	orrs	r2, r1
 8001e26:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	689a      	ldr	r2, [r3, #8]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	6899      	ldr	r1, [r3, #8]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	029a      	lsls	r2, r3, #10
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	430a      	orrs	r2, r1
 8001e4a:	609a      	str	r2, [r3, #8]
}
 8001e4c:	bf00      	nop
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	40012300 	.word	0x40012300
 8001e5c:	0f000001 	.word	0x0f000001

08001e60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e70:	4b0c      	ldr	r3, [pc, #48]	@ (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e84:	68bb      	ldr	r3, [r7, #8]
 8001e86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e88:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001e8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001e90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e92:	4a04      	ldr	r2, [pc, #16]	@ (8001ea4 <__NVIC_SetPriorityGrouping+0x44>)
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	60d3      	str	r3, [r2, #12]
}
 8001e98:	bf00      	nop
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	e000ed00 	.word	0xe000ed00

08001ea8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001eac:	4b04      	ldr	r3, [pc, #16]	@ (8001ec0 <__NVIC_GetPriorityGrouping+0x18>)
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	0a1b      	lsrs	r3, r3, #8
 8001eb2:	f003 0307 	and.w	r3, r3, #7
}
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	46bd      	mov	sp, r7
 8001eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ebe:	4770      	bx	lr
 8001ec0:	e000ed00 	.word	0xe000ed00

08001ec4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b083      	sub	sp, #12
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	4603      	mov	r3, r0
 8001ecc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ece:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	db0b      	blt.n	8001eee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ed6:	79fb      	ldrb	r3, [r7, #7]
 8001ed8:	f003 021f 	and.w	r2, r3, #31
 8001edc:	4907      	ldr	r1, [pc, #28]	@ (8001efc <__NVIC_EnableIRQ+0x38>)
 8001ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee2:	095b      	lsrs	r3, r3, #5
 8001ee4:	2001      	movs	r0, #1
 8001ee6:	fa00 f202 	lsl.w	r2, r0, r2
 8001eea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001eee:	bf00      	nop
 8001ef0:	370c      	adds	r7, #12
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	e000e100 	.word	0xe000e100

08001f00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	6039      	str	r1, [r7, #0]
 8001f0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	db0a      	blt.n	8001f2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	b2da      	uxtb	r2, r3
 8001f18:	490c      	ldr	r1, [pc, #48]	@ (8001f4c <__NVIC_SetPriority+0x4c>)
 8001f1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f1e:	0112      	lsls	r2, r2, #4
 8001f20:	b2d2      	uxtb	r2, r2
 8001f22:	440b      	add	r3, r1
 8001f24:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f28:	e00a      	b.n	8001f40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	4908      	ldr	r1, [pc, #32]	@ (8001f50 <__NVIC_SetPriority+0x50>)
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	3b04      	subs	r3, #4
 8001f38:	0112      	lsls	r2, r2, #4
 8001f3a:	b2d2      	uxtb	r2, r2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	761a      	strb	r2, [r3, #24]
}
 8001f40:	bf00      	nop
 8001f42:	370c      	adds	r7, #12
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	e000e100 	.word	0xe000e100
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b089      	sub	sp, #36	@ 0x24
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f003 0307 	and.w	r3, r3, #7
 8001f66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001f68:	69fb      	ldr	r3, [r7, #28]
 8001f6a:	f1c3 0307 	rsb	r3, r3, #7
 8001f6e:	2b04      	cmp	r3, #4
 8001f70:	bf28      	it	cs
 8001f72:	2304      	movcs	r3, #4
 8001f74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	3304      	adds	r3, #4
 8001f7a:	2b06      	cmp	r3, #6
 8001f7c:	d902      	bls.n	8001f84 <NVIC_EncodePriority+0x30>
 8001f7e:	69fb      	ldr	r3, [r7, #28]
 8001f80:	3b03      	subs	r3, #3
 8001f82:	e000      	b.n	8001f86 <NVIC_EncodePriority+0x32>
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f88:	f04f 32ff 	mov.w	r2, #4294967295
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f92:	43da      	mvns	r2, r3
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	401a      	ands	r2, r3
 8001f98:	697b      	ldr	r3, [r7, #20]
 8001f9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001fa0:	697b      	ldr	r3, [r7, #20]
 8001fa2:	fa01 f303 	lsl.w	r3, r1, r3
 8001fa6:	43d9      	mvns	r1, r3
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fac:	4313      	orrs	r3, r2
         );
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3724      	adds	r7, #36	@ 0x24
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
	...

08001fbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	3b01      	subs	r3, #1
 8001fc8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001fcc:	d301      	bcc.n	8001fd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e00f      	b.n	8001ff2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	@ (8001ffc <SysTick_Config+0x40>)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	3b01      	subs	r3, #1
 8001fd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001fda:	210f      	movs	r1, #15
 8001fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001fe0:	f7ff ff8e 	bl	8001f00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001fe4:	4b05      	ldr	r3, [pc, #20]	@ (8001ffc <SysTick_Config+0x40>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001fea:	4b04      	ldr	r3, [pc, #16]	@ (8001ffc <SysTick_Config+0x40>)
 8001fec:	2207      	movs	r2, #7
 8001fee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	e000e010 	.word	0xe000e010

08002000 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f7ff ff29 	bl	8001e60 <__NVIC_SetPriorityGrouping>
}
 800200e:	bf00      	nop
 8002010:	3708      	adds	r7, #8
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}

08002016 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002016:	b580      	push	{r7, lr}
 8002018:	b086      	sub	sp, #24
 800201a:	af00      	add	r7, sp, #0
 800201c:	4603      	mov	r3, r0
 800201e:	60b9      	str	r1, [r7, #8]
 8002020:	607a      	str	r2, [r7, #4]
 8002022:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002024:	2300      	movs	r3, #0
 8002026:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002028:	f7ff ff3e 	bl	8001ea8 <__NVIC_GetPriorityGrouping>
 800202c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800202e:	687a      	ldr	r2, [r7, #4]
 8002030:	68b9      	ldr	r1, [r7, #8]
 8002032:	6978      	ldr	r0, [r7, #20]
 8002034:	f7ff ff8e 	bl	8001f54 <NVIC_EncodePriority>
 8002038:	4602      	mov	r2, r0
 800203a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800203e:	4611      	mov	r1, r2
 8002040:	4618      	mov	r0, r3
 8002042:	f7ff ff5d 	bl	8001f00 <__NVIC_SetPriority>
}
 8002046:	bf00      	nop
 8002048:	3718      	adds	r7, #24
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	4603      	mov	r3, r0
 8002056:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002058:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff ff31 	bl	8001ec4 <__NVIC_EnableIRQ>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800206a:	b580      	push	{r7, lr}
 800206c:	b082      	sub	sp, #8
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff ffa2 	bl	8001fbc <SysTick_Config>
 8002078:	4603      	mov	r3, r0
}
 800207a:	4618      	mov	r0, r3
 800207c:	3708      	adds	r7, #8
 800207e:	46bd      	mov	sp, r7
 8002080:	bd80      	pop	{r7, pc}
	...

08002084 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002084:	b480      	push	{r7}
 8002086:	b089      	sub	sp, #36	@ 0x24
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
 800208c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002092:	2300      	movs	r3, #0
 8002094:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002096:	2300      	movs	r3, #0
 8002098:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800209a:	2300      	movs	r3, #0
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	e159      	b.n	8002354 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80020a0:	2201      	movs	r2, #1
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	fa02 f303 	lsl.w	r3, r2, r3
 80020a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	4013      	ands	r3, r2
 80020b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80020b4:	693a      	ldr	r2, [r7, #16]
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	429a      	cmp	r2, r3
 80020ba:	f040 8148 	bne.w	800234e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b01      	cmp	r3, #1
 80020c8:	d005      	beq.n	80020d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	685b      	ldr	r3, [r3, #4]
 80020ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80020d2:	2b02      	cmp	r3, #2
 80020d4:	d130      	bne.n	8002138 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020dc:	69fb      	ldr	r3, [r7, #28]
 80020de:	005b      	lsls	r3, r3, #1
 80020e0:	2203      	movs	r2, #3
 80020e2:	fa02 f303 	lsl.w	r3, r2, r3
 80020e6:	43db      	mvns	r3, r3
 80020e8:	69ba      	ldr	r2, [r7, #24]
 80020ea:	4013      	ands	r3, r2
 80020ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	fa02 f303 	lsl.w	r3, r2, r3
 80020fa:	69ba      	ldr	r2, [r7, #24]
 80020fc:	4313      	orrs	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	69ba      	ldr	r2, [r7, #24]
 8002104:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800210c:	2201      	movs	r2, #1
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	fa02 f303 	lsl.w	r3, r2, r3
 8002114:	43db      	mvns	r3, r3
 8002116:	69ba      	ldr	r2, [r7, #24]
 8002118:	4013      	ands	r3, r2
 800211a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	f003 0201 	and.w	r2, r3, #1
 8002126:	69fb      	ldr	r3, [r7, #28]
 8002128:	fa02 f303 	lsl.w	r3, r2, r3
 800212c:	69ba      	ldr	r2, [r7, #24]
 800212e:	4313      	orrs	r3, r2
 8002130:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	69ba      	ldr	r2, [r7, #24]
 8002136:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	f003 0303 	and.w	r3, r3, #3
 8002140:	2b03      	cmp	r3, #3
 8002142:	d017      	beq.n	8002174 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	68db      	ldr	r3, [r3, #12]
 8002148:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800214a:	69fb      	ldr	r3, [r7, #28]
 800214c:	005b      	lsls	r3, r3, #1
 800214e:	2203      	movs	r2, #3
 8002150:	fa02 f303 	lsl.w	r3, r2, r3
 8002154:	43db      	mvns	r3, r3
 8002156:	69ba      	ldr	r2, [r7, #24]
 8002158:	4013      	ands	r3, r2
 800215a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	689a      	ldr	r2, [r3, #8]
 8002160:	69fb      	ldr	r3, [r7, #28]
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	fa02 f303 	lsl.w	r3, r2, r3
 8002168:	69ba      	ldr	r2, [r7, #24]
 800216a:	4313      	orrs	r3, r2
 800216c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69ba      	ldr	r2, [r7, #24]
 8002172:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f003 0303 	and.w	r3, r3, #3
 800217c:	2b02      	cmp	r3, #2
 800217e:	d123      	bne.n	80021c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002180:	69fb      	ldr	r3, [r7, #28]
 8002182:	08da      	lsrs	r2, r3, #3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3208      	adds	r2, #8
 8002188:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800218c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f003 0307 	and.w	r3, r3, #7
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	220f      	movs	r2, #15
 8002198:	fa02 f303 	lsl.w	r3, r2, r3
 800219c:	43db      	mvns	r3, r3
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	4013      	ands	r3, r2
 80021a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	691a      	ldr	r2, [r3, #16]
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	69ba      	ldr	r2, [r7, #24]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	08da      	lsrs	r2, r3, #3
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	3208      	adds	r2, #8
 80021c2:	69b9      	ldr	r1, [r7, #24]
 80021c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80021ce:	69fb      	ldr	r3, [r7, #28]
 80021d0:	005b      	lsls	r3, r3, #1
 80021d2:	2203      	movs	r2, #3
 80021d4:	fa02 f303 	lsl.w	r3, r2, r3
 80021d8:	43db      	mvns	r3, r3
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	4013      	ands	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	685b      	ldr	r3, [r3, #4]
 80021e4:	f003 0203 	and.w	r2, r3, #3
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	005b      	lsls	r3, r3, #1
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	69ba      	ldr	r2, [r7, #24]
 80021fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 80a2 	beq.w	800234e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	60fb      	str	r3, [r7, #12]
 800220e:	4b57      	ldr	r3, [pc, #348]	@ (800236c <HAL_GPIO_Init+0x2e8>)
 8002210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002212:	4a56      	ldr	r2, [pc, #344]	@ (800236c <HAL_GPIO_Init+0x2e8>)
 8002214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002218:	6453      	str	r3, [r2, #68]	@ 0x44
 800221a:	4b54      	ldr	r3, [pc, #336]	@ (800236c <HAL_GPIO_Init+0x2e8>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002226:	4a52      	ldr	r2, [pc, #328]	@ (8002370 <HAL_GPIO_Init+0x2ec>)
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	089b      	lsrs	r3, r3, #2
 800222c:	3302      	adds	r3, #2
 800222e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	f003 0303 	and.w	r3, r3, #3
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	220f      	movs	r2, #15
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	4a49      	ldr	r2, [pc, #292]	@ (8002374 <HAL_GPIO_Init+0x2f0>)
 800224e:	4293      	cmp	r3, r2
 8002250:	d019      	beq.n	8002286 <HAL_GPIO_Init+0x202>
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4a48      	ldr	r2, [pc, #288]	@ (8002378 <HAL_GPIO_Init+0x2f4>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d013      	beq.n	8002282 <HAL_GPIO_Init+0x1fe>
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	4a47      	ldr	r2, [pc, #284]	@ (800237c <HAL_GPIO_Init+0x2f8>)
 800225e:	4293      	cmp	r3, r2
 8002260:	d00d      	beq.n	800227e <HAL_GPIO_Init+0x1fa>
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	4a46      	ldr	r2, [pc, #280]	@ (8002380 <HAL_GPIO_Init+0x2fc>)
 8002266:	4293      	cmp	r3, r2
 8002268:	d007      	beq.n	800227a <HAL_GPIO_Init+0x1f6>
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	4a45      	ldr	r2, [pc, #276]	@ (8002384 <HAL_GPIO_Init+0x300>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d101      	bne.n	8002276 <HAL_GPIO_Init+0x1f2>
 8002272:	2304      	movs	r3, #4
 8002274:	e008      	b.n	8002288 <HAL_GPIO_Init+0x204>
 8002276:	2307      	movs	r3, #7
 8002278:	e006      	b.n	8002288 <HAL_GPIO_Init+0x204>
 800227a:	2303      	movs	r3, #3
 800227c:	e004      	b.n	8002288 <HAL_GPIO_Init+0x204>
 800227e:	2302      	movs	r3, #2
 8002280:	e002      	b.n	8002288 <HAL_GPIO_Init+0x204>
 8002282:	2301      	movs	r3, #1
 8002284:	e000      	b.n	8002288 <HAL_GPIO_Init+0x204>
 8002286:	2300      	movs	r3, #0
 8002288:	69fa      	ldr	r2, [r7, #28]
 800228a:	f002 0203 	and.w	r2, r2, #3
 800228e:	0092      	lsls	r2, r2, #2
 8002290:	4093      	lsls	r3, r2
 8002292:	69ba      	ldr	r2, [r7, #24]
 8002294:	4313      	orrs	r3, r2
 8002296:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002298:	4935      	ldr	r1, [pc, #212]	@ (8002370 <HAL_GPIO_Init+0x2ec>)
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	089b      	lsrs	r3, r3, #2
 800229e:	3302      	adds	r3, #2
 80022a0:	69ba      	ldr	r2, [r7, #24]
 80022a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80022a6:	4b38      	ldr	r3, [pc, #224]	@ (8002388 <HAL_GPIO_Init+0x304>)
 80022a8:	689b      	ldr	r3, [r3, #8]
 80022aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	685b      	ldr	r3, [r3, #4]
 80022ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d003      	beq.n	80022ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80022c2:	69ba      	ldr	r2, [r7, #24]
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	4313      	orrs	r3, r2
 80022c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80022ca:	4a2f      	ldr	r2, [pc, #188]	@ (8002388 <HAL_GPIO_Init+0x304>)
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80022d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002388 <HAL_GPIO_Init+0x304>)
 80022d2:	68db      	ldr	r3, [r3, #12]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	43db      	mvns	r3, r3
 80022da:	69ba      	ldr	r2, [r7, #24]
 80022dc:	4013      	ands	r3, r2
 80022de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4313      	orrs	r3, r2
 80022f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80022f4:	4a24      	ldr	r2, [pc, #144]	@ (8002388 <HAL_GPIO_Init+0x304>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80022fa:	4b23      	ldr	r3, [pc, #140]	@ (8002388 <HAL_GPIO_Init+0x304>)
 80022fc:	685b      	ldr	r3, [r3, #4]
 80022fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	43db      	mvns	r3, r3
 8002304:	69ba      	ldr	r2, [r7, #24]
 8002306:	4013      	ands	r3, r2
 8002308:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d003      	beq.n	800231e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002316:	69ba      	ldr	r2, [r7, #24]
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	4313      	orrs	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800231e:	4a1a      	ldr	r2, [pc, #104]	@ (8002388 <HAL_GPIO_Init+0x304>)
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002324:	4b18      	ldr	r3, [pc, #96]	@ (8002388 <HAL_GPIO_Init+0x304>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	43db      	mvns	r3, r3
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	4013      	ands	r3, r2
 8002332:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d003      	beq.n	8002348 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	4313      	orrs	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002348:	4a0f      	ldr	r2, [pc, #60]	@ (8002388 <HAL_GPIO_Init+0x304>)
 800234a:	69bb      	ldr	r3, [r7, #24]
 800234c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	3301      	adds	r3, #1
 8002352:	61fb      	str	r3, [r7, #28]
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	2b0f      	cmp	r3, #15
 8002358:	f67f aea2 	bls.w	80020a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800235c:	bf00      	nop
 800235e:	bf00      	nop
 8002360:	3724      	adds	r7, #36	@ 0x24
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
 800236a:	bf00      	nop
 800236c:	40023800 	.word	0x40023800
 8002370:	40013800 	.word	0x40013800
 8002374:	40020000 	.word	0x40020000
 8002378:	40020400 	.word	0x40020400
 800237c:	40020800 	.word	0x40020800
 8002380:	40020c00 	.word	0x40020c00
 8002384:	40021000 	.word	0x40021000
 8002388:	40013c00 	.word	0x40013c00

0800238c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800238c:	b480      	push	{r7}
 800238e:	b085      	sub	sp, #20
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	460b      	mov	r3, r1
 8002396:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	691a      	ldr	r2, [r3, #16]
 800239c:	887b      	ldrh	r3, [r7, #2]
 800239e:	4013      	ands	r3, r2
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d002      	beq.n	80023aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023a4:	2301      	movs	r3, #1
 80023a6:	73fb      	strb	r3, [r7, #15]
 80023a8:	e001      	b.n	80023ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023aa:	2300      	movs	r3, #0
 80023ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80023ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3714      	adds	r7, #20
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d101      	bne.n	80023ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80023ca:	2301      	movs	r3, #1
 80023cc:	e12b      	b.n	8002626 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80023d4:	b2db      	uxtb	r3, r3
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d106      	bne.n	80023e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2200      	movs	r2, #0
 80023de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80023e2:	6878      	ldr	r0, [r7, #4]
 80023e4:	f7fe ff4a 	bl	800127c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	2224      	movs	r2, #36	@ 0x24
 80023ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	681a      	ldr	r2, [r3, #0]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 0201 	bic.w	r2, r2, #1
 80023fe:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800240e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800241e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002420:	f002 fabc 	bl	800499c <HAL_RCC_GetPCLK1Freq>
 8002424:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	4a81      	ldr	r2, [pc, #516]	@ (8002630 <HAL_I2C_Init+0x274>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d807      	bhi.n	8002440 <HAL_I2C_Init+0x84>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	4a80      	ldr	r2, [pc, #512]	@ (8002634 <HAL_I2C_Init+0x278>)
 8002434:	4293      	cmp	r3, r2
 8002436:	bf94      	ite	ls
 8002438:	2301      	movls	r3, #1
 800243a:	2300      	movhi	r3, #0
 800243c:	b2db      	uxtb	r3, r3
 800243e:	e006      	b.n	800244e <HAL_I2C_Init+0x92>
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	4a7d      	ldr	r2, [pc, #500]	@ (8002638 <HAL_I2C_Init+0x27c>)
 8002444:	4293      	cmp	r3, r2
 8002446:	bf94      	ite	ls
 8002448:	2301      	movls	r3, #1
 800244a:	2300      	movhi	r3, #0
 800244c:	b2db      	uxtb	r3, r3
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002452:	2301      	movs	r3, #1
 8002454:	e0e7      	b.n	8002626 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	4a78      	ldr	r2, [pc, #480]	@ (800263c <HAL_I2C_Init+0x280>)
 800245a:	fba2 2303 	umull	r2, r3, r2, r3
 800245e:	0c9b      	lsrs	r3, r3, #18
 8002460:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	68ba      	ldr	r2, [r7, #8]
 8002472:	430a      	orrs	r2, r1
 8002474:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	6a1b      	ldr	r3, [r3, #32]
 800247c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	4a6a      	ldr	r2, [pc, #424]	@ (8002630 <HAL_I2C_Init+0x274>)
 8002486:	4293      	cmp	r3, r2
 8002488:	d802      	bhi.n	8002490 <HAL_I2C_Init+0xd4>
 800248a:	68bb      	ldr	r3, [r7, #8]
 800248c:	3301      	adds	r3, #1
 800248e:	e009      	b.n	80024a4 <HAL_I2C_Init+0xe8>
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002496:	fb02 f303 	mul.w	r3, r2, r3
 800249a:	4a69      	ldr	r2, [pc, #420]	@ (8002640 <HAL_I2C_Init+0x284>)
 800249c:	fba2 2303 	umull	r2, r3, r2, r3
 80024a0:	099b      	lsrs	r3, r3, #6
 80024a2:	3301      	adds	r3, #1
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6812      	ldr	r2, [r2, #0]
 80024a8:	430b      	orrs	r3, r1
 80024aa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80024b6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	495c      	ldr	r1, [pc, #368]	@ (8002630 <HAL_I2C_Init+0x274>)
 80024c0:	428b      	cmp	r3, r1
 80024c2:	d819      	bhi.n	80024f8 <HAL_I2C_Init+0x13c>
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1e59      	subs	r1, r3, #1
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	685b      	ldr	r3, [r3, #4]
 80024cc:	005b      	lsls	r3, r3, #1
 80024ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80024d2:	1c59      	adds	r1, r3, #1
 80024d4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80024d8:	400b      	ands	r3, r1
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d00a      	beq.n	80024f4 <HAL_I2C_Init+0x138>
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	1e59      	subs	r1, r3, #1
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	005b      	lsls	r3, r3, #1
 80024e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80024ec:	3301      	adds	r3, #1
 80024ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80024f2:	e051      	b.n	8002598 <HAL_I2C_Init+0x1dc>
 80024f4:	2304      	movs	r3, #4
 80024f6:	e04f      	b.n	8002598 <HAL_I2C_Init+0x1dc>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d111      	bne.n	8002524 <HAL_I2C_Init+0x168>
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	1e58      	subs	r0, r3, #1
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	6859      	ldr	r1, [r3, #4]
 8002508:	460b      	mov	r3, r1
 800250a:	005b      	lsls	r3, r3, #1
 800250c:	440b      	add	r3, r1
 800250e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002512:	3301      	adds	r3, #1
 8002514:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002518:	2b00      	cmp	r3, #0
 800251a:	bf0c      	ite	eq
 800251c:	2301      	moveq	r3, #1
 800251e:	2300      	movne	r3, #0
 8002520:	b2db      	uxtb	r3, r3
 8002522:	e012      	b.n	800254a <HAL_I2C_Init+0x18e>
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	1e58      	subs	r0, r3, #1
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6859      	ldr	r1, [r3, #4]
 800252c:	460b      	mov	r3, r1
 800252e:	009b      	lsls	r3, r3, #2
 8002530:	440b      	add	r3, r1
 8002532:	0099      	lsls	r1, r3, #2
 8002534:	440b      	add	r3, r1
 8002536:	fbb0 f3f3 	udiv	r3, r0, r3
 800253a:	3301      	adds	r3, #1
 800253c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002540:	2b00      	cmp	r3, #0
 8002542:	bf0c      	ite	eq
 8002544:	2301      	moveq	r3, #1
 8002546:	2300      	movne	r3, #0
 8002548:	b2db      	uxtb	r3, r3
 800254a:	2b00      	cmp	r3, #0
 800254c:	d001      	beq.n	8002552 <HAL_I2C_Init+0x196>
 800254e:	2301      	movs	r3, #1
 8002550:	e022      	b.n	8002598 <HAL_I2C_Init+0x1dc>
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10e      	bne.n	8002578 <HAL_I2C_Init+0x1bc>
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	1e58      	subs	r0, r3, #1
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6859      	ldr	r1, [r3, #4]
 8002562:	460b      	mov	r3, r1
 8002564:	005b      	lsls	r3, r3, #1
 8002566:	440b      	add	r3, r1
 8002568:	fbb0 f3f3 	udiv	r3, r0, r3
 800256c:	3301      	adds	r3, #1
 800256e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002572:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002576:	e00f      	b.n	8002598 <HAL_I2C_Init+0x1dc>
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	1e58      	subs	r0, r3, #1
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6859      	ldr	r1, [r3, #4]
 8002580:	460b      	mov	r3, r1
 8002582:	009b      	lsls	r3, r3, #2
 8002584:	440b      	add	r3, r1
 8002586:	0099      	lsls	r1, r3, #2
 8002588:	440b      	add	r3, r1
 800258a:	fbb0 f3f3 	udiv	r3, r0, r3
 800258e:	3301      	adds	r3, #1
 8002590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002594:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8002598:	6879      	ldr	r1, [r7, #4]
 800259a:	6809      	ldr	r1, [r1, #0]
 800259c:	4313      	orrs	r3, r2
 800259e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69da      	ldr	r2, [r3, #28]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6a1b      	ldr	r3, [r3, #32]
 80025b2:	431a      	orrs	r2, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	430a      	orrs	r2, r1
 80025ba:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80025c6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6911      	ldr	r1, [r2, #16]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	68d2      	ldr	r2, [r2, #12]
 80025d2:	4311      	orrs	r1, r2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6812      	ldr	r2, [r2, #0]
 80025d8:	430b      	orrs	r3, r1
 80025da:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	68db      	ldr	r3, [r3, #12]
 80025e2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695a      	ldr	r2, [r3, #20]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	699b      	ldr	r3, [r3, #24]
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	430a      	orrs	r2, r1
 80025f6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	681a      	ldr	r2, [r3, #0]
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f042 0201 	orr.w	r2, r2, #1
 8002606:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2200      	movs	r2, #0
 800260c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2220      	movs	r2, #32
 8002612:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	2200      	movs	r2, #0
 800261a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2200      	movs	r2, #0
 8002620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002624:	2300      	movs	r3, #0
}
 8002626:	4618      	mov	r0, r3
 8002628:	3710      	adds	r7, #16
 800262a:	46bd      	mov	sp, r7
 800262c:	bd80      	pop	{r7, pc}
 800262e:	bf00      	nop
 8002630:	000186a0 	.word	0x000186a0
 8002634:	001e847f 	.word	0x001e847f
 8002638:	003d08ff 	.word	0x003d08ff
 800263c:	431bde83 	.word	0x431bde83
 8002640:	10624dd3 	.word	0x10624dd3

08002644 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b088      	sub	sp, #32
 8002648:	af02      	add	r7, sp, #8
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	4608      	mov	r0, r1
 800264e:	4611      	mov	r1, r2
 8002650:	461a      	mov	r2, r3
 8002652:	4603      	mov	r3, r0
 8002654:	817b      	strh	r3, [r7, #10]
 8002656:	460b      	mov	r3, r1
 8002658:	813b      	strh	r3, [r7, #8]
 800265a:	4613      	mov	r3, r2
 800265c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800265e:	f7fe ffed 	bl	800163c <HAL_GetTick>
 8002662:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800266a:	b2db      	uxtb	r3, r3
 800266c:	2b20      	cmp	r3, #32
 800266e:	f040 80d9 	bne.w	8002824 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002672:	697b      	ldr	r3, [r7, #20]
 8002674:	9300      	str	r3, [sp, #0]
 8002676:	2319      	movs	r3, #25
 8002678:	2201      	movs	r2, #1
 800267a:	496d      	ldr	r1, [pc, #436]	@ (8002830 <HAL_I2C_Mem_Write+0x1ec>)
 800267c:	68f8      	ldr	r0, [r7, #12]
 800267e:	f000 f971 	bl	8002964 <I2C_WaitOnFlagUntilTimeout>
 8002682:	4603      	mov	r3, r0
 8002684:	2b00      	cmp	r3, #0
 8002686:	d001      	beq.n	800268c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002688:	2302      	movs	r3, #2
 800268a:	e0cc      	b.n	8002826 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_I2C_Mem_Write+0x56>
 8002696:	2302      	movs	r3, #2
 8002698:	e0c5      	b.n	8002826 <HAL_I2C_Mem_Write+0x1e2>
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f003 0301 	and.w	r3, r3, #1
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d007      	beq.n	80026c0 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681a      	ldr	r2, [r3, #0]
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f042 0201 	orr.w	r2, r2, #1
 80026be:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026ce:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2221      	movs	r2, #33	@ 0x21
 80026d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2240      	movs	r2, #64	@ 0x40
 80026dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	6a3a      	ldr	r2, [r7, #32]
 80026ea:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80026f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026f6:	b29a      	uxth	r2, r3
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4a4d      	ldr	r2, [pc, #308]	@ (8002834 <HAL_I2C_Mem_Write+0x1f0>)
 8002700:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002702:	88f8      	ldrh	r0, [r7, #6]
 8002704:	893a      	ldrh	r2, [r7, #8]
 8002706:	8979      	ldrh	r1, [r7, #10]
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	9301      	str	r3, [sp, #4]
 800270c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800270e:	9300      	str	r3, [sp, #0]
 8002710:	4603      	mov	r3, r0
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f890 	bl	8002838 <I2C_RequestMemoryWrite>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d052      	beq.n	80027c4 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e081      	b.n	8002826 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002722:	697a      	ldr	r2, [r7, #20]
 8002724:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002726:	68f8      	ldr	r0, [r7, #12]
 8002728:	f000 f9f2 	bl	8002b10 <I2C_WaitOnTXEFlagUntilTimeout>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d00d      	beq.n	800274e <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002736:	2b04      	cmp	r3, #4
 8002738:	d107      	bne.n	800274a <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002748:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e06b      	b.n	8002826 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002752:	781a      	ldrb	r2, [r3, #0]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002768:	3b01      	subs	r3, #1
 800276a:	b29a      	uxth	r2, r3
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002774:	b29b      	uxth	r3, r3
 8002776:	3b01      	subs	r3, #1
 8002778:	b29a      	uxth	r2, r3
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	695b      	ldr	r3, [r3, #20]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b04      	cmp	r3, #4
 800278a:	d11b      	bne.n	80027c4 <HAL_I2C_Mem_Write+0x180>
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002790:	2b00      	cmp	r3, #0
 8002792:	d017      	beq.n	80027c4 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002798:	781a      	ldrb	r2, [r3, #0]
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027a4:	1c5a      	adds	r2, r3, #1
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027ae:	3b01      	subs	r3, #1
 80027b0:	b29a      	uxth	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	3b01      	subs	r3, #1
 80027be:	b29a      	uxth	r2, r3
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d1aa      	bne.n	8002722 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027cc:	697a      	ldr	r2, [r7, #20]
 80027ce:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f000 f9de 	bl	8002b92 <I2C_WaitOnBTFFlagUntilTimeout>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d00d      	beq.n	80027f8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e0:	2b04      	cmp	r3, #4
 80027e2:	d107      	bne.n	80027f4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	681a      	ldr	r2, [r3, #0]
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027f2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027f4:	2301      	movs	r3, #1
 80027f6:	e016      	b.n	8002826 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681a      	ldr	r2, [r3, #0]
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002806:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2220      	movs	r2, #32
 800280c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002820:	2300      	movs	r3, #0
 8002822:	e000      	b.n	8002826 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8002824:	2302      	movs	r3, #2
  }
}
 8002826:	4618      	mov	r0, r3
 8002828:	3718      	adds	r7, #24
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	00100002 	.word	0x00100002
 8002834:	ffff0000 	.word	0xffff0000

08002838 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	b088      	sub	sp, #32
 800283c:	af02      	add	r7, sp, #8
 800283e:	60f8      	str	r0, [r7, #12]
 8002840:	4608      	mov	r0, r1
 8002842:	4611      	mov	r1, r2
 8002844:	461a      	mov	r2, r3
 8002846:	4603      	mov	r3, r0
 8002848:	817b      	strh	r3, [r7, #10]
 800284a:	460b      	mov	r3, r1
 800284c:	813b      	strh	r3, [r7, #8]
 800284e:	4613      	mov	r3, r2
 8002850:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	681a      	ldr	r2, [r3, #0]
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002860:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002864:	9300      	str	r3, [sp, #0]
 8002866:	6a3b      	ldr	r3, [r7, #32]
 8002868:	2200      	movs	r2, #0
 800286a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800286e:	68f8      	ldr	r0, [r7, #12]
 8002870:	f000 f878 	bl	8002964 <I2C_WaitOnFlagUntilTimeout>
 8002874:	4603      	mov	r3, r0
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00d      	beq.n	8002896 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002884:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002888:	d103      	bne.n	8002892 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002890:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002892:	2303      	movs	r3, #3
 8002894:	e05f      	b.n	8002956 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002896:	897b      	ldrh	r3, [r7, #10]
 8002898:	b2db      	uxtb	r3, r3
 800289a:	461a      	mov	r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80028a4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80028a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a8:	6a3a      	ldr	r2, [r7, #32]
 80028aa:	492d      	ldr	r1, [pc, #180]	@ (8002960 <I2C_RequestMemoryWrite+0x128>)
 80028ac:	68f8      	ldr	r0, [r7, #12]
 80028ae:	f000 f8b0 	bl	8002a12 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d001      	beq.n	80028bc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e04c      	b.n	8002956 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80028bc:	2300      	movs	r3, #0
 80028be:	617b      	str	r3, [r7, #20]
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	695b      	ldr	r3, [r3, #20]
 80028c6:	617b      	str	r3, [r7, #20]
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	699b      	ldr	r3, [r3, #24]
 80028ce:	617b      	str	r3, [r7, #20]
 80028d0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80028d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80028d4:	6a39      	ldr	r1, [r7, #32]
 80028d6:	68f8      	ldr	r0, [r7, #12]
 80028d8:	f000 f91a 	bl	8002b10 <I2C_WaitOnTXEFlagUntilTimeout>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d00d      	beq.n	80028fe <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d107      	bne.n	80028fa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80028f8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80028fa:	2301      	movs	r3, #1
 80028fc:	e02b      	b.n	8002956 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80028fe:	88fb      	ldrh	r3, [r7, #6]
 8002900:	2b01      	cmp	r3, #1
 8002902:	d105      	bne.n	8002910 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8002904:	893b      	ldrh	r3, [r7, #8]
 8002906:	b2da      	uxtb	r2, r3
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	611a      	str	r2, [r3, #16]
 800290e:	e021      	b.n	8002954 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8002910:	893b      	ldrh	r3, [r7, #8]
 8002912:	0a1b      	lsrs	r3, r3, #8
 8002914:	b29b      	uxth	r3, r3
 8002916:	b2da      	uxtb	r2, r3
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800291e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002920:	6a39      	ldr	r1, [r7, #32]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	f000 f8f4 	bl	8002b10 <I2C_WaitOnTXEFlagUntilTimeout>
 8002928:	4603      	mov	r3, r0
 800292a:	2b00      	cmp	r3, #0
 800292c:	d00d      	beq.n	800294a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002932:	2b04      	cmp	r3, #4
 8002934:	d107      	bne.n	8002946 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681a      	ldr	r2, [r3, #0]
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002944:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8002946:	2301      	movs	r3, #1
 8002948:	e005      	b.n	8002956 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800294a:	893b      	ldrh	r3, [r7, #8]
 800294c:	b2da      	uxtb	r2, r3
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	00010002 	.word	0x00010002

08002964 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b084      	sub	sp, #16
 8002968:	af00      	add	r7, sp, #0
 800296a:	60f8      	str	r0, [r7, #12]
 800296c:	60b9      	str	r1, [r7, #8]
 800296e:	603b      	str	r3, [r7, #0]
 8002970:	4613      	mov	r3, r2
 8002972:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002974:	e025      	b.n	80029c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002976:	683b      	ldr	r3, [r7, #0]
 8002978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297c:	d021      	beq.n	80029c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800297e:	f7fe fe5d 	bl	800163c <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	683a      	ldr	r2, [r7, #0]
 800298a:	429a      	cmp	r2, r3
 800298c:	d302      	bcc.n	8002994 <I2C_WaitOnFlagUntilTimeout+0x30>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d116      	bne.n	80029c2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	2200      	movs	r2, #0
 8002998:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	2220      	movs	r2, #32
 800299e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029ae:	f043 0220 	orr.w	r2, r3, #32
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	2200      	movs	r2, #0
 80029ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80029be:	2301      	movs	r3, #1
 80029c0:	e023      	b.n	8002a0a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	0c1b      	lsrs	r3, r3, #16
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	d10d      	bne.n	80029e8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	695b      	ldr	r3, [r3, #20]
 80029d2:	43da      	mvns	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	4013      	ands	r3, r2
 80029d8:	b29b      	uxth	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	bf0c      	ite	eq
 80029de:	2301      	moveq	r3, #1
 80029e0:	2300      	movne	r3, #0
 80029e2:	b2db      	uxtb	r3, r3
 80029e4:	461a      	mov	r2, r3
 80029e6:	e00c      	b.n	8002a02 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	699b      	ldr	r3, [r3, #24]
 80029ee:	43da      	mvns	r2, r3
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	4013      	ands	r3, r2
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	bf0c      	ite	eq
 80029fa:	2301      	moveq	r3, #1
 80029fc:	2300      	movne	r3, #0
 80029fe:	b2db      	uxtb	r3, r3
 8002a00:	461a      	mov	r2, r3
 8002a02:	79fb      	ldrb	r3, [r7, #7]
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d0b6      	beq.n	8002976 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a08:	2300      	movs	r3, #0
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a12:	b580      	push	{r7, lr}
 8002a14:	b084      	sub	sp, #16
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	60f8      	str	r0, [r7, #12]
 8002a1a:	60b9      	str	r1, [r7, #8]
 8002a1c:	607a      	str	r2, [r7, #4]
 8002a1e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a20:	e051      	b.n	8002ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	695b      	ldr	r3, [r3, #20]
 8002a28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a30:	d123      	bne.n	8002a7a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	681a      	ldr	r2, [r3, #0]
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a40:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002a4a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2220      	movs	r2, #32
 8002a56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	f043 0204 	orr.w	r2, r3, #4
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8002a76:	2301      	movs	r3, #1
 8002a78:	e046      	b.n	8002b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a80:	d021      	beq.n	8002ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a82:	f7fe fddb 	bl	800163c <HAL_GetTick>
 8002a86:	4602      	mov	r2, r0
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	1ad3      	subs	r3, r2, r3
 8002a8c:	687a      	ldr	r2, [r7, #4]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d302      	bcc.n	8002a98 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d116      	bne.n	8002ac6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2220      	movs	r2, #32
 8002aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ab2:	f043 0220 	orr.w	r2, r3, #32
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e020      	b.n	8002b08 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002ac6:	68bb      	ldr	r3, [r7, #8]
 8002ac8:	0c1b      	lsrs	r3, r3, #16
 8002aca:	b2db      	uxtb	r3, r3
 8002acc:	2b01      	cmp	r3, #1
 8002ace:	d10c      	bne.n	8002aea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	695b      	ldr	r3, [r3, #20]
 8002ad6:	43da      	mvns	r2, r3
 8002ad8:	68bb      	ldr	r3, [r7, #8]
 8002ada:	4013      	ands	r3, r2
 8002adc:	b29b      	uxth	r3, r3
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	bf14      	ite	ne
 8002ae2:	2301      	movne	r3, #1
 8002ae4:	2300      	moveq	r3, #0
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	e00b      	b.n	8002b02 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	43da      	mvns	r2, r3
 8002af2:	68bb      	ldr	r3, [r7, #8]
 8002af4:	4013      	ands	r3, r2
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	bf14      	ite	ne
 8002afc:	2301      	movne	r3, #1
 8002afe:	2300      	moveq	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d18d      	bne.n	8002a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b06:	2300      	movs	r3, #0
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	3710      	adds	r7, #16
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}

08002b10 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b084      	sub	sp, #16
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	60f8      	str	r0, [r7, #12]
 8002b18:	60b9      	str	r1, [r7, #8]
 8002b1a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b1c:	e02d      	b.n	8002b7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b1e:	68f8      	ldr	r0, [r7, #12]
 8002b20:	f000 f878 	bl	8002c14 <I2C_IsAcknowledgeFailed>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e02d      	b.n	8002b8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002b2e:	68bb      	ldr	r3, [r7, #8]
 8002b30:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b34:	d021      	beq.n	8002b7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b36:	f7fe fd81 	bl	800163c <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	68ba      	ldr	r2, [r7, #8]
 8002b42:	429a      	cmp	r2, r3
 8002b44:	d302      	bcc.n	8002b4c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d116      	bne.n	8002b7a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	2200      	movs	r2, #0
 8002b50:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	2220      	movs	r2, #32
 8002b56:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b66:	f043 0220 	orr.w	r2, r3, #32
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	2200      	movs	r2, #0
 8002b72:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002b76:	2301      	movs	r3, #1
 8002b78:	e007      	b.n	8002b8a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	695b      	ldr	r3, [r3, #20]
 8002b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002b84:	2b80      	cmp	r3, #128	@ 0x80
 8002b86:	d1ca      	bne.n	8002b1e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}

08002b92 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b92:	b580      	push	{r7, lr}
 8002b94:	b084      	sub	sp, #16
 8002b96:	af00      	add	r7, sp, #0
 8002b98:	60f8      	str	r0, [r7, #12]
 8002b9a:	60b9      	str	r1, [r7, #8]
 8002b9c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002b9e:	e02d      	b.n	8002bfc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002ba0:	68f8      	ldr	r0, [r7, #12]
 8002ba2:	f000 f837 	bl	8002c14 <I2C_IsAcknowledgeFailed>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d001      	beq.n	8002bb0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	e02d      	b.n	8002c0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb0:	68bb      	ldr	r3, [r7, #8]
 8002bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bb6:	d021      	beq.n	8002bfc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb8:	f7fe fd40 	bl	800163c <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	68ba      	ldr	r2, [r7, #8]
 8002bc4:	429a      	cmp	r2, r3
 8002bc6:	d302      	bcc.n	8002bce <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d116      	bne.n	8002bfc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2200      	movs	r2, #0
 8002bd2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002be8:	f043 0220 	orr.w	r2, r3, #32
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e007      	b.n	8002c0c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	695b      	ldr	r3, [r3, #20]
 8002c02:	f003 0304 	and.w	r3, r3, #4
 8002c06:	2b04      	cmp	r3, #4
 8002c08:	d1ca      	bne.n	8002ba0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
}
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	3710      	adds	r7, #16
 8002c10:	46bd      	mov	sp, r7
 8002c12:	bd80      	pop	{r7, pc}

08002c14 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	695b      	ldr	r3, [r3, #20]
 8002c22:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c26:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c2a:	d11b      	bne.n	8002c64 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002c34:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2200      	movs	r2, #0
 8002c3a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2220      	movs	r2, #32
 8002c40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	2200      	movs	r2, #0
 8002c48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c50:	f043 0204 	orr.w	r2, r3, #4
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002c64:	2300      	movs	r3, #0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr

08002c72 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c72:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c74:	b08f      	sub	sp, #60	@ 0x3c
 8002c76:	af0a      	add	r7, sp, #40	@ 0x28
 8002c78:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c80:	2301      	movs	r3, #1
 8002c82:	e10f      	b.n	8002ea4 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8002c90:	b2db      	uxtb	r3, r3
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d106      	bne.n	8002ca4 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f005 fd4e 	bl	8008740 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	2203      	movs	r2, #3
 8002ca8:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d102      	bne.n	8002cbe <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2200      	movs	r2, #0
 8002cbc:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f002 f9db 	bl	800507e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	603b      	str	r3, [r7, #0]
 8002cce:	687e      	ldr	r6, [r7, #4]
 8002cd0:	466d      	mov	r5, sp
 8002cd2:	f106 0410 	add.w	r4, r6, #16
 8002cd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002cdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002cde:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ce2:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ce6:	1d33      	adds	r3, r6, #4
 8002ce8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002cea:	6838      	ldr	r0, [r7, #0]
 8002cec:	f002 f8b2 	bl	8004e54 <USB_CoreInit>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d005      	beq.n	8002d02 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2202      	movs	r2, #2
 8002cfa:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e0d0      	b.n	8002ea4 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	2100      	movs	r1, #0
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f002 f9c9 	bl	80050a0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d0e:	2300      	movs	r3, #0
 8002d10:	73fb      	strb	r3, [r7, #15]
 8002d12:	e04a      	b.n	8002daa <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002d14:	7bfa      	ldrb	r2, [r7, #15]
 8002d16:	6879      	ldr	r1, [r7, #4]
 8002d18:	4613      	mov	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	333d      	adds	r3, #61	@ 0x3d
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002d28:	7bfa      	ldrb	r2, [r7, #15]
 8002d2a:	6879      	ldr	r1, [r7, #4]
 8002d2c:	4613      	mov	r3, r2
 8002d2e:	00db      	lsls	r3, r3, #3
 8002d30:	4413      	add	r3, r2
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	440b      	add	r3, r1
 8002d36:	333c      	adds	r3, #60	@ 0x3c
 8002d38:	7bfa      	ldrb	r2, [r7, #15]
 8002d3a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002d3c:	7bfa      	ldrb	r2, [r7, #15]
 8002d3e:	7bfb      	ldrb	r3, [r7, #15]
 8002d40:	b298      	uxth	r0, r3
 8002d42:	6879      	ldr	r1, [r7, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	00db      	lsls	r3, r3, #3
 8002d48:	4413      	add	r3, r2
 8002d4a:	009b      	lsls	r3, r3, #2
 8002d4c:	440b      	add	r3, r1
 8002d4e:	3344      	adds	r3, #68	@ 0x44
 8002d50:	4602      	mov	r2, r0
 8002d52:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d54:	7bfa      	ldrb	r2, [r7, #15]
 8002d56:	6879      	ldr	r1, [r7, #4]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	4413      	add	r3, r2
 8002d5e:	009b      	lsls	r3, r3, #2
 8002d60:	440b      	add	r3, r1
 8002d62:	3340      	adds	r3, #64	@ 0x40
 8002d64:	2200      	movs	r2, #0
 8002d66:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d68:	7bfa      	ldrb	r2, [r7, #15]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	4413      	add	r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	3348      	adds	r3, #72	@ 0x48
 8002d78:	2200      	movs	r2, #0
 8002d7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d7c:	7bfa      	ldrb	r2, [r7, #15]
 8002d7e:	6879      	ldr	r1, [r7, #4]
 8002d80:	4613      	mov	r3, r2
 8002d82:	00db      	lsls	r3, r3, #3
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	334c      	adds	r3, #76	@ 0x4c
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d90:	7bfa      	ldrb	r2, [r7, #15]
 8002d92:	6879      	ldr	r1, [r7, #4]
 8002d94:	4613      	mov	r3, r2
 8002d96:	00db      	lsls	r3, r3, #3
 8002d98:	4413      	add	r3, r2
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	440b      	add	r3, r1
 8002d9e:	3354      	adds	r3, #84	@ 0x54
 8002da0:	2200      	movs	r2, #0
 8002da2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002da4:	7bfb      	ldrb	r3, [r7, #15]
 8002da6:	3301      	adds	r3, #1
 8002da8:	73fb      	strb	r3, [r7, #15]
 8002daa:	7bfa      	ldrb	r2, [r7, #15]
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	429a      	cmp	r2, r3
 8002db2:	d3af      	bcc.n	8002d14 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002db4:	2300      	movs	r3, #0
 8002db6:	73fb      	strb	r3, [r7, #15]
 8002db8:	e044      	b.n	8002e44 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002dba:	7bfa      	ldrb	r2, [r7, #15]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002dd0:	7bfa      	ldrb	r2, [r7, #15]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	4413      	add	r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8002de2:	7bfa      	ldrb	r2, [r7, #15]
 8002de4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002de6:	7bfa      	ldrb	r2, [r7, #15]
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8002df8:	2200      	movs	r2, #0
 8002dfa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002dfc:	7bfa      	ldrb	r2, [r7, #15]
 8002dfe:	6879      	ldr	r1, [r7, #4]
 8002e00:	4613      	mov	r3, r2
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	4413      	add	r3, r2
 8002e06:	009b      	lsls	r3, r3, #2
 8002e08:	440b      	add	r3, r1
 8002e0a:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8002e0e:	2200      	movs	r2, #0
 8002e10:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002e12:	7bfa      	ldrb	r2, [r7, #15]
 8002e14:	6879      	ldr	r1, [r7, #4]
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8002e24:	2200      	movs	r2, #0
 8002e26:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002e28:	7bfa      	ldrb	r2, [r7, #15]
 8002e2a:	6879      	ldr	r1, [r7, #4]
 8002e2c:	4613      	mov	r3, r2
 8002e2e:	00db      	lsls	r3, r3, #3
 8002e30:	4413      	add	r3, r2
 8002e32:	009b      	lsls	r3, r3, #2
 8002e34:	440b      	add	r3, r1
 8002e36:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e3e:	7bfb      	ldrb	r3, [r7, #15]
 8002e40:	3301      	adds	r3, #1
 8002e42:	73fb      	strb	r3, [r7, #15]
 8002e44:	7bfa      	ldrb	r2, [r7, #15]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	429a      	cmp	r2, r3
 8002e4c:	d3b5      	bcc.n	8002dba <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	603b      	str	r3, [r7, #0]
 8002e54:	687e      	ldr	r6, [r7, #4]
 8002e56:	466d      	mov	r5, sp
 8002e58:	f106 0410 	add.w	r4, r6, #16
 8002e5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e5e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e60:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e62:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e64:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e68:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e6c:	1d33      	adds	r3, r6, #4
 8002e6e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e70:	6838      	ldr	r0, [r7, #0]
 8002e72:	f002 f961 	bl	8005138 <USB_DevInit>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d005      	beq.n	8002e88 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2202      	movs	r2, #2
 8002e80:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e00d      	b.n	8002ea4 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2201      	movs	r2, #1
 8002e94:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f003 fab0 	bl	8006402 <USB_DevDisconnect>

  return HAL_OK;
 8002ea2:	2300      	movs	r3, #0
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002eac <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002ec0:	2b01      	cmp	r3, #1
 8002ec2:	d101      	bne.n	8002ec8 <HAL_PCD_Start+0x1c>
 8002ec4:	2302      	movs	r3, #2
 8002ec6:	e020      	b.n	8002f0a <HAL_PCD_Start+0x5e>
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2201      	movs	r2, #1
 8002ecc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed4:	2b01      	cmp	r3, #1
 8002ed6:	d109      	bne.n	8002eec <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d005      	beq.n	8002eec <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ee4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002ee8:	68fb      	ldr	r3, [r7, #12]
 8002eea:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f002 f8b3 	bl	800505c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4618      	mov	r0, r3
 8002efc:	f003 fa60 	bl	80063c0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	2200      	movs	r2, #0
 8002f04:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8002f08:	2300      	movs	r3, #0
}
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	3710      	adds	r7, #16
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bd80      	pop	{r7, pc}

08002f12 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002f12:	b590      	push	{r4, r7, lr}
 8002f14:	b08d      	sub	sp, #52	@ 0x34
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f20:	6a3b      	ldr	r3, [r7, #32]
 8002f22:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f003 fb1e 	bl	800656a <USB_GetMode>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	f040 848a 	bne.w	800384a <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f003 fa82 	bl	8006444 <USB_ReadInterrupts>
 8002f40:	4603      	mov	r3, r0
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f000 8480 	beq.w	8003848 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	0a1b      	lsrs	r3, r3, #8
 8002f52:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4618      	mov	r0, r3
 8002f62:	f003 fa6f 	bl	8006444 <USB_ReadInterrupts>
 8002f66:	4603      	mov	r3, r0
 8002f68:	f003 0302 	and.w	r3, r3, #2
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d107      	bne.n	8002f80 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	695a      	ldr	r2, [r3, #20]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f002 0202 	and.w	r2, r2, #2
 8002f7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f003 fa5d 	bl	8006444 <USB_ReadInterrupts>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d161      	bne.n	8003058 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f022 0210 	bic.w	r2, r2, #16
 8002fa2:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002fa4:	6a3b      	ldr	r3, [r7, #32]
 8002fa6:	6a1b      	ldr	r3, [r3, #32]
 8002fa8:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002faa:	69bb      	ldr	r3, [r7, #24]
 8002fac:	f003 020f 	and.w	r2, r3, #15
 8002fb0:	4613      	mov	r3, r2
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	4413      	add	r3, r2
 8002fb6:	009b      	lsls	r3, r3, #2
 8002fb8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3304      	adds	r3, #4
 8002fc2:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002fc4:	69bb      	ldr	r3, [r7, #24]
 8002fc6:	0c5b      	lsrs	r3, r3, #17
 8002fc8:	f003 030f 	and.w	r3, r3, #15
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d124      	bne.n	800301a <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002fd0:	69ba      	ldr	r2, [r7, #24]
 8002fd2:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d035      	beq.n	8003048 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002fe0:	69bb      	ldr	r3, [r7, #24]
 8002fe2:	091b      	lsrs	r3, r3, #4
 8002fe4:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002fe6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fea:	b29b      	uxth	r3, r3
 8002fec:	461a      	mov	r2, r3
 8002fee:	6a38      	ldr	r0, [r7, #32]
 8002ff0:	f003 f894 	bl	800611c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002ff4:	697b      	ldr	r3, [r7, #20]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	091b      	lsrs	r3, r3, #4
 8002ffc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003000:	441a      	add	r2, r3
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003006:	697b      	ldr	r3, [r7, #20]
 8003008:	6a1a      	ldr	r2, [r3, #32]
 800300a:	69bb      	ldr	r3, [r7, #24]
 800300c:	091b      	lsrs	r3, r3, #4
 800300e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003012:	441a      	add	r2, r3
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	621a      	str	r2, [r3, #32]
 8003018:	e016      	b.n	8003048 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	0c5b      	lsrs	r3, r3, #17
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	2b06      	cmp	r3, #6
 8003024:	d110      	bne.n	8003048 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800302c:	2208      	movs	r2, #8
 800302e:	4619      	mov	r1, r3
 8003030:	6a38      	ldr	r0, [r7, #32]
 8003032:	f003 f873 	bl	800611c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	6a1a      	ldr	r2, [r3, #32]
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	091b      	lsrs	r3, r3, #4
 800303e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003042:	441a      	add	r2, r3
 8003044:	697b      	ldr	r3, [r7, #20]
 8003046:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	699a      	ldr	r2, [r3, #24]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f042 0210 	orr.w	r2, r2, #16
 8003056:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f003 f9f1 	bl	8006444 <USB_ReadInterrupts>
 8003062:	4603      	mov	r3, r0
 8003064:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003068:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800306c:	f040 80a7 	bne.w	80031be <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8003070:	2300      	movs	r3, #0
 8003072:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f003 f9f6 	bl	800646a <USB_ReadDevAllOutEpInterrupt>
 800307e:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8003080:	e099      	b.n	80031b6 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8003082:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003084:	f003 0301 	and.w	r3, r3, #1
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 808e 	beq.w	80031aa <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003094:	b2d2      	uxtb	r2, r2
 8003096:	4611      	mov	r1, r2
 8003098:	4618      	mov	r0, r3
 800309a:	f003 fa1a 	bl	80064d2 <USB_ReadDevOutEPInterrupt>
 800309e:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00c      	beq.n	80030c4 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80030aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ac:	015a      	lsls	r2, r3, #5
 80030ae:	69fb      	ldr	r3, [r7, #28]
 80030b0:	4413      	add	r3, r2
 80030b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030b6:	461a      	mov	r2, r3
 80030b8:	2301      	movs	r3, #1
 80030ba:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80030bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	f000 feaa 	bl	8003e18 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80030c4:	693b      	ldr	r3, [r7, #16]
 80030c6:	f003 0308 	and.w	r3, r3, #8
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d00c      	beq.n	80030e8 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80030ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030d0:	015a      	lsls	r2, r3, #5
 80030d2:	69fb      	ldr	r3, [r7, #28]
 80030d4:	4413      	add	r3, r2
 80030d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030da:	461a      	mov	r2, r3
 80030dc:	2308      	movs	r3, #8
 80030de:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 80030e0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80030e2:	6878      	ldr	r0, [r7, #4]
 80030e4:	f000 ff80 	bl	8003fe8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	f003 0310 	and.w	r3, r3, #16
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d008      	beq.n	8003104 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80030f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f4:	015a      	lsls	r2, r3, #5
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	4413      	add	r3, r2
 80030fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80030fe:	461a      	mov	r2, r3
 8003100:	2310      	movs	r3, #16
 8003102:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d030      	beq.n	8003170 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800310e:	6a3b      	ldr	r3, [r7, #32]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003116:	2b80      	cmp	r3, #128	@ 0x80
 8003118:	d109      	bne.n	800312e <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800311a:	69fb      	ldr	r3, [r7, #28]
 800311c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	69fa      	ldr	r2, [r7, #28]
 8003124:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003128:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800312c:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800312e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003130:	4613      	mov	r3, r2
 8003132:	00db      	lsls	r3, r3, #3
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 800313c:	687a      	ldr	r2, [r7, #4]
 800313e:	4413      	add	r3, r2
 8003140:	3304      	adds	r3, #4
 8003142:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8003144:	697b      	ldr	r3, [r7, #20]
 8003146:	78db      	ldrb	r3, [r3, #3]
 8003148:	2b01      	cmp	r3, #1
 800314a:	d108      	bne.n	800315e <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800314c:	697b      	ldr	r3, [r7, #20]
 800314e:	2200      	movs	r2, #0
 8003150:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8003152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003154:	b2db      	uxtb	r3, r3
 8003156:	4619      	mov	r1, r3
 8003158:	6878      	ldr	r0, [r7, #4]
 800315a:	f005 fbed 	bl	8008938 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800315e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003160:	015a      	lsls	r2, r3, #5
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	4413      	add	r3, r2
 8003166:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800316a:	461a      	mov	r2, r3
 800316c:	2302      	movs	r3, #2
 800316e:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	f003 0320 	and.w	r3, r3, #32
 8003176:	2b00      	cmp	r3, #0
 8003178:	d008      	beq.n	800318c <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800317a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800317c:	015a      	lsls	r2, r3, #5
 800317e:	69fb      	ldr	r3, [r7, #28]
 8003180:	4413      	add	r3, r2
 8003182:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003186:	461a      	mov	r2, r3
 8003188:	2320      	movs	r3, #32
 800318a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003192:	2b00      	cmp	r3, #0
 8003194:	d009      	beq.n	80031aa <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8003196:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003198:	015a      	lsls	r2, r3, #5
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	4413      	add	r3, r2
 800319e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80031a2:	461a      	mov	r2, r3
 80031a4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80031a8:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80031aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ac:	3301      	adds	r3, #1
 80031ae:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 80031b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b2:	085b      	lsrs	r3, r3, #1
 80031b4:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 80031b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f47f af62 	bne.w	8003082 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f003 f93e 	bl	8006444 <USB_ReadInterrupts>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80031ce:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80031d2:	f040 80db 	bne.w	800338c <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4618      	mov	r0, r3
 80031dc:	f003 f95f 	bl	800649e <USB_ReadDevAllInEpInterrupt>
 80031e0:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 80031e2:	2300      	movs	r3, #0
 80031e4:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 80031e6:	e0cd      	b.n	8003384 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80031e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	f000 80c2 	beq.w	8003378 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031fa:	b2d2      	uxtb	r2, r2
 80031fc:	4611      	mov	r1, r2
 80031fe:	4618      	mov	r0, r3
 8003200:	f003 f985 	bl	800650e <USB_ReadDevInEPInterrupt>
 8003204:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	f003 0301 	and.w	r3, r3, #1
 800320c:	2b00      	cmp	r3, #0
 800320e:	d057      	beq.n	80032c0 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003210:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	2201      	movs	r2, #1
 8003218:	fa02 f303 	lsl.w	r3, r2, r3
 800321c:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003224:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	43db      	mvns	r3, r3
 800322a:	69f9      	ldr	r1, [r7, #28]
 800322c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003230:	4013      	ands	r3, r2
 8003232:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8003234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003236:	015a      	lsls	r2, r3, #5
 8003238:	69fb      	ldr	r3, [r7, #28]
 800323a:	4413      	add	r3, r2
 800323c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003240:	461a      	mov	r2, r3
 8003242:	2301      	movs	r3, #1
 8003244:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d132      	bne.n	80032b4 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800324e:	6879      	ldr	r1, [r7, #4]
 8003250:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003252:	4613      	mov	r3, r2
 8003254:	00db      	lsls	r3, r3, #3
 8003256:	4413      	add	r3, r2
 8003258:	009b      	lsls	r3, r3, #2
 800325a:	440b      	add	r3, r1
 800325c:	334c      	adds	r3, #76	@ 0x4c
 800325e:	6819      	ldr	r1, [r3, #0]
 8003260:	6878      	ldr	r0, [r7, #4]
 8003262:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003264:	4613      	mov	r3, r2
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	009b      	lsls	r3, r3, #2
 800326c:	4403      	add	r3, r0
 800326e:	3348      	adds	r3, #72	@ 0x48
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	4419      	add	r1, r3
 8003274:	6878      	ldr	r0, [r7, #4]
 8003276:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003278:	4613      	mov	r3, r2
 800327a:	00db      	lsls	r3, r3, #3
 800327c:	4413      	add	r3, r2
 800327e:	009b      	lsls	r3, r3, #2
 8003280:	4403      	add	r3, r0
 8003282:	334c      	adds	r3, #76	@ 0x4c
 8003284:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8003286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003288:	2b00      	cmp	r3, #0
 800328a:	d113      	bne.n	80032b4 <HAL_PCD_IRQHandler+0x3a2>
 800328c:	6879      	ldr	r1, [r7, #4]
 800328e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	440b      	add	r3, r1
 800329a:	3354      	adds	r3, #84	@ 0x54
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d108      	bne.n	80032b4 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6818      	ldr	r0, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80032ac:	461a      	mov	r2, r3
 80032ae:	2101      	movs	r1, #1
 80032b0:	f003 f98c 	bl	80065cc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80032b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	4619      	mov	r1, r3
 80032ba:	6878      	ldr	r0, [r7, #4]
 80032bc:	f005 fac1 	bl	8008842 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80032c0:	693b      	ldr	r3, [r7, #16]
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d008      	beq.n	80032dc <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80032ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032cc:	015a      	lsls	r2, r3, #5
 80032ce:	69fb      	ldr	r3, [r7, #28]
 80032d0:	4413      	add	r3, r2
 80032d2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032d6:	461a      	mov	r2, r3
 80032d8:	2308      	movs	r3, #8
 80032da:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80032dc:	693b      	ldr	r3, [r7, #16]
 80032de:	f003 0310 	and.w	r3, r3, #16
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d008      	beq.n	80032f8 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80032e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032e8:	015a      	lsls	r2, r3, #5
 80032ea:	69fb      	ldr	r3, [r7, #28]
 80032ec:	4413      	add	r3, r2
 80032ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80032f2:	461a      	mov	r2, r3
 80032f4:	2310      	movs	r3, #16
 80032f6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80032f8:	693b      	ldr	r3, [r7, #16]
 80032fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d008      	beq.n	8003314 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8003302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003304:	015a      	lsls	r2, r3, #5
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	4413      	add	r3, r2
 800330a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800330e:	461a      	mov	r2, r3
 8003310:	2340      	movs	r3, #64	@ 0x40
 8003312:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	f003 0302 	and.w	r3, r3, #2
 800331a:	2b00      	cmp	r3, #0
 800331c:	d023      	beq.n	8003366 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800331e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003320:	6a38      	ldr	r0, [r7, #32]
 8003322:	f002 f86d 	bl	8005400 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8003326:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003328:	4613      	mov	r3, r2
 800332a:	00db      	lsls	r3, r3, #3
 800332c:	4413      	add	r3, r2
 800332e:	009b      	lsls	r3, r3, #2
 8003330:	3338      	adds	r3, #56	@ 0x38
 8003332:	687a      	ldr	r2, [r7, #4]
 8003334:	4413      	add	r3, r2
 8003336:	3304      	adds	r3, #4
 8003338:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	78db      	ldrb	r3, [r3, #3]
 800333e:	2b01      	cmp	r3, #1
 8003340:	d108      	bne.n	8003354 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2200      	movs	r2, #0
 8003346:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8003348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800334a:	b2db      	uxtb	r3, r3
 800334c:	4619      	mov	r1, r3
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f005 fb04 	bl	800895c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8003354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003356:	015a      	lsls	r2, r3, #5
 8003358:	69fb      	ldr	r3, [r7, #28]
 800335a:	4413      	add	r3, r2
 800335c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003360:	461a      	mov	r2, r3
 8003362:	2302      	movs	r3, #2
 8003364:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8003366:	693b      	ldr	r3, [r7, #16]
 8003368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800336c:	2b00      	cmp	r3, #0
 800336e:	d003      	beq.n	8003378 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8003370:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fcc3 	bl	8003cfe <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8003378:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800337a:	3301      	adds	r3, #1
 800337c:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 800337e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003380:	085b      	lsrs	r3, r3, #1
 8003382:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8003384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003386:	2b00      	cmp	r3, #0
 8003388:	f47f af2e 	bne.w	80031e8 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4618      	mov	r0, r3
 8003392:	f003 f857 	bl	8006444 <USB_ReadInterrupts>
 8003396:	4603      	mov	r3, r0
 8003398:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800339c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80033a0:	d122      	bne.n	80033e8 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	69fa      	ldr	r2, [r7, #28]
 80033ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80033b0:	f023 0301 	bic.w	r3, r3, #1
 80033b4:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 80033bc:	2b01      	cmp	r3, #1
 80033be:	d108      	bne.n	80033d2 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80033c8:	2100      	movs	r1, #0
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f000 feaa 	bl	8004124 <HAL_PCDEx_LPM_Callback>
 80033d0:	e002      	b.n	80033d8 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f005 faa2 	bl	800891c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695a      	ldr	r2, [r3, #20]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80033e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f003 f829 	bl	8006444 <USB_ReadInterrupts>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80033f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80033fc:	d112      	bne.n	8003424 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80033fe:	69fb      	ldr	r3, [r7, #28]
 8003400:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003404:	689b      	ldr	r3, [r3, #8]
 8003406:	f003 0301 	and.w	r3, r3, #1
 800340a:	2b01      	cmp	r3, #1
 800340c:	d102      	bne.n	8003414 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f005 fa5e 	bl	80088d0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	695a      	ldr	r2, [r3, #20]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8003422:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f003 f80b 	bl	8006444 <USB_ReadInterrupts>
 800342e:	4603      	mov	r3, r0
 8003430:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003434:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003438:	f040 80b7 	bne.w	80035aa <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800343c:	69fb      	ldr	r3, [r7, #28]
 800343e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	69fa      	ldr	r2, [r7, #28]
 8003446:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800344a:	f023 0301 	bic.w	r3, r3, #1
 800344e:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	2110      	movs	r1, #16
 8003456:	4618      	mov	r0, r3
 8003458:	f001 ffd2 	bl	8005400 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800345c:	2300      	movs	r3, #0
 800345e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003460:	e046      	b.n	80034f0 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003462:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003464:	015a      	lsls	r2, r3, #5
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	4413      	add	r3, r2
 800346a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800346e:	461a      	mov	r2, r3
 8003470:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003474:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003476:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003478:	015a      	lsls	r2, r3, #5
 800347a:	69fb      	ldr	r3, [r7, #28]
 800347c:	4413      	add	r3, r2
 800347e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003486:	0151      	lsls	r1, r2, #5
 8003488:	69fa      	ldr	r2, [r7, #28]
 800348a:	440a      	add	r2, r1
 800348c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003490:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8003494:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003498:	015a      	lsls	r2, r3, #5
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	4413      	add	r3, r2
 800349e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034a2:	461a      	mov	r2, r3
 80034a4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80034a8:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80034aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ac:	015a      	lsls	r2, r3, #5
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	4413      	add	r3, r2
 80034b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034ba:	0151      	lsls	r1, r2, #5
 80034bc:	69fa      	ldr	r2, [r7, #28]
 80034be:	440a      	add	r2, r1
 80034c0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80034c4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80034c8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80034ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034cc:	015a      	lsls	r2, r3, #5
 80034ce:	69fb      	ldr	r3, [r7, #28]
 80034d0:	4413      	add	r3, r2
 80034d2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034da:	0151      	lsls	r1, r2, #5
 80034dc:	69fa      	ldr	r2, [r7, #28]
 80034de:	440a      	add	r2, r1
 80034e0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80034e4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80034e8:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80034ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ec:	3301      	adds	r3, #1
 80034ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034f6:	429a      	cmp	r2, r3
 80034f8:	d3b3      	bcc.n	8003462 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80034fa:	69fb      	ldr	r3, [r7, #28]
 80034fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003500:	69db      	ldr	r3, [r3, #28]
 8003502:	69fa      	ldr	r2, [r7, #28]
 8003504:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003508:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 800350c:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003512:	2b00      	cmp	r3, #0
 8003514:	d016      	beq.n	8003544 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800351c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003520:	69fa      	ldr	r2, [r7, #28]
 8003522:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003526:	f043 030b 	orr.w	r3, r3, #11
 800352a:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003536:	69fa      	ldr	r2, [r7, #28]
 8003538:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800353c:	f043 030b 	orr.w	r3, r3, #11
 8003540:	6453      	str	r3, [r2, #68]	@ 0x44
 8003542:	e015      	b.n	8003570 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003544:	69fb      	ldr	r3, [r7, #28]
 8003546:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800354a:	695b      	ldr	r3, [r3, #20]
 800354c:	69fa      	ldr	r2, [r7, #28]
 800354e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003552:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8003556:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800355a:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800355c:	69fb      	ldr	r3, [r7, #28]
 800355e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003562:	691b      	ldr	r3, [r3, #16]
 8003564:	69fa      	ldr	r2, [r7, #28]
 8003566:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800356a:	f043 030b 	orr.w	r3, r3, #11
 800356e:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003570:	69fb      	ldr	r3, [r7, #28]
 8003572:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	69fa      	ldr	r2, [r7, #28]
 800357a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800357e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8003582:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	6818      	ldr	r0, [r3, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	691b      	ldr	r3, [r3, #16]
 800358c:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003594:	461a      	mov	r2, r3
 8003596:	f003 f819 	bl	80065cc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	695a      	ldr	r2, [r3, #20]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80035a8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f002 ff48 	bl	8006444 <USB_ReadInterrupts>
 80035b4:	4603      	mov	r3, r0
 80035b6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80035ba:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80035be:	d124      	bne.n	800360a <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f002 ffde 	bl	8006586 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f001 ff93 	bl	80054fa <USB_GetDevSpeed>
 80035d4:	4603      	mov	r3, r0
 80035d6:	461a      	mov	r2, r3
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681c      	ldr	r4, [r3, #0]
 80035e0:	f001 f9d0 	bl	8004984 <HAL_RCC_GetHCLKFreq>
 80035e4:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	461a      	mov	r2, r3
 80035ee:	4620      	mov	r0, r4
 80035f0:	f001 fc92 	bl	8004f18 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80035f4:	6878      	ldr	r0, [r7, #4]
 80035f6:	f005 f94c 	bl	8008892 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695a      	ldr	r2, [r3, #20]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8003608:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4618      	mov	r0, r3
 8003610:	f002 ff18 	bl	8006444 <USB_ReadInterrupts>
 8003614:	4603      	mov	r3, r0
 8003616:	f003 0308 	and.w	r3, r3, #8
 800361a:	2b08      	cmp	r3, #8
 800361c:	d10a      	bne.n	8003634 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f005 f929 	bl	8008876 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695a      	ldr	r2, [r3, #20]
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f002 0208 	and.w	r2, r2, #8
 8003632:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4618      	mov	r0, r3
 800363a:	f002 ff03 	bl	8006444 <USB_ReadInterrupts>
 800363e:	4603      	mov	r3, r0
 8003640:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003644:	2b80      	cmp	r3, #128	@ 0x80
 8003646:	d122      	bne.n	800368e <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003648:	6a3b      	ldr	r3, [r7, #32]
 800364a:	699b      	ldr	r3, [r3, #24]
 800364c:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003650:	6a3b      	ldr	r3, [r7, #32]
 8003652:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003654:	2301      	movs	r3, #1
 8003656:	627b      	str	r3, [r7, #36]	@ 0x24
 8003658:	e014      	b.n	8003684 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800365a:	6879      	ldr	r1, [r7, #4]
 800365c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800365e:	4613      	mov	r3, r2
 8003660:	00db      	lsls	r3, r3, #3
 8003662:	4413      	add	r3, r2
 8003664:	009b      	lsls	r3, r3, #2
 8003666:	440b      	add	r3, r1
 8003668:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800366c:	781b      	ldrb	r3, [r3, #0]
 800366e:	2b01      	cmp	r3, #1
 8003670:	d105      	bne.n	800367e <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003674:	b2db      	uxtb	r3, r3
 8003676:	4619      	mov	r1, r3
 8003678:	6878      	ldr	r0, [r7, #4]
 800367a:	f000 fb0f 	bl	8003c9c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800367e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003680:	3301      	adds	r3, #1
 8003682:	627b      	str	r3, [r7, #36]	@ 0x24
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800368a:	429a      	cmp	r2, r3
 800368c:	d3e5      	bcc.n	800365a <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	4618      	mov	r0, r3
 8003694:	f002 fed6 	bl	8006444 <USB_ReadInterrupts>
 8003698:	4603      	mov	r3, r0
 800369a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800369e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036a2:	d13b      	bne.n	800371c <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036a4:	2301      	movs	r3, #1
 80036a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80036a8:	e02b      	b.n	8003702 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80036aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ac:	015a      	lsls	r2, r3, #5
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	4413      	add	r3, r2
 80036b2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80036ba:	6879      	ldr	r1, [r7, #4]
 80036bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036be:	4613      	mov	r3, r2
 80036c0:	00db      	lsls	r3, r3, #3
 80036c2:	4413      	add	r3, r2
 80036c4:	009b      	lsls	r3, r3, #2
 80036c6:	440b      	add	r3, r1
 80036c8:	3340      	adds	r3, #64	@ 0x40
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d115      	bne.n	80036fc <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80036d0:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	da12      	bge.n	80036fc <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80036d6:	6879      	ldr	r1, [r7, #4]
 80036d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036da:	4613      	mov	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	440b      	add	r3, r1
 80036e4:	333f      	adds	r3, #63	@ 0x3f
 80036e6:	2201      	movs	r2, #1
 80036e8:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80036ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	4619      	mov	r1, r3
 80036f6:	6878      	ldr	r0, [r7, #4]
 80036f8:	f000 fad0 	bl	8003c9c <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80036fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fe:	3301      	adds	r3, #1
 8003700:	627b      	str	r3, [r7, #36]	@ 0x24
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003708:	429a      	cmp	r2, r3
 800370a:	d3ce      	bcc.n	80036aa <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	695a      	ldr	r2, [r3, #20]
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 800371a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	4618      	mov	r0, r3
 8003722:	f002 fe8f 	bl	8006444 <USB_ReadInterrupts>
 8003726:	4603      	mov	r3, r0
 8003728:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800372c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8003730:	d155      	bne.n	80037de <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003732:	2301      	movs	r3, #1
 8003734:	627b      	str	r3, [r7, #36]	@ 0x24
 8003736:	e045      	b.n	80037c4 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003738:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800373a:	015a      	lsls	r2, r3, #5
 800373c:	69fb      	ldr	r3, [r7, #28]
 800373e:	4413      	add	r3, r2
 8003740:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003748:	6879      	ldr	r1, [r7, #4]
 800374a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800374c:	4613      	mov	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	440b      	add	r3, r1
 8003756:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800375a:	781b      	ldrb	r3, [r3, #0]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d12e      	bne.n	80037be <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003760:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003762:	2b00      	cmp	r3, #0
 8003764:	da2b      	bge.n	80037be <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003766:	69bb      	ldr	r3, [r7, #24]
 8003768:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8003772:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003776:	429a      	cmp	r2, r3
 8003778:	d121      	bne.n	80037be <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800377a:	6879      	ldr	r1, [r7, #4]
 800377c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800377e:	4613      	mov	r3, r2
 8003780:	00db      	lsls	r3, r3, #3
 8003782:	4413      	add	r3, r2
 8003784:	009b      	lsls	r3, r3, #2
 8003786:	440b      	add	r3, r1
 8003788:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 800378c:	2201      	movs	r2, #1
 800378e:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003790:	6a3b      	ldr	r3, [r7, #32]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8003798:	6a3b      	ldr	r3, [r7, #32]
 800379a:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800379c:	6a3b      	ldr	r3, [r7, #32]
 800379e:	695b      	ldr	r3, [r3, #20]
 80037a0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10a      	bne.n	80037be <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	69fa      	ldr	r2, [r7, #28]
 80037b2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80037b6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80037ba:	6053      	str	r3, [r2, #4]
            break;
 80037bc:	e007      	b.n	80037ce <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80037be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c0:	3301      	adds	r3, #1
 80037c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037ca:	429a      	cmp	r2, r3
 80037cc:	d3b4      	bcc.n	8003738 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	695a      	ldr	r2, [r3, #20]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80037dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4618      	mov	r0, r3
 80037e4:	f002 fe2e 	bl	8006444 <USB_ReadInterrupts>
 80037e8:	4603      	mov	r3, r0
 80037ea:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80037ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037f2:	d10a      	bne.n	800380a <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	f005 f8c3 	bl	8008980 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	695a      	ldr	r2, [r3, #20]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 8003808:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	4618      	mov	r0, r3
 8003810:	f002 fe18 	bl	8006444 <USB_ReadInterrupts>
 8003814:	4603      	mov	r3, r0
 8003816:	f003 0304 	and.w	r3, r3, #4
 800381a:	2b04      	cmp	r3, #4
 800381c:	d115      	bne.n	800384a <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003826:	69bb      	ldr	r3, [r7, #24]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d002      	beq.n	8003836 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f005 f8b3 	bl	800899c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6859      	ldr	r1, [r3, #4]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	69ba      	ldr	r2, [r7, #24]
 8003842:	430a      	orrs	r2, r1
 8003844:	605a      	str	r2, [r3, #4]
 8003846:	e000      	b.n	800384a <HAL_PCD_IRQHandler+0x938>
      return;
 8003848:	bf00      	nop
    }
  }
}
 800384a:	3734      	adds	r7, #52	@ 0x34
 800384c:	46bd      	mov	sp, r7
 800384e:	bd90      	pop	{r4, r7, pc}

08003850 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003862:	2b01      	cmp	r3, #1
 8003864:	d101      	bne.n	800386a <HAL_PCD_SetAddress+0x1a>
 8003866:	2302      	movs	r3, #2
 8003868:	e013      	b.n	8003892 <HAL_PCD_SetAddress+0x42>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	2201      	movs	r2, #1
 800386e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	78fa      	ldrb	r2, [r7, #3]
 8003876:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	78fa      	ldrb	r2, [r7, #3]
 8003880:	4611      	mov	r1, r2
 8003882:	4618      	mov	r0, r3
 8003884:	f002 fd76 	bl	8006374 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003890:	2300      	movs	r3, #0
}
 8003892:	4618      	mov	r0, r3
 8003894:	3708      	adds	r7, #8
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b084      	sub	sp, #16
 800389e:	af00      	add	r7, sp, #0
 80038a0:	6078      	str	r0, [r7, #4]
 80038a2:	4608      	mov	r0, r1
 80038a4:	4611      	mov	r1, r2
 80038a6:	461a      	mov	r2, r3
 80038a8:	4603      	mov	r3, r0
 80038aa:	70fb      	strb	r3, [r7, #3]
 80038ac:	460b      	mov	r3, r1
 80038ae:	803b      	strh	r3, [r7, #0]
 80038b0:	4613      	mov	r3, r2
 80038b2:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80038b4:	2300      	movs	r3, #0
 80038b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80038b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	da0f      	bge.n	80038e0 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80038c0:	78fb      	ldrb	r3, [r7, #3]
 80038c2:	f003 020f 	and.w	r2, r3, #15
 80038c6:	4613      	mov	r3, r2
 80038c8:	00db      	lsls	r3, r3, #3
 80038ca:	4413      	add	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	3338      	adds	r3, #56	@ 0x38
 80038d0:	687a      	ldr	r2, [r7, #4]
 80038d2:	4413      	add	r3, r2
 80038d4:	3304      	adds	r3, #4
 80038d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	2201      	movs	r2, #1
 80038dc:	705a      	strb	r2, [r3, #1]
 80038de:	e00f      	b.n	8003900 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038e0:	78fb      	ldrb	r3, [r7, #3]
 80038e2:	f003 020f 	and.w	r2, r3, #15
 80038e6:	4613      	mov	r3, r2
 80038e8:	00db      	lsls	r3, r3, #3
 80038ea:	4413      	add	r3, r2
 80038ec:	009b      	lsls	r3, r3, #2
 80038ee:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	4413      	add	r3, r2
 80038f6:	3304      	adds	r3, #4
 80038f8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2200      	movs	r2, #0
 80038fe:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003900:	78fb      	ldrb	r3, [r7, #3]
 8003902:	f003 030f 	and.w	r3, r3, #15
 8003906:	b2da      	uxtb	r2, r3
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800390c:	883a      	ldrh	r2, [r7, #0]
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	78ba      	ldrb	r2, [r7, #2]
 8003916:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	785b      	ldrb	r3, [r3, #1]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d004      	beq.n	800392a <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	781b      	ldrb	r3, [r3, #0]
 8003924:	461a      	mov	r2, r3
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800392a:	78bb      	ldrb	r3, [r7, #2]
 800392c:	2b02      	cmp	r3, #2
 800392e:	d102      	bne.n	8003936 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	2200      	movs	r2, #0
 8003934:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 800393c:	2b01      	cmp	r3, #1
 800393e:	d101      	bne.n	8003944 <HAL_PCD_EP_Open+0xaa>
 8003940:	2302      	movs	r3, #2
 8003942:	e00e      	b.n	8003962 <HAL_PCD_EP_Open+0xc8>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	68f9      	ldr	r1, [r7, #12]
 8003952:	4618      	mov	r0, r3
 8003954:	f001 fdf6 	bl	8005544 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2200      	movs	r2, #0
 800395c:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8003960:	7afb      	ldrb	r3, [r7, #11]
}
 8003962:	4618      	mov	r0, r3
 8003964:	3710      	adds	r7, #16
 8003966:	46bd      	mov	sp, r7
 8003968:	bd80      	pop	{r7, pc}

0800396a <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800396a:	b580      	push	{r7, lr}
 800396c:	b084      	sub	sp, #16
 800396e:	af00      	add	r7, sp, #0
 8003970:	6078      	str	r0, [r7, #4]
 8003972:	460b      	mov	r3, r1
 8003974:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003976:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800397a:	2b00      	cmp	r3, #0
 800397c:	da0f      	bge.n	800399e <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800397e:	78fb      	ldrb	r3, [r7, #3]
 8003980:	f003 020f 	and.w	r2, r3, #15
 8003984:	4613      	mov	r3, r2
 8003986:	00db      	lsls	r3, r3, #3
 8003988:	4413      	add	r3, r2
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	3338      	adds	r3, #56	@ 0x38
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	4413      	add	r3, r2
 8003992:	3304      	adds	r3, #4
 8003994:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	2201      	movs	r2, #1
 800399a:	705a      	strb	r2, [r3, #1]
 800399c:	e00f      	b.n	80039be <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800399e:	78fb      	ldrb	r3, [r7, #3]
 80039a0:	f003 020f 	and.w	r2, r3, #15
 80039a4:	4613      	mov	r3, r2
 80039a6:	00db      	lsls	r3, r3, #3
 80039a8:	4413      	add	r3, r2
 80039aa:	009b      	lsls	r3, r3, #2
 80039ac:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80039b0:	687a      	ldr	r2, [r7, #4]
 80039b2:	4413      	add	r3, r2
 80039b4:	3304      	adds	r3, #4
 80039b6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	2200      	movs	r2, #0
 80039bc:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80039be:	78fb      	ldrb	r3, [r7, #3]
 80039c0:	f003 030f 	and.w	r3, r3, #15
 80039c4:	b2da      	uxtb	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d101      	bne.n	80039d8 <HAL_PCD_EP_Close+0x6e>
 80039d4:	2302      	movs	r3, #2
 80039d6:	e00e      	b.n	80039f6 <HAL_PCD_EP_Close+0x8c>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2201      	movs	r2, #1
 80039dc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68f9      	ldr	r1, [r7, #12]
 80039e6:	4618      	mov	r0, r3
 80039e8:	f001 fe34 	bl	8005654 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}

080039fe <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80039fe:	b580      	push	{r7, lr}
 8003a00:	b086      	sub	sp, #24
 8003a02:	af00      	add	r7, sp, #0
 8003a04:	60f8      	str	r0, [r7, #12]
 8003a06:	607a      	str	r2, [r7, #4]
 8003a08:	603b      	str	r3, [r7, #0]
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003a0e:	7afb      	ldrb	r3, [r7, #11]
 8003a10:	f003 020f 	and.w	r2, r3, #15
 8003a14:	4613      	mov	r3, r2
 8003a16:	00db      	lsls	r3, r3, #3
 8003a18:	4413      	add	r3, r2
 8003a1a:	009b      	lsls	r3, r3, #2
 8003a1c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	4413      	add	r3, r2
 8003a24:	3304      	adds	r3, #4
 8003a26:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003a28:	697b      	ldr	r3, [r7, #20]
 8003a2a:	687a      	ldr	r2, [r7, #4]
 8003a2c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	2200      	movs	r2, #0
 8003a38:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003a3a:	697b      	ldr	r3, [r7, #20]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003a40:	7afb      	ldrb	r3, [r7, #11]
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	b2da      	uxtb	r2, r3
 8003a48:	697b      	ldr	r3, [r7, #20]
 8003a4a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	691b      	ldr	r3, [r3, #16]
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d102      	bne.n	8003a5a <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	697b      	ldr	r3, [r7, #20]
 8003a58:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003a5a:	7afb      	ldrb	r3, [r7, #11]
 8003a5c:	f003 030f 	and.w	r3, r3, #15
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d109      	bne.n	8003a78 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6818      	ldr	r0, [r3, #0]
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	691b      	ldr	r3, [r3, #16]
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	461a      	mov	r2, r3
 8003a70:	6979      	ldr	r1, [r7, #20]
 8003a72:	f002 f913 	bl	8005c9c <USB_EP0StartXfer>
 8003a76:	e008      	b.n	8003a8a <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	6818      	ldr	r0, [r3, #0]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	691b      	ldr	r3, [r3, #16]
 8003a80:	b2db      	uxtb	r3, r3
 8003a82:	461a      	mov	r2, r3
 8003a84:	6979      	ldr	r1, [r7, #20]
 8003a86:	f001 fec1 	bl	800580c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3718      	adds	r7, #24
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b086      	sub	sp, #24
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	607a      	str	r2, [r7, #4]
 8003a9e:	603b      	str	r3, [r7, #0]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003aa4:	7afb      	ldrb	r3, [r7, #11]
 8003aa6:	f003 020f 	and.w	r2, r3, #15
 8003aaa:	4613      	mov	r3, r2
 8003aac:	00db      	lsls	r3, r3, #3
 8003aae:	4413      	add	r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	3338      	adds	r3, #56	@ 0x38
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	3304      	adds	r3, #4
 8003aba:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	683a      	ldr	r2, [r7, #0]
 8003ac6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	2200      	movs	r2, #0
 8003acc:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003ad4:	7afb      	ldrb	r3, [r7, #11]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	b2da      	uxtb	r2, r3
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	691b      	ldr	r3, [r3, #16]
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d102      	bne.n	8003aee <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003ae8:	687a      	ldr	r2, [r7, #4]
 8003aea:	697b      	ldr	r3, [r7, #20]
 8003aec:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003aee:	7afb      	ldrb	r3, [r7, #11]
 8003af0:	f003 030f 	and.w	r3, r3, #15
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d109      	bne.n	8003b0c <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6818      	ldr	r0, [r3, #0]
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	691b      	ldr	r3, [r3, #16]
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	461a      	mov	r2, r3
 8003b04:	6979      	ldr	r1, [r7, #20]
 8003b06:	f002 f8c9 	bl	8005c9c <USB_EP0StartXfer>
 8003b0a:	e008      	b.n	8003b1e <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	6818      	ldr	r0, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	691b      	ldr	r3, [r3, #16]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	461a      	mov	r2, r3
 8003b18:	6979      	ldr	r1, [r7, #20]
 8003b1a:	f001 fe77 	bl	800580c <USB_EPStartXfer>
  }

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3718      	adds	r7, #24
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003b28:	b580      	push	{r7, lr}
 8003b2a:	b084      	sub	sp, #16
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
 8003b30:	460b      	mov	r3, r1
 8003b32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003b34:	78fb      	ldrb	r3, [r7, #3]
 8003b36:	f003 020f 	and.w	r2, r3, #15
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	685b      	ldr	r3, [r3, #4]
 8003b3e:	429a      	cmp	r2, r3
 8003b40:	d901      	bls.n	8003b46 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	e050      	b.n	8003be8 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003b46:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	da0f      	bge.n	8003b6e <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003b4e:	78fb      	ldrb	r3, [r7, #3]
 8003b50:	f003 020f 	and.w	r2, r3, #15
 8003b54:	4613      	mov	r3, r2
 8003b56:	00db      	lsls	r3, r3, #3
 8003b58:	4413      	add	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	3338      	adds	r3, #56	@ 0x38
 8003b5e:	687a      	ldr	r2, [r7, #4]
 8003b60:	4413      	add	r3, r2
 8003b62:	3304      	adds	r3, #4
 8003b64:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	2201      	movs	r2, #1
 8003b6a:	705a      	strb	r2, [r3, #1]
 8003b6c:	e00d      	b.n	8003b8a <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003b6e:	78fa      	ldrb	r2, [r7, #3]
 8003b70:	4613      	mov	r3, r2
 8003b72:	00db      	lsls	r3, r3, #3
 8003b74:	4413      	add	r3, r2
 8003b76:	009b      	lsls	r3, r3, #2
 8003b78:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	4413      	add	r3, r2
 8003b80:	3304      	adds	r3, #4
 8003b82:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003b84:	68fb      	ldr	r3, [r7, #12]
 8003b86:	2200      	movs	r2, #0
 8003b88:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003b90:	78fb      	ldrb	r3, [r7, #3]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	b2da      	uxtb	r2, r3
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003ba2:	2b01      	cmp	r3, #1
 8003ba4:	d101      	bne.n	8003baa <HAL_PCD_EP_SetStall+0x82>
 8003ba6:	2302      	movs	r3, #2
 8003ba8:	e01e      	b.n	8003be8 <HAL_PCD_EP_SetStall+0xc0>
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	2201      	movs	r2, #1
 8003bae:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68f9      	ldr	r1, [r7, #12]
 8003bb8:	4618      	mov	r0, r3
 8003bba:	f002 fb07 	bl	80061cc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003bbe:	78fb      	ldrb	r3, [r7, #3]
 8003bc0:	f003 030f 	and.w	r3, r3, #15
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d10a      	bne.n	8003bde <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6818      	ldr	r0, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691b      	ldr	r3, [r3, #16]
 8003bd0:	b2d9      	uxtb	r1, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003bd8:	461a      	mov	r2, r3
 8003bda:	f002 fcf7 	bl	80065cc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}

08003bf0 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003bfc:	78fb      	ldrb	r3, [r7, #3]
 8003bfe:	f003 020f 	and.w	r2, r3, #15
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d901      	bls.n	8003c0e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e042      	b.n	8003c94 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003c0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	da0f      	bge.n	8003c36 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003c16:	78fb      	ldrb	r3, [r7, #3]
 8003c18:	f003 020f 	and.w	r2, r3, #15
 8003c1c:	4613      	mov	r3, r2
 8003c1e:	00db      	lsls	r3, r3, #3
 8003c20:	4413      	add	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	3338      	adds	r3, #56	@ 0x38
 8003c26:	687a      	ldr	r2, [r7, #4]
 8003c28:	4413      	add	r3, r2
 8003c2a:	3304      	adds	r3, #4
 8003c2c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	2201      	movs	r2, #1
 8003c32:	705a      	strb	r2, [r3, #1]
 8003c34:	e00f      	b.n	8003c56 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003c36:	78fb      	ldrb	r3, [r7, #3]
 8003c38:	f003 020f 	and.w	r2, r3, #15
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	4413      	add	r3, r2
 8003c42:	009b      	lsls	r3, r3, #2
 8003c44:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	4413      	add	r3, r2
 8003c4c:	3304      	adds	r3, #4
 8003c4e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2200      	movs	r2, #0
 8003c54:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2200      	movs	r2, #0
 8003c5a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	f003 030f 	and.w	r3, r3, #15
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8003c6e:	2b01      	cmp	r3, #1
 8003c70:	d101      	bne.n	8003c76 <HAL_PCD_EP_ClrStall+0x86>
 8003c72:	2302      	movs	r3, #2
 8003c74:	e00e      	b.n	8003c94 <HAL_PCD_EP_ClrStall+0xa4>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	68f9      	ldr	r1, [r7, #12]
 8003c84:	4618      	mov	r0, r3
 8003c86:	f002 fb0f 	bl	80062a8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8003c92:	2300      	movs	r3, #0
}
 8003c94:	4618      	mov	r0, r3
 8003c96:	3710      	adds	r7, #16
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}

08003c9c <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003ca8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	da0c      	bge.n	8003cca <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003cb0:	78fb      	ldrb	r3, [r7, #3]
 8003cb2:	f003 020f 	and.w	r2, r3, #15
 8003cb6:	4613      	mov	r3, r2
 8003cb8:	00db      	lsls	r3, r3, #3
 8003cba:	4413      	add	r3, r2
 8003cbc:	009b      	lsls	r3, r3, #2
 8003cbe:	3338      	adds	r3, #56	@ 0x38
 8003cc0:	687a      	ldr	r2, [r7, #4]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	3304      	adds	r3, #4
 8003cc6:	60fb      	str	r3, [r7, #12]
 8003cc8:	e00c      	b.n	8003ce4 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003cca:	78fb      	ldrb	r3, [r7, #3]
 8003ccc:	f003 020f 	and.w	r2, r3, #15
 8003cd0:	4613      	mov	r3, r2
 8003cd2:	00db      	lsls	r3, r3, #3
 8003cd4:	4413      	add	r3, r2
 8003cd6:	009b      	lsls	r3, r3, #2
 8003cd8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003cdc:	687a      	ldr	r2, [r7, #4]
 8003cde:	4413      	add	r3, r2
 8003ce0:	3304      	adds	r3, #4
 8003ce2:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	68f9      	ldr	r1, [r7, #12]
 8003cea:	4618      	mov	r0, r3
 8003cec:	f002 f92e 	bl	8005f4c <USB_EPStopXfer>
 8003cf0:	4603      	mov	r3, r0
 8003cf2:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003cf4:	7afb      	ldrb	r3, [r7, #11]
}
 8003cf6:	4618      	mov	r0, r3
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}

08003cfe <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003cfe:	b580      	push	{r7, lr}
 8003d00:	b08a      	sub	sp, #40	@ 0x28
 8003d02:	af02      	add	r7, sp, #8
 8003d04:	6078      	str	r0, [r7, #4]
 8003d06:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003d12:	683a      	ldr	r2, [r7, #0]
 8003d14:	4613      	mov	r3, r2
 8003d16:	00db      	lsls	r3, r3, #3
 8003d18:	4413      	add	r3, r2
 8003d1a:	009b      	lsls	r3, r3, #2
 8003d1c:	3338      	adds	r3, #56	@ 0x38
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	4413      	add	r3, r2
 8003d22:	3304      	adds	r3, #4
 8003d24:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6a1a      	ldr	r2, [r3, #32]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	699b      	ldr	r3, [r3, #24]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d901      	bls.n	8003d36 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e06c      	b.n	8003e10 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	68db      	ldr	r3, [r3, #12]
 8003d46:	69fa      	ldr	r2, [r7, #28]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d902      	bls.n	8003d52 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003d52:	69fb      	ldr	r3, [r7, #28]
 8003d54:	3303      	adds	r3, #3
 8003d56:	089b      	lsrs	r3, r3, #2
 8003d58:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003d5a:	e02b      	b.n	8003db4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	699a      	ldr	r2, [r3, #24]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	1ad3      	subs	r3, r2, r3
 8003d66:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	68db      	ldr	r3, [r3, #12]
 8003d6c:	69fa      	ldr	r2, [r7, #28]
 8003d6e:	429a      	cmp	r2, r3
 8003d70:	d902      	bls.n	8003d78 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003d78:	69fb      	ldr	r3, [r7, #28]
 8003d7a:	3303      	adds	r3, #3
 8003d7c:	089b      	lsrs	r3, r3, #2
 8003d7e:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6919      	ldr	r1, [r3, #16]
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	b2da      	uxtb	r2, r3
 8003d88:	69fb      	ldr	r3, [r7, #28]
 8003d8a:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003d90:	b2db      	uxtb	r3, r3
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	4603      	mov	r3, r0
 8003d96:	6978      	ldr	r0, [r7, #20]
 8003d98:	f002 f982 	bl	80060a0 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	691a      	ldr	r2, [r3, #16]
 8003da0:	69fb      	ldr	r3, [r7, #28]
 8003da2:	441a      	add	r2, r3
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6a1a      	ldr	r2, [r3, #32]
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	441a      	add	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	015a      	lsls	r2, r3, #5
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4413      	add	r3, r2
 8003dbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003dc0:	699b      	ldr	r3, [r3, #24]
 8003dc2:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d809      	bhi.n	8003dde <PCD_WriteEmptyTxFifo+0xe0>
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a1a      	ldr	r2, [r3, #32]
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	d203      	bcs.n	8003dde <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d1be      	bne.n	8003d5c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	699a      	ldr	r2, [r3, #24]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	6a1b      	ldr	r3, [r3, #32]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d811      	bhi.n	8003e0e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	f003 030f 	and.w	r3, r3, #15
 8003df0:	2201      	movs	r2, #1
 8003df2:	fa02 f303 	lsl.w	r3, r2, r3
 8003df6:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003dfe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	43db      	mvns	r3, r3
 8003e04:	6939      	ldr	r1, [r7, #16]
 8003e06:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003e0a:	4013      	ands	r3, r2
 8003e0c:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8003e0e:	2300      	movs	r3, #0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3720      	adds	r7, #32
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd80      	pop	{r7, pc}

08003e18 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003e18:	b580      	push	{r7, lr}
 8003e1a:	b088      	sub	sp, #32
 8003e1c:	af00      	add	r7, sp, #0
 8003e1e:	6078      	str	r0, [r7, #4]
 8003e20:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e28:	69fb      	ldr	r3, [r7, #28]
 8003e2a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003e2c:	69fb      	ldr	r3, [r7, #28]
 8003e2e:	333c      	adds	r3, #60	@ 0x3c
 8003e30:	3304      	adds	r3, #4
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	015a      	lsls	r2, r3, #5
 8003e3a:	69bb      	ldr	r3, [r7, #24]
 8003e3c:	4413      	add	r3, r2
 8003e3e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	2b01      	cmp	r3, #1
 8003e4c:	d17b      	bne.n	8003f46 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f003 0308 	and.w	r3, r3, #8
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d015      	beq.n	8003e84 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	4a61      	ldr	r2, [pc, #388]	@ (8003fe0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	f240 80b9 	bls.w	8003fd4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	f000 80b3 	beq.w	8003fd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	015a      	lsls	r2, r3, #5
 8003e72:	69bb      	ldr	r3, [r7, #24]
 8003e74:	4413      	add	r3, r2
 8003e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003e80:	6093      	str	r3, [r2, #8]
 8003e82:	e0a7      	b.n	8003fd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f003 0320 	and.w	r3, r3, #32
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d009      	beq.n	8003ea2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	015a      	lsls	r2, r3, #5
 8003e92:	69bb      	ldr	r3, [r7, #24]
 8003e94:	4413      	add	r3, r2
 8003e96:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	2320      	movs	r3, #32
 8003e9e:	6093      	str	r3, [r2, #8]
 8003ea0:	e098      	b.n	8003fd4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	f040 8093 	bne.w	8003fd4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003eae:	697b      	ldr	r3, [r7, #20]
 8003eb0:	4a4b      	ldr	r2, [pc, #300]	@ (8003fe0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003eb2:	4293      	cmp	r3, r2
 8003eb4:	d90f      	bls.n	8003ed6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d00a      	beq.n	8003ed6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	69bb      	ldr	r3, [r7, #24]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003ecc:	461a      	mov	r2, r3
 8003ece:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003ed2:	6093      	str	r3, [r2, #8]
 8003ed4:	e07e      	b.n	8003fd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003ed6:	683a      	ldr	r2, [r7, #0]
 8003ed8:	4613      	mov	r3, r2
 8003eda:	00db      	lsls	r3, r3, #3
 8003edc:	4413      	add	r3, r2
 8003ede:	009b      	lsls	r3, r3, #2
 8003ee0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8003ee4:	687a      	ldr	r2, [r7, #4]
 8003ee6:	4413      	add	r3, r2
 8003ee8:	3304      	adds	r3, #4
 8003eea:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	69da      	ldr	r2, [r3, #28]
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	0159      	lsls	r1, r3, #5
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	440b      	add	r3, r1
 8003ef8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003efc:	691b      	ldr	r3, [r3, #16]
 8003efe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f02:	1ad2      	subs	r2, r2, r3
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d114      	bne.n	8003f38 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	699b      	ldr	r3, [r3, #24]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d109      	bne.n	8003f2a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003f20:	461a      	mov	r2, r3
 8003f22:	2101      	movs	r1, #1
 8003f24:	f002 fb52 	bl	80065cc <USB_EP0_OutStart>
 8003f28:	e006      	b.n	8003f38 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	691a      	ldr	r2, [r3, #16]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	441a      	add	r2, r3
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	b2db      	uxtb	r3, r3
 8003f3c:	4619      	mov	r1, r3
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f004 fc64 	bl	800880c <HAL_PCD_DataOutStageCallback>
 8003f44:	e046      	b.n	8003fd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	4a26      	ldr	r2, [pc, #152]	@ (8003fe4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d124      	bne.n	8003f98 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003f4e:	693b      	ldr	r3, [r7, #16]
 8003f50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d00a      	beq.n	8003f6e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	015a      	lsls	r2, r3, #5
 8003f5c:	69bb      	ldr	r3, [r7, #24]
 8003f5e:	4413      	add	r3, r2
 8003f60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f64:	461a      	mov	r2, r3
 8003f66:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003f6a:	6093      	str	r3, [r2, #8]
 8003f6c:	e032      	b.n	8003fd4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003f6e:	693b      	ldr	r3, [r7, #16]
 8003f70:	f003 0320 	and.w	r3, r3, #32
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d008      	beq.n	8003f8a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	015a      	lsls	r2, r3, #5
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	4413      	add	r3, r2
 8003f80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003f84:	461a      	mov	r2, r3
 8003f86:	2320      	movs	r3, #32
 8003f88:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	4619      	mov	r1, r3
 8003f90:	6878      	ldr	r0, [r7, #4]
 8003f92:	f004 fc3b 	bl	800880c <HAL_PCD_DataOutStageCallback>
 8003f96:	e01d      	b.n	8003fd4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003f98:	683b      	ldr	r3, [r7, #0]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d114      	bne.n	8003fc8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003f9e:	6879      	ldr	r1, [r7, #4]
 8003fa0:	683a      	ldr	r2, [r7, #0]
 8003fa2:	4613      	mov	r3, r2
 8003fa4:	00db      	lsls	r3, r3, #3
 8003fa6:	4413      	add	r3, r2
 8003fa8:	009b      	lsls	r3, r3, #2
 8003faa:	440b      	add	r3, r1
 8003fac:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d108      	bne.n	8003fc8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6818      	ldr	r0, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8003fc0:	461a      	mov	r2, r3
 8003fc2:	2100      	movs	r1, #0
 8003fc4:	f002 fb02 	bl	80065cc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	4619      	mov	r1, r3
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f004 fc1c 	bl	800880c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3720      	adds	r7, #32
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
 8003fde:	bf00      	nop
 8003fe0:	4f54300a 	.word	0x4f54300a
 8003fe4:	4f54310a 	.word	0x4f54310a

08003fe8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b086      	sub	sp, #24
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ff8:	697b      	ldr	r3, [r7, #20]
 8003ffa:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003ffc:	697b      	ldr	r3, [r7, #20]
 8003ffe:	333c      	adds	r3, #60	@ 0x3c
 8004000:	3304      	adds	r3, #4
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8004006:	683b      	ldr	r3, [r7, #0]
 8004008:	015a      	lsls	r2, r3, #5
 800400a:	693b      	ldr	r3, [r7, #16]
 800400c:	4413      	add	r3, r2
 800400e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	4a15      	ldr	r2, [pc, #84]	@ (8004070 <PCD_EP_OutSetupPacket_int+0x88>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d90e      	bls.n	800403c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800401e:	68bb      	ldr	r3, [r7, #8]
 8004020:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8004024:	2b00      	cmp	r3, #0
 8004026:	d009      	beq.n	800403c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	693b      	ldr	r3, [r7, #16]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004034:	461a      	mov	r2, r3
 8004036:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800403a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800403c:	6878      	ldr	r0, [r7, #4]
 800403e:	f004 fbd3 	bl	80087e8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4a0a      	ldr	r2, [pc, #40]	@ (8004070 <PCD_EP_OutSetupPacket_int+0x88>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d90c      	bls.n	8004064 <PCD_EP_OutSetupPacket_int+0x7c>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	2b01      	cmp	r3, #1
 8004050:	d108      	bne.n	8004064 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6818      	ldr	r0, [r3, #0]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 800405c:	461a      	mov	r2, r3
 800405e:	2101      	movs	r1, #1
 8004060:	f002 fab4 	bl	80065cc <USB_EP0_OutStart>
  }

  return HAL_OK;
 8004064:	2300      	movs	r3, #0
}
 8004066:	4618      	mov	r0, r3
 8004068:	3718      	adds	r7, #24
 800406a:	46bd      	mov	sp, r7
 800406c:	bd80      	pop	{r7, pc}
 800406e:	bf00      	nop
 8004070:	4f54300a 	.word	0x4f54300a

08004074 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8004074:	b480      	push	{r7}
 8004076:	b085      	sub	sp, #20
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
 800407c:	460b      	mov	r3, r1
 800407e:	70fb      	strb	r3, [r7, #3]
 8004080:	4613      	mov	r3, r2
 8004082:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800408a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800408c:	78fb      	ldrb	r3, [r7, #3]
 800408e:	2b00      	cmp	r3, #0
 8004090:	d107      	bne.n	80040a2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8004092:	883b      	ldrh	r3, [r7, #0]
 8004094:	0419      	lsls	r1, r3, #16
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	68ba      	ldr	r2, [r7, #8]
 800409c:	430a      	orrs	r2, r1
 800409e:	629a      	str	r2, [r3, #40]	@ 0x28
 80040a0:	e028      	b.n	80040f4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040a8:	0c1b      	lsrs	r3, r3, #16
 80040aa:	68ba      	ldr	r2, [r7, #8]
 80040ac:	4413      	add	r3, r2
 80040ae:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040b0:	2300      	movs	r3, #0
 80040b2:	73fb      	strb	r3, [r7, #15]
 80040b4:	e00d      	b.n	80040d2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	7bfb      	ldrb	r3, [r7, #15]
 80040bc:	3340      	adds	r3, #64	@ 0x40
 80040be:	009b      	lsls	r3, r3, #2
 80040c0:	4413      	add	r3, r2
 80040c2:	685b      	ldr	r3, [r3, #4]
 80040c4:	0c1b      	lsrs	r3, r3, #16
 80040c6:	68ba      	ldr	r2, [r7, #8]
 80040c8:	4413      	add	r3, r2
 80040ca:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 80040cc:	7bfb      	ldrb	r3, [r7, #15]
 80040ce:	3301      	adds	r3, #1
 80040d0:	73fb      	strb	r3, [r7, #15]
 80040d2:	7bfa      	ldrb	r2, [r7, #15]
 80040d4:	78fb      	ldrb	r3, [r7, #3]
 80040d6:	3b01      	subs	r3, #1
 80040d8:	429a      	cmp	r2, r3
 80040da:	d3ec      	bcc.n	80040b6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 80040dc:	883b      	ldrh	r3, [r7, #0]
 80040de:	0418      	lsls	r0, r3, #16
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6819      	ldr	r1, [r3, #0]
 80040e4:	78fb      	ldrb	r3, [r7, #3]
 80040e6:	3b01      	subs	r3, #1
 80040e8:	68ba      	ldr	r2, [r7, #8]
 80040ea:	4302      	orrs	r2, r0
 80040ec:	3340      	adds	r3, #64	@ 0x40
 80040ee:	009b      	lsls	r3, r3, #2
 80040f0:	440b      	add	r3, r1
 80040f2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80040f4:	2300      	movs	r3, #0
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3714      	adds	r7, #20
 80040fa:	46bd      	mov	sp, r7
 80040fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004100:	4770      	bx	lr

08004102 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8004102:	b480      	push	{r7}
 8004104:	b083      	sub	sp, #12
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	460b      	mov	r3, r1
 800410c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	887a      	ldrh	r2, [r7, #2]
 8004114:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	370c      	adds	r7, #12
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr

08004124 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8004130:	bf00      	nop
 8004132:	370c      	adds	r7, #12
 8004134:	46bd      	mov	sp, r7
 8004136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413a:	4770      	bx	lr

0800413c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d101      	bne.n	800414e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e267      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0301 	and.w	r3, r3, #1
 8004156:	2b00      	cmp	r3, #0
 8004158:	d075      	beq.n	8004246 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800415a:	4b88      	ldr	r3, [pc, #544]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 800415c:	689b      	ldr	r3, [r3, #8]
 800415e:	f003 030c 	and.w	r3, r3, #12
 8004162:	2b04      	cmp	r3, #4
 8004164:	d00c      	beq.n	8004180 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004166:	4b85      	ldr	r3, [pc, #532]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800416e:	2b08      	cmp	r3, #8
 8004170:	d112      	bne.n	8004198 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004172:	4b82      	ldr	r3, [pc, #520]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004174:	685b      	ldr	r3, [r3, #4]
 8004176:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800417a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800417e:	d10b      	bne.n	8004198 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004180:	4b7e      	ldr	r3, [pc, #504]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d05b      	beq.n	8004244 <HAL_RCC_OscConfig+0x108>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d157      	bne.n	8004244 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004194:	2301      	movs	r3, #1
 8004196:	e242      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041a0:	d106      	bne.n	80041b0 <HAL_RCC_OscConfig+0x74>
 80041a2:	4b76      	ldr	r3, [pc, #472]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4a75      	ldr	r2, [pc, #468]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041ac:	6013      	str	r3, [r2, #0]
 80041ae:	e01d      	b.n	80041ec <HAL_RCC_OscConfig+0xb0>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80041b8:	d10c      	bne.n	80041d4 <HAL_RCC_OscConfig+0x98>
 80041ba:	4b70      	ldr	r3, [pc, #448]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	4a6f      	ldr	r2, [pc, #444]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80041c4:	6013      	str	r3, [r2, #0]
 80041c6:	4b6d      	ldr	r3, [pc, #436]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	4a6c      	ldr	r2, [pc, #432]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80041d0:	6013      	str	r3, [r2, #0]
 80041d2:	e00b      	b.n	80041ec <HAL_RCC_OscConfig+0xb0>
 80041d4:	4b69      	ldr	r3, [pc, #420]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	4a68      	ldr	r2, [pc, #416]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80041de:	6013      	str	r3, [r2, #0]
 80041e0:	4b66      	ldr	r3, [pc, #408]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a65      	ldr	r2, [pc, #404]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80041e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80041ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d013      	beq.n	800421c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041f4:	f7fd fa22 	bl	800163c <HAL_GetTick>
 80041f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041fa:	e008      	b.n	800420e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041fc:	f7fd fa1e 	bl	800163c <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	693b      	ldr	r3, [r7, #16]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	2b64      	cmp	r3, #100	@ 0x64
 8004208:	d901      	bls.n	800420e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800420a:	2303      	movs	r3, #3
 800420c:	e207      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800420e:	4b5b      	ldr	r3, [pc, #364]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004216:	2b00      	cmp	r3, #0
 8004218:	d0f0      	beq.n	80041fc <HAL_RCC_OscConfig+0xc0>
 800421a:	e014      	b.n	8004246 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800421c:	f7fd fa0e 	bl	800163c <HAL_GetTick>
 8004220:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004222:	e008      	b.n	8004236 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004224:	f7fd fa0a 	bl	800163c <HAL_GetTick>
 8004228:	4602      	mov	r2, r0
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	1ad3      	subs	r3, r2, r3
 800422e:	2b64      	cmp	r3, #100	@ 0x64
 8004230:	d901      	bls.n	8004236 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e1f3      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004236:	4b51      	ldr	r3, [pc, #324]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f0      	bne.n	8004224 <HAL_RCC_OscConfig+0xe8>
 8004242:	e000      	b.n	8004246 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004244:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	f003 0302 	and.w	r3, r3, #2
 800424e:	2b00      	cmp	r3, #0
 8004250:	d063      	beq.n	800431a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004252:	4b4a      	ldr	r3, [pc, #296]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004254:	689b      	ldr	r3, [r3, #8]
 8004256:	f003 030c 	and.w	r3, r3, #12
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00b      	beq.n	8004276 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800425e:	4b47      	ldr	r3, [pc, #284]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004266:	2b08      	cmp	r3, #8
 8004268:	d11c      	bne.n	80042a4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800426a:	4b44      	ldr	r3, [pc, #272]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d116      	bne.n	80042a4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004276:	4b41      	ldr	r3, [pc, #260]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0302 	and.w	r3, r3, #2
 800427e:	2b00      	cmp	r3, #0
 8004280:	d005      	beq.n	800428e <HAL_RCC_OscConfig+0x152>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68db      	ldr	r3, [r3, #12]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d001      	beq.n	800428e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800428a:	2301      	movs	r3, #1
 800428c:	e1c7      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800428e:	4b3b      	ldr	r3, [pc, #236]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	691b      	ldr	r3, [r3, #16]
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	4937      	ldr	r1, [pc, #220]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 800429e:	4313      	orrs	r3, r2
 80042a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80042a2:	e03a      	b.n	800431a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	68db      	ldr	r3, [r3, #12]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d020      	beq.n	80042ee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80042ac:	4b34      	ldr	r3, [pc, #208]	@ (8004380 <HAL_RCC_OscConfig+0x244>)
 80042ae:	2201      	movs	r2, #1
 80042b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042b2:	f7fd f9c3 	bl	800163c <HAL_GetTick>
 80042b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042b8:	e008      	b.n	80042cc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042ba:	f7fd f9bf 	bl	800163c <HAL_GetTick>
 80042be:	4602      	mov	r2, r0
 80042c0:	693b      	ldr	r3, [r7, #16]
 80042c2:	1ad3      	subs	r3, r2, r3
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e1a8      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042cc:	4b2b      	ldr	r3, [pc, #172]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d0f0      	beq.n	80042ba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80042d8:	4b28      	ldr	r3, [pc, #160]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	00db      	lsls	r3, r3, #3
 80042e6:	4925      	ldr	r1, [pc, #148]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	600b      	str	r3, [r1, #0]
 80042ec:	e015      	b.n	800431a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80042ee:	4b24      	ldr	r3, [pc, #144]	@ (8004380 <HAL_RCC_OscConfig+0x244>)
 80042f0:	2200      	movs	r2, #0
 80042f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042f4:	f7fd f9a2 	bl	800163c <HAL_GetTick>
 80042f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042fa:	e008      	b.n	800430e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80042fc:	f7fd f99e 	bl	800163c <HAL_GetTick>
 8004300:	4602      	mov	r2, r0
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	1ad3      	subs	r3, r2, r3
 8004306:	2b02      	cmp	r3, #2
 8004308:	d901      	bls.n	800430e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800430a:	2303      	movs	r3, #3
 800430c:	e187      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800430e:	4b1b      	ldr	r3, [pc, #108]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f003 0302 	and.w	r3, r3, #2
 8004316:	2b00      	cmp	r3, #0
 8004318:	d1f0      	bne.n	80042fc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d036      	beq.n	8004394 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	695b      	ldr	r3, [r3, #20]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d016      	beq.n	800435c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800432e:	4b15      	ldr	r3, [pc, #84]	@ (8004384 <HAL_RCC_OscConfig+0x248>)
 8004330:	2201      	movs	r2, #1
 8004332:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004334:	f7fd f982 	bl	800163c <HAL_GetTick>
 8004338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800433a:	e008      	b.n	800434e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800433c:	f7fd f97e 	bl	800163c <HAL_GetTick>
 8004340:	4602      	mov	r2, r0
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	1ad3      	subs	r3, r2, r3
 8004346:	2b02      	cmp	r3, #2
 8004348:	d901      	bls.n	800434e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800434a:	2303      	movs	r3, #3
 800434c:	e167      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800434e:	4b0b      	ldr	r3, [pc, #44]	@ (800437c <HAL_RCC_OscConfig+0x240>)
 8004350:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d0f0      	beq.n	800433c <HAL_RCC_OscConfig+0x200>
 800435a:	e01b      	b.n	8004394 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800435c:	4b09      	ldr	r3, [pc, #36]	@ (8004384 <HAL_RCC_OscConfig+0x248>)
 800435e:	2200      	movs	r2, #0
 8004360:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004362:	f7fd f96b 	bl	800163c <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004368:	e00e      	b.n	8004388 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800436a:	f7fd f967 	bl	800163c <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d907      	bls.n	8004388 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e150      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
 800437c:	40023800 	.word	0x40023800
 8004380:	42470000 	.word	0x42470000
 8004384:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004388:	4b88      	ldr	r3, [pc, #544]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 800438a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800438c:	f003 0302 	and.w	r3, r3, #2
 8004390:	2b00      	cmp	r3, #0
 8004392:	d1ea      	bne.n	800436a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f003 0304 	and.w	r3, r3, #4
 800439c:	2b00      	cmp	r3, #0
 800439e:	f000 8097 	beq.w	80044d0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80043a2:	2300      	movs	r3, #0
 80043a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80043a6:	4b81      	ldr	r3, [pc, #516]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80043a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d10f      	bne.n	80043d2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80043b2:	2300      	movs	r3, #0
 80043b4:	60bb      	str	r3, [r7, #8]
 80043b6:	4b7d      	ldr	r3, [pc, #500]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80043b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043ba:	4a7c      	ldr	r2, [pc, #496]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80043bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80043c2:	4b7a      	ldr	r3, [pc, #488]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80043c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80043ca:	60bb      	str	r3, [r7, #8]
 80043cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80043ce:	2301      	movs	r3, #1
 80043d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043d2:	4b77      	ldr	r3, [pc, #476]	@ (80045b0 <HAL_RCC_OscConfig+0x474>)
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d118      	bne.n	8004410 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80043de:	4b74      	ldr	r3, [pc, #464]	@ (80045b0 <HAL_RCC_OscConfig+0x474>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4a73      	ldr	r2, [pc, #460]	@ (80045b0 <HAL_RCC_OscConfig+0x474>)
 80043e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80043e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80043ea:	f7fd f927 	bl	800163c <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80043f2:	f7fd f923 	bl	800163c <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e10c      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004404:	4b6a      	ldr	r3, [pc, #424]	@ (80045b0 <HAL_RCC_OscConfig+0x474>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800440c:	2b00      	cmp	r3, #0
 800440e:	d0f0      	beq.n	80043f2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d106      	bne.n	8004426 <HAL_RCC_OscConfig+0x2ea>
 8004418:	4b64      	ldr	r3, [pc, #400]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 800441a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800441c:	4a63      	ldr	r2, [pc, #396]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 800441e:	f043 0301 	orr.w	r3, r3, #1
 8004422:	6713      	str	r3, [r2, #112]	@ 0x70
 8004424:	e01c      	b.n	8004460 <HAL_RCC_OscConfig+0x324>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	2b05      	cmp	r3, #5
 800442c:	d10c      	bne.n	8004448 <HAL_RCC_OscConfig+0x30c>
 800442e:	4b5f      	ldr	r3, [pc, #380]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004430:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004432:	4a5e      	ldr	r2, [pc, #376]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004434:	f043 0304 	orr.w	r3, r3, #4
 8004438:	6713      	str	r3, [r2, #112]	@ 0x70
 800443a:	4b5c      	ldr	r3, [pc, #368]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 800443c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800443e:	4a5b      	ldr	r2, [pc, #364]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004440:	f043 0301 	orr.w	r3, r3, #1
 8004444:	6713      	str	r3, [r2, #112]	@ 0x70
 8004446:	e00b      	b.n	8004460 <HAL_RCC_OscConfig+0x324>
 8004448:	4b58      	ldr	r3, [pc, #352]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 800444a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800444c:	4a57      	ldr	r2, [pc, #348]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 800444e:	f023 0301 	bic.w	r3, r3, #1
 8004452:	6713      	str	r3, [r2, #112]	@ 0x70
 8004454:	4b55      	ldr	r3, [pc, #340]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004456:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004458:	4a54      	ldr	r2, [pc, #336]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 800445a:	f023 0304 	bic.w	r3, r3, #4
 800445e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d015      	beq.n	8004494 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004468:	f7fd f8e8 	bl	800163c <HAL_GetTick>
 800446c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800446e:	e00a      	b.n	8004486 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004470:	f7fd f8e4 	bl	800163c <HAL_GetTick>
 8004474:	4602      	mov	r2, r0
 8004476:	693b      	ldr	r3, [r7, #16]
 8004478:	1ad3      	subs	r3, r2, r3
 800447a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800447e:	4293      	cmp	r3, r2
 8004480:	d901      	bls.n	8004486 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004482:	2303      	movs	r3, #3
 8004484:	e0cb      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004486:	4b49      	ldr	r3, [pc, #292]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004488:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800448a:	f003 0302 	and.w	r3, r3, #2
 800448e:	2b00      	cmp	r3, #0
 8004490:	d0ee      	beq.n	8004470 <HAL_RCC_OscConfig+0x334>
 8004492:	e014      	b.n	80044be <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004494:	f7fd f8d2 	bl	800163c <HAL_GetTick>
 8004498:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800449a:	e00a      	b.n	80044b2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800449c:	f7fd f8ce 	bl	800163c <HAL_GetTick>
 80044a0:	4602      	mov	r2, r0
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	1ad3      	subs	r3, r2, r3
 80044a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d901      	bls.n	80044b2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80044ae:	2303      	movs	r3, #3
 80044b0:	e0b5      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80044b2:	4b3e      	ldr	r3, [pc, #248]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80044b4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80044b6:	f003 0302 	and.w	r3, r3, #2
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1ee      	bne.n	800449c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80044be:	7dfb      	ldrb	r3, [r7, #23]
 80044c0:	2b01      	cmp	r3, #1
 80044c2:	d105      	bne.n	80044d0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80044c4:	4b39      	ldr	r3, [pc, #228]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80044c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044c8:	4a38      	ldr	r2, [pc, #224]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80044ca:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80044ce:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	699b      	ldr	r3, [r3, #24]
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80a1 	beq.w	800461c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80044da:	4b34      	ldr	r3, [pc, #208]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	f003 030c 	and.w	r3, r3, #12
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d05c      	beq.n	80045a0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d141      	bne.n	8004572 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80044ee:	4b31      	ldr	r3, [pc, #196]	@ (80045b4 <HAL_RCC_OscConfig+0x478>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f4:	f7fd f8a2 	bl	800163c <HAL_GetTick>
 80044f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044fa:	e008      	b.n	800450e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044fc:	f7fd f89e 	bl	800163c <HAL_GetTick>
 8004500:	4602      	mov	r2, r0
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	1ad3      	subs	r3, r2, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d901      	bls.n	800450e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800450a:	2303      	movs	r3, #3
 800450c:	e087      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800450e:	4b27      	ldr	r3, [pc, #156]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d1f0      	bne.n	80044fc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	69da      	ldr	r2, [r3, #28]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6a1b      	ldr	r3, [r3, #32]
 8004522:	431a      	orrs	r2, r3
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004528:	019b      	lsls	r3, r3, #6
 800452a:	431a      	orrs	r2, r3
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004530:	085b      	lsrs	r3, r3, #1
 8004532:	3b01      	subs	r3, #1
 8004534:	041b      	lsls	r3, r3, #16
 8004536:	431a      	orrs	r2, r3
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453c:	061b      	lsls	r3, r3, #24
 800453e:	491b      	ldr	r1, [pc, #108]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004540:	4313      	orrs	r3, r2
 8004542:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004544:	4b1b      	ldr	r3, [pc, #108]	@ (80045b4 <HAL_RCC_OscConfig+0x478>)
 8004546:	2201      	movs	r2, #1
 8004548:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454a:	f7fd f877 	bl	800163c <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004550:	e008      	b.n	8004564 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004552:	f7fd f873 	bl	800163c <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d901      	bls.n	8004564 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e05c      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004564:	4b11      	ldr	r3, [pc, #68]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800456c:	2b00      	cmp	r3, #0
 800456e:	d0f0      	beq.n	8004552 <HAL_RCC_OscConfig+0x416>
 8004570:	e054      	b.n	800461c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004572:	4b10      	ldr	r3, [pc, #64]	@ (80045b4 <HAL_RCC_OscConfig+0x478>)
 8004574:	2200      	movs	r2, #0
 8004576:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004578:	f7fd f860 	bl	800163c <HAL_GetTick>
 800457c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800457e:	e008      	b.n	8004592 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004580:	f7fd f85c 	bl	800163c <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	693b      	ldr	r3, [r7, #16]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	2b02      	cmp	r3, #2
 800458c:	d901      	bls.n	8004592 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800458e:	2303      	movs	r3, #3
 8004590:	e045      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004592:	4b06      	ldr	r3, [pc, #24]	@ (80045ac <HAL_RCC_OscConfig+0x470>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800459a:	2b00      	cmp	r3, #0
 800459c:	d1f0      	bne.n	8004580 <HAL_RCC_OscConfig+0x444>
 800459e:	e03d      	b.n	800461c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	699b      	ldr	r3, [r3, #24]
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d107      	bne.n	80045b8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e038      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
 80045ac:	40023800 	.word	0x40023800
 80045b0:	40007000 	.word	0x40007000
 80045b4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80045b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004628 <HAL_RCC_OscConfig+0x4ec>)
 80045ba:	685b      	ldr	r3, [r3, #4]
 80045bc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	2b01      	cmp	r3, #1
 80045c4:	d028      	beq.n	8004618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80045d0:	429a      	cmp	r2, r3
 80045d2:	d121      	bne.n	8004618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80045de:	429a      	cmp	r2, r3
 80045e0:	d11a      	bne.n	8004618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80045e8:	4013      	ands	r3, r2
 80045ea:	687a      	ldr	r2, [r7, #4]
 80045ec:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80045ee:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d111      	bne.n	8004618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045fe:	085b      	lsrs	r3, r3, #1
 8004600:	3b01      	subs	r3, #1
 8004602:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004604:	429a      	cmp	r2, r3
 8004606:	d107      	bne.n	8004618 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004612:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004614:	429a      	cmp	r2, r3
 8004616:	d001      	beq.n	800461c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e000      	b.n	800461e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3718      	adds	r7, #24
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	40023800 	.word	0x40023800

0800462c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800462c:	b580      	push	{r7, lr}
 800462e:	b084      	sub	sp, #16
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
 8004634:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d101      	bne.n	8004640 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800463c:	2301      	movs	r3, #1
 800463e:	e0cc      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004640:	4b68      	ldr	r3, [pc, #416]	@ (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	f003 0307 	and.w	r3, r3, #7
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	429a      	cmp	r2, r3
 800464c:	d90c      	bls.n	8004668 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800464e:	4b65      	ldr	r3, [pc, #404]	@ (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004650:	683a      	ldr	r2, [r7, #0]
 8004652:	b2d2      	uxtb	r2, r2
 8004654:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004656:	4b63      	ldr	r3, [pc, #396]	@ (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0307 	and.w	r3, r3, #7
 800465e:	683a      	ldr	r2, [r7, #0]
 8004660:	429a      	cmp	r2, r3
 8004662:	d001      	beq.n	8004668 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004664:	2301      	movs	r3, #1
 8004666:	e0b8      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f003 0302 	and.w	r3, r3, #2
 8004670:	2b00      	cmp	r3, #0
 8004672:	d020      	beq.n	80046b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f003 0304 	and.w	r3, r3, #4
 800467c:	2b00      	cmp	r3, #0
 800467e:	d005      	beq.n	800468c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004680:	4b59      	ldr	r3, [pc, #356]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	4a58      	ldr	r2, [pc, #352]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800468a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f003 0308 	and.w	r3, r3, #8
 8004694:	2b00      	cmp	r3, #0
 8004696:	d005      	beq.n	80046a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004698:	4b53      	ldr	r3, [pc, #332]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 800469a:	689b      	ldr	r3, [r3, #8]
 800469c:	4a52      	ldr	r2, [pc, #328]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80046a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80046a4:	4b50      	ldr	r3, [pc, #320]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046a6:	689b      	ldr	r3, [r3, #8]
 80046a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	689b      	ldr	r3, [r3, #8]
 80046b0:	494d      	ldr	r1, [pc, #308]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046b2:	4313      	orrs	r3, r2
 80046b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d044      	beq.n	800474c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	685b      	ldr	r3, [r3, #4]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d107      	bne.n	80046da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ca:	4b47      	ldr	r3, [pc, #284]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d119      	bne.n	800470a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e07f      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	2b02      	cmp	r3, #2
 80046e0:	d003      	beq.n	80046ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80046e6:	2b03      	cmp	r3, #3
 80046e8:	d107      	bne.n	80046fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80046ea:	4b3f      	ldr	r3, [pc, #252]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d109      	bne.n	800470a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e06f      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80046fa:	4b3b      	ldr	r3, [pc, #236]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0302 	and.w	r3, r3, #2
 8004702:	2b00      	cmp	r3, #0
 8004704:	d101      	bne.n	800470a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	e067      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800470a:	4b37      	ldr	r3, [pc, #220]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 800470c:	689b      	ldr	r3, [r3, #8]
 800470e:	f023 0203 	bic.w	r2, r3, #3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	685b      	ldr	r3, [r3, #4]
 8004716:	4934      	ldr	r1, [pc, #208]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004718:	4313      	orrs	r3, r2
 800471a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800471c:	f7fc ff8e 	bl	800163c <HAL_GetTick>
 8004720:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004722:	e00a      	b.n	800473a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004724:	f7fc ff8a 	bl	800163c <HAL_GetTick>
 8004728:	4602      	mov	r2, r0
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	1ad3      	subs	r3, r2, r3
 800472e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004732:	4293      	cmp	r3, r2
 8004734:	d901      	bls.n	800473a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004736:	2303      	movs	r3, #3
 8004738:	e04f      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800473a:	4b2b      	ldr	r3, [pc, #172]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 800473c:	689b      	ldr	r3, [r3, #8]
 800473e:	f003 020c 	and.w	r2, r3, #12
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	429a      	cmp	r2, r3
 800474a:	d1eb      	bne.n	8004724 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800474c:	4b25      	ldr	r3, [pc, #148]	@ (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0307 	and.w	r3, r3, #7
 8004754:	683a      	ldr	r2, [r7, #0]
 8004756:	429a      	cmp	r2, r3
 8004758:	d20c      	bcs.n	8004774 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800475a:	4b22      	ldr	r3, [pc, #136]	@ (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 800475c:	683a      	ldr	r2, [r7, #0]
 800475e:	b2d2      	uxtb	r2, r2
 8004760:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004762:	4b20      	ldr	r3, [pc, #128]	@ (80047e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	f003 0307 	and.w	r3, r3, #7
 800476a:	683a      	ldr	r2, [r7, #0]
 800476c:	429a      	cmp	r2, r3
 800476e:	d001      	beq.n	8004774 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e032      	b.n	80047da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f003 0304 	and.w	r3, r3, #4
 800477c:	2b00      	cmp	r3, #0
 800477e:	d008      	beq.n	8004792 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004780:	4b19      	ldr	r3, [pc, #100]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	4916      	ldr	r1, [pc, #88]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 800478e:	4313      	orrs	r3, r2
 8004790:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 0308 	and.w	r3, r3, #8
 800479a:	2b00      	cmp	r3, #0
 800479c:	d009      	beq.n	80047b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800479e:	4b12      	ldr	r3, [pc, #72]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	691b      	ldr	r3, [r3, #16]
 80047aa:	00db      	lsls	r3, r3, #3
 80047ac:	490e      	ldr	r1, [pc, #56]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80047ae:	4313      	orrs	r3, r2
 80047b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80047b2:	f000 f821 	bl	80047f8 <HAL_RCC_GetSysClockFreq>
 80047b6:	4602      	mov	r2, r0
 80047b8:	4b0b      	ldr	r3, [pc, #44]	@ (80047e8 <HAL_RCC_ClockConfig+0x1bc>)
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	091b      	lsrs	r3, r3, #4
 80047be:	f003 030f 	and.w	r3, r3, #15
 80047c2:	490a      	ldr	r1, [pc, #40]	@ (80047ec <HAL_RCC_ClockConfig+0x1c0>)
 80047c4:	5ccb      	ldrb	r3, [r1, r3]
 80047c6:	fa22 f303 	lsr.w	r3, r2, r3
 80047ca:	4a09      	ldr	r2, [pc, #36]	@ (80047f0 <HAL_RCC_ClockConfig+0x1c4>)
 80047cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80047ce:	4b09      	ldr	r3, [pc, #36]	@ (80047f4 <HAL_RCC_ClockConfig+0x1c8>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fc feee 	bl	80015b4 <HAL_InitTick>

  return HAL_OK;
 80047d8:	2300      	movs	r3, #0
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3710      	adds	r7, #16
 80047de:	46bd      	mov	sp, r7
 80047e0:	bd80      	pop	{r7, pc}
 80047e2:	bf00      	nop
 80047e4:	40023c00 	.word	0x40023c00
 80047e8:	40023800 	.word	0x40023800
 80047ec:	08009d24 	.word	0x08009d24
 80047f0:	20000080 	.word	0x20000080
 80047f4:	20000084 	.word	0x20000084

080047f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80047f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80047fc:	b090      	sub	sp, #64	@ 0x40
 80047fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004800:	2300      	movs	r3, #0
 8004802:	637b      	str	r3, [r7, #52]	@ 0x34
 8004804:	2300      	movs	r3, #0
 8004806:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004808:	2300      	movs	r3, #0
 800480a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800480c:	2300      	movs	r3, #0
 800480e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004810:	4b59      	ldr	r3, [pc, #356]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x180>)
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 030c 	and.w	r3, r3, #12
 8004818:	2b08      	cmp	r3, #8
 800481a:	d00d      	beq.n	8004838 <HAL_RCC_GetSysClockFreq+0x40>
 800481c:	2b08      	cmp	r3, #8
 800481e:	f200 80a1 	bhi.w	8004964 <HAL_RCC_GetSysClockFreq+0x16c>
 8004822:	2b00      	cmp	r3, #0
 8004824:	d002      	beq.n	800482c <HAL_RCC_GetSysClockFreq+0x34>
 8004826:	2b04      	cmp	r3, #4
 8004828:	d003      	beq.n	8004832 <HAL_RCC_GetSysClockFreq+0x3a>
 800482a:	e09b      	b.n	8004964 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800482c:	4b53      	ldr	r3, [pc, #332]	@ (800497c <HAL_RCC_GetSysClockFreq+0x184>)
 800482e:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004830:	e09b      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004832:	4b53      	ldr	r3, [pc, #332]	@ (8004980 <HAL_RCC_GetSysClockFreq+0x188>)
 8004834:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004836:	e098      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004838:	4b4f      	ldr	r3, [pc, #316]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x180>)
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004840:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004842:	4b4d      	ldr	r3, [pc, #308]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x180>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800484a:	2b00      	cmp	r3, #0
 800484c:	d028      	beq.n	80048a0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800484e:	4b4a      	ldr	r3, [pc, #296]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x180>)
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	099b      	lsrs	r3, r3, #6
 8004854:	2200      	movs	r2, #0
 8004856:	623b      	str	r3, [r7, #32]
 8004858:	627a      	str	r2, [r7, #36]	@ 0x24
 800485a:	6a3b      	ldr	r3, [r7, #32]
 800485c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004860:	2100      	movs	r1, #0
 8004862:	4b47      	ldr	r3, [pc, #284]	@ (8004980 <HAL_RCC_GetSysClockFreq+0x188>)
 8004864:	fb03 f201 	mul.w	r2, r3, r1
 8004868:	2300      	movs	r3, #0
 800486a:	fb00 f303 	mul.w	r3, r0, r3
 800486e:	4413      	add	r3, r2
 8004870:	4a43      	ldr	r2, [pc, #268]	@ (8004980 <HAL_RCC_GetSysClockFreq+0x188>)
 8004872:	fba0 1202 	umull	r1, r2, r0, r2
 8004876:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004878:	460a      	mov	r2, r1
 800487a:	62ba      	str	r2, [r7, #40]	@ 0x28
 800487c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800487e:	4413      	add	r3, r2
 8004880:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004882:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004884:	2200      	movs	r2, #0
 8004886:	61bb      	str	r3, [r7, #24]
 8004888:	61fa      	str	r2, [r7, #28]
 800488a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800488e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004892:	f7fb fcf5 	bl	8000280 <__aeabi_uldivmod>
 8004896:	4602      	mov	r2, r0
 8004898:	460b      	mov	r3, r1
 800489a:	4613      	mov	r3, r2
 800489c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800489e:	e053      	b.n	8004948 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048a0:	4b35      	ldr	r3, [pc, #212]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x180>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	099b      	lsrs	r3, r3, #6
 80048a6:	2200      	movs	r2, #0
 80048a8:	613b      	str	r3, [r7, #16]
 80048aa:	617a      	str	r2, [r7, #20]
 80048ac:	693b      	ldr	r3, [r7, #16]
 80048ae:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80048b2:	f04f 0b00 	mov.w	fp, #0
 80048b6:	4652      	mov	r2, sl
 80048b8:	465b      	mov	r3, fp
 80048ba:	f04f 0000 	mov.w	r0, #0
 80048be:	f04f 0100 	mov.w	r1, #0
 80048c2:	0159      	lsls	r1, r3, #5
 80048c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80048c8:	0150      	lsls	r0, r2, #5
 80048ca:	4602      	mov	r2, r0
 80048cc:	460b      	mov	r3, r1
 80048ce:	ebb2 080a 	subs.w	r8, r2, sl
 80048d2:	eb63 090b 	sbc.w	r9, r3, fp
 80048d6:	f04f 0200 	mov.w	r2, #0
 80048da:	f04f 0300 	mov.w	r3, #0
 80048de:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80048e2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80048e6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80048ea:	ebb2 0408 	subs.w	r4, r2, r8
 80048ee:	eb63 0509 	sbc.w	r5, r3, r9
 80048f2:	f04f 0200 	mov.w	r2, #0
 80048f6:	f04f 0300 	mov.w	r3, #0
 80048fa:	00eb      	lsls	r3, r5, #3
 80048fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004900:	00e2      	lsls	r2, r4, #3
 8004902:	4614      	mov	r4, r2
 8004904:	461d      	mov	r5, r3
 8004906:	eb14 030a 	adds.w	r3, r4, sl
 800490a:	603b      	str	r3, [r7, #0]
 800490c:	eb45 030b 	adc.w	r3, r5, fp
 8004910:	607b      	str	r3, [r7, #4]
 8004912:	f04f 0200 	mov.w	r2, #0
 8004916:	f04f 0300 	mov.w	r3, #0
 800491a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800491e:	4629      	mov	r1, r5
 8004920:	028b      	lsls	r3, r1, #10
 8004922:	4621      	mov	r1, r4
 8004924:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004928:	4621      	mov	r1, r4
 800492a:	028a      	lsls	r2, r1, #10
 800492c:	4610      	mov	r0, r2
 800492e:	4619      	mov	r1, r3
 8004930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004932:	2200      	movs	r2, #0
 8004934:	60bb      	str	r3, [r7, #8]
 8004936:	60fa      	str	r2, [r7, #12]
 8004938:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800493c:	f7fb fca0 	bl	8000280 <__aeabi_uldivmod>
 8004940:	4602      	mov	r2, r0
 8004942:	460b      	mov	r3, r1
 8004944:	4613      	mov	r3, r2
 8004946:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004948:	4b0b      	ldr	r3, [pc, #44]	@ (8004978 <HAL_RCC_GetSysClockFreq+0x180>)
 800494a:	685b      	ldr	r3, [r3, #4]
 800494c:	0c1b      	lsrs	r3, r3, #16
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	3301      	adds	r3, #1
 8004954:	005b      	lsls	r3, r3, #1
 8004956:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004958:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800495a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800495c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004960:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004962:	e002      	b.n	800496a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004964:	4b05      	ldr	r3, [pc, #20]	@ (800497c <HAL_RCC_GetSysClockFreq+0x184>)
 8004966:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004968:	bf00      	nop
    }
  }
  return sysclockfreq;
 800496a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800496c:	4618      	mov	r0, r3
 800496e:	3740      	adds	r7, #64	@ 0x40
 8004970:	46bd      	mov	sp, r7
 8004972:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004976:	bf00      	nop
 8004978:	40023800 	.word	0x40023800
 800497c:	00f42400 	.word	0x00f42400
 8004980:	017d7840 	.word	0x017d7840

08004984 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004984:	b480      	push	{r7}
 8004986:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004988:	4b03      	ldr	r3, [pc, #12]	@ (8004998 <HAL_RCC_GetHCLKFreq+0x14>)
 800498a:	681b      	ldr	r3, [r3, #0]
}
 800498c:	4618      	mov	r0, r3
 800498e:	46bd      	mov	sp, r7
 8004990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	20000080 	.word	0x20000080

0800499c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80049a0:	f7ff fff0 	bl	8004984 <HAL_RCC_GetHCLKFreq>
 80049a4:	4602      	mov	r2, r0
 80049a6:	4b05      	ldr	r3, [pc, #20]	@ (80049bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	0a9b      	lsrs	r3, r3, #10
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	4903      	ldr	r1, [pc, #12]	@ (80049c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80049b2:	5ccb      	ldrb	r3, [r1, r3]
 80049b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40023800 	.word	0x40023800
 80049c0:	08009d34 	.word	0x08009d34

080049c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b086      	sub	sp, #24
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d101      	bne.n	80049d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80049d4:	2301      	movs	r3, #1
 80049d6:	e097      	b.n	8004b08 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d106      	bne.n	80049f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80049ec:	6878      	ldr	r0, [r7, #4]
 80049ee:	f7fc fcad 	bl	800134c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2202      	movs	r2, #2
 80049f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	6812      	ldr	r2, [r2, #0]
 8004a04:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004a08:	f023 0307 	bic.w	r3, r3, #7
 8004a0c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	3304      	adds	r3, #4
 8004a16:	4619      	mov	r1, r3
 8004a18:	4610      	mov	r0, r2
 8004a1a:	f000 f907 	bl	8004c2c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	699b      	ldr	r3, [r3, #24]
 8004a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6a1b      	ldr	r3, [r3, #32]
 8004a34:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004a46:	f023 0303 	bic.w	r3, r3, #3
 8004a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	689a      	ldr	r2, [r3, #8]
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	699b      	ldr	r3, [r3, #24]
 8004a54:	021b      	lsls	r3, r3, #8
 8004a56:	4313      	orrs	r3, r2
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	4313      	orrs	r3, r2
 8004a5c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004a5e:	693b      	ldr	r3, [r7, #16]
 8004a60:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8004a64:	f023 030c 	bic.w	r3, r3, #12
 8004a68:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004a6a:	693b      	ldr	r3, [r7, #16]
 8004a6c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004a70:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004a74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68da      	ldr	r2, [r3, #12]
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	69db      	ldr	r3, [r3, #28]
 8004a7e:	021b      	lsls	r3, r3, #8
 8004a80:	4313      	orrs	r3, r2
 8004a82:	693a      	ldr	r2, [r7, #16]
 8004a84:	4313      	orrs	r3, r2
 8004a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004a88:	683b      	ldr	r3, [r7, #0]
 8004a8a:	691b      	ldr	r3, [r3, #16]
 8004a8c:	011a      	lsls	r2, r3, #4
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	6a1b      	ldr	r3, [r3, #32]
 8004a92:	031b      	lsls	r3, r3, #12
 8004a94:	4313      	orrs	r3, r2
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004aa2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004aaa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685a      	ldr	r2, [r3, #4]
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	695b      	ldr	r3, [r3, #20]
 8004ab4:	011b      	lsls	r3, r3, #4
 8004ab6:	4313      	orrs	r3, r2
 8004ab8:	68fa      	ldr	r2, [r7, #12]
 8004aba:	4313      	orrs	r3, r2
 8004abc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	693a      	ldr	r2, [r7, #16]
 8004acc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	68fa      	ldr	r2, [r7, #12]
 8004ad4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2201      	movs	r2, #1
 8004ada:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2201      	movs	r2, #1
 8004aea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2201      	movs	r2, #1
 8004af2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	2201      	movs	r2, #1
 8004afa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004b06:	2300      	movs	r3, #0
}
 8004b08:	4618      	mov	r0, r3
 8004b0a:	3718      	adds	r7, #24
 8004b0c:	46bd      	mov	sp, r7
 8004b0e:	bd80      	pop	{r7, pc}

08004b10 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b084      	sub	sp, #16
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
 8004b18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004b20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004b28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004b30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004b38:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d110      	bne.n	8004b62 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b40:	7bfb      	ldrb	r3, [r7, #15]
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d102      	bne.n	8004b4c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b46:	7b7b      	ldrb	r3, [r7, #13]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d001      	beq.n	8004b50 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004b4c:	2301      	movs	r3, #1
 8004b4e:	e069      	b.n	8004c24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2202      	movs	r2, #2
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004b60:	e031      	b.n	8004bc6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d110      	bne.n	8004b8a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b68:	7bbb      	ldrb	r3, [r7, #14]
 8004b6a:	2b01      	cmp	r3, #1
 8004b6c:	d102      	bne.n	8004b74 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b6e:	7b3b      	ldrb	r3, [r7, #12]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d001      	beq.n	8004b78 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	e055      	b.n	8004c24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2202      	movs	r2, #2
 8004b7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2202      	movs	r2, #2
 8004b84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004b88:	e01d      	b.n	8004bc6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b8a:	7bfb      	ldrb	r3, [r7, #15]
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	d108      	bne.n	8004ba2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b90:	7bbb      	ldrb	r3, [r7, #14]
 8004b92:	2b01      	cmp	r3, #1
 8004b94:	d105      	bne.n	8004ba2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004b96:	7b7b      	ldrb	r3, [r7, #13]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d102      	bne.n	8004ba2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004b9c:	7b3b      	ldrb	r3, [r7, #12]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d001      	beq.n	8004ba6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004ba2:	2301      	movs	r3, #1
 8004ba4:	e03e      	b.n	8004c24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2202      	movs	r2, #2
 8004baa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2202      	movs	r2, #2
 8004bb2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2202      	movs	r2, #2
 8004bba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2202      	movs	r2, #2
 8004bc2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d003      	beq.n	8004bd4 <HAL_TIM_Encoder_Start+0xc4>
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	2b04      	cmp	r3, #4
 8004bd0:	d008      	beq.n	8004be4 <HAL_TIM_Encoder_Start+0xd4>
 8004bd2:	e00f      	b.n	8004bf4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2201      	movs	r2, #1
 8004bda:	2100      	movs	r1, #0
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 f8a5 	bl	8004d2c <TIM_CCxChannelCmd>
      break;
 8004be2:	e016      	b.n	8004c12 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2201      	movs	r2, #1
 8004bea:	2104      	movs	r1, #4
 8004bec:	4618      	mov	r0, r3
 8004bee:	f000 f89d 	bl	8004d2c <TIM_CCxChannelCmd>
      break;
 8004bf2:	e00e      	b.n	8004c12 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	2100      	movs	r1, #0
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 f895 	bl	8004d2c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	2201      	movs	r2, #1
 8004c08:	2104      	movs	r1, #4
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 f88e 	bl	8004d2c <TIM_CCxChannelCmd>
      break;
 8004c10:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	681a      	ldr	r2, [r3, #0]
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f042 0201 	orr.w	r2, r2, #1
 8004c20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}

08004c2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c2c:	b480      	push	{r7}
 8004c2e:	b085      	sub	sp, #20
 8004c30:	af00      	add	r7, sp, #0
 8004c32:	6078      	str	r0, [r7, #4]
 8004c34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	4a34      	ldr	r2, [pc, #208]	@ (8004d10 <TIM_Base_SetConfig+0xe4>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00f      	beq.n	8004c64 <TIM_Base_SetConfig+0x38>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c4a:	d00b      	beq.n	8004c64 <TIM_Base_SetConfig+0x38>
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	4a31      	ldr	r2, [pc, #196]	@ (8004d14 <TIM_Base_SetConfig+0xe8>)
 8004c50:	4293      	cmp	r3, r2
 8004c52:	d007      	beq.n	8004c64 <TIM_Base_SetConfig+0x38>
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	4a30      	ldr	r2, [pc, #192]	@ (8004d18 <TIM_Base_SetConfig+0xec>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d003      	beq.n	8004c64 <TIM_Base_SetConfig+0x38>
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	4a2f      	ldr	r2, [pc, #188]	@ (8004d1c <TIM_Base_SetConfig+0xf0>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d108      	bne.n	8004c76 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c6c:	683b      	ldr	r3, [r7, #0]
 8004c6e:	685b      	ldr	r3, [r3, #4]
 8004c70:	68fa      	ldr	r2, [r7, #12]
 8004c72:	4313      	orrs	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4a25      	ldr	r2, [pc, #148]	@ (8004d10 <TIM_Base_SetConfig+0xe4>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d01b      	beq.n	8004cb6 <TIM_Base_SetConfig+0x8a>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c84:	d017      	beq.n	8004cb6 <TIM_Base_SetConfig+0x8a>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	4a22      	ldr	r2, [pc, #136]	@ (8004d14 <TIM_Base_SetConfig+0xe8>)
 8004c8a:	4293      	cmp	r3, r2
 8004c8c:	d013      	beq.n	8004cb6 <TIM_Base_SetConfig+0x8a>
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4a21      	ldr	r2, [pc, #132]	@ (8004d18 <TIM_Base_SetConfig+0xec>)
 8004c92:	4293      	cmp	r3, r2
 8004c94:	d00f      	beq.n	8004cb6 <TIM_Base_SetConfig+0x8a>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a20      	ldr	r2, [pc, #128]	@ (8004d1c <TIM_Base_SetConfig+0xf0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00b      	beq.n	8004cb6 <TIM_Base_SetConfig+0x8a>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a1f      	ldr	r2, [pc, #124]	@ (8004d20 <TIM_Base_SetConfig+0xf4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d007      	beq.n	8004cb6 <TIM_Base_SetConfig+0x8a>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a1e      	ldr	r2, [pc, #120]	@ (8004d24 <TIM_Base_SetConfig+0xf8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d003      	beq.n	8004cb6 <TIM_Base_SetConfig+0x8a>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d28 <TIM_Base_SetConfig+0xfc>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d108      	bne.n	8004cc8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cbc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cbe:	683b      	ldr	r3, [r7, #0]
 8004cc0:	68db      	ldr	r3, [r3, #12]
 8004cc2:	68fa      	ldr	r2, [r7, #12]
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	4313      	orrs	r3, r2
 8004cd4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	68fa      	ldr	r2, [r7, #12]
 8004cda:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	689a      	ldr	r2, [r3, #8]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce4:	683b      	ldr	r3, [r7, #0]
 8004ce6:	681a      	ldr	r2, [r3, #0]
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	4a08      	ldr	r2, [pc, #32]	@ (8004d10 <TIM_Base_SetConfig+0xe4>)
 8004cf0:	4293      	cmp	r3, r2
 8004cf2:	d103      	bne.n	8004cfc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	691a      	ldr	r2, [r3, #16]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2201      	movs	r2, #1
 8004d00:	615a      	str	r2, [r3, #20]
}
 8004d02:	bf00      	nop
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40010000 	.word	0x40010000
 8004d14:	40000400 	.word	0x40000400
 8004d18:	40000800 	.word	0x40000800
 8004d1c:	40000c00 	.word	0x40000c00
 8004d20:	40014000 	.word	0x40014000
 8004d24:	40014400 	.word	0x40014400
 8004d28:	40014800 	.word	0x40014800

08004d2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b087      	sub	sp, #28
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	60f8      	str	r0, [r7, #12]
 8004d34:	60b9      	str	r1, [r7, #8]
 8004d36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	f003 031f 	and.w	r3, r3, #31
 8004d3e:	2201      	movs	r2, #1
 8004d40:	fa02 f303 	lsl.w	r3, r2, r3
 8004d44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a1a      	ldr	r2, [r3, #32]
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	43db      	mvns	r3, r3
 8004d4e:	401a      	ands	r2, r3
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6a1a      	ldr	r2, [r3, #32]
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	f003 031f 	and.w	r3, r3, #31
 8004d5e:	6879      	ldr	r1, [r7, #4]
 8004d60:	fa01 f303 	lsl.w	r3, r1, r3
 8004d64:	431a      	orrs	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	621a      	str	r2, [r3, #32]
}
 8004d6a:	bf00      	nop
 8004d6c:	371c      	adds	r7, #28
 8004d6e:	46bd      	mov	sp, r7
 8004d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d74:	4770      	bx	lr
	...

08004d78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d88:	2b01      	cmp	r3, #1
 8004d8a:	d101      	bne.n	8004d90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004d8c:	2302      	movs	r3, #2
 8004d8e:	e050      	b.n	8004e32 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2202      	movs	r2, #2
 8004d9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	689b      	ldr	r3, [r3, #8]
 8004dae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004db6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	68fa      	ldr	r2, [r7, #12]
 8004dbe:	4313      	orrs	r3, r2
 8004dc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	68fa      	ldr	r2, [r7, #12]
 8004dc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	4a1c      	ldr	r2, [pc, #112]	@ (8004e40 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d018      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ddc:	d013      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a18      	ldr	r2, [pc, #96]	@ (8004e44 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d00e      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a16      	ldr	r2, [pc, #88]	@ (8004e48 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d009      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a15      	ldr	r2, [pc, #84]	@ (8004e4c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d004      	beq.n	8004e06 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a13      	ldr	r2, [pc, #76]	@ (8004e50 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004e02:	4293      	cmp	r3, r2
 8004e04:	d10c      	bne.n	8004e20 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004e0c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e0e:	683b      	ldr	r3, [r7, #0]
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	68ba      	ldr	r2, [r7, #8]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr
 8004e3e:	bf00      	nop
 8004e40:	40010000 	.word	0x40010000
 8004e44:	40000400 	.word	0x40000400
 8004e48:	40000800 	.word	0x40000800
 8004e4c:	40000c00 	.word	0x40000c00
 8004e50:	40014000 	.word	0x40014000

08004e54 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e54:	b084      	sub	sp, #16
 8004e56:	b580      	push	{r7, lr}
 8004e58:	b084      	sub	sp, #16
 8004e5a:	af00      	add	r7, sp, #0
 8004e5c:	6078      	str	r0, [r7, #4]
 8004e5e:	f107 001c 	add.w	r0, r7, #28
 8004e62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d122      	bne.n	8004eb2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e70:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004e80:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e84:	687a      	ldr	r2, [r7, #4]
 8004e86:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	68db      	ldr	r3, [r3, #12]
 8004e8c:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004e94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d105      	bne.n	8004ea6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	68db      	ldr	r3, [r3, #12]
 8004e9e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ea6:	6878      	ldr	r0, [r7, #4]
 8004ea8:	f001 fbee 	bl	8006688 <USB_CoreReset>
 8004eac:	4603      	mov	r3, r0
 8004eae:	73fb      	strb	r3, [r7, #15]
 8004eb0:	e01a      	b.n	8004ee8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	68db      	ldr	r3, [r3, #12]
 8004eb6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ebe:	6878      	ldr	r0, [r7, #4]
 8004ec0:	f001 fbe2 	bl	8006688 <USB_CoreReset>
 8004ec4:	4603      	mov	r3, r0
 8004ec6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ec8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d106      	bne.n	8004edc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ed2:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	639a      	str	r2, [r3, #56]	@ 0x38
 8004eda:	e005      	b.n	8004ee8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ee0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004ee8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d10b      	bne.n	8004f06 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f043 0206 	orr.w	r2, r3, #6
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	689b      	ldr	r3, [r3, #8]
 8004efe:	f043 0220 	orr.w	r2, r3, #32
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004f12:	b004      	add	sp, #16
 8004f14:	4770      	bx	lr
	...

08004f18 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b087      	sub	sp, #28
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	4613      	mov	r3, r2
 8004f24:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004f26:	79fb      	ldrb	r3, [r7, #7]
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d165      	bne.n	8004ff8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	4a41      	ldr	r2, [pc, #260]	@ (8005034 <USB_SetTurnaroundTime+0x11c>)
 8004f30:	4293      	cmp	r3, r2
 8004f32:	d906      	bls.n	8004f42 <USB_SetTurnaroundTime+0x2a>
 8004f34:	68bb      	ldr	r3, [r7, #8]
 8004f36:	4a40      	ldr	r2, [pc, #256]	@ (8005038 <USB_SetTurnaroundTime+0x120>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d202      	bcs.n	8004f42 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004f3c:	230f      	movs	r3, #15
 8004f3e:	617b      	str	r3, [r7, #20]
 8004f40:	e062      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	4a3c      	ldr	r2, [pc, #240]	@ (8005038 <USB_SetTurnaroundTime+0x120>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d306      	bcc.n	8004f58 <USB_SetTurnaroundTime+0x40>
 8004f4a:	68bb      	ldr	r3, [r7, #8]
 8004f4c:	4a3b      	ldr	r2, [pc, #236]	@ (800503c <USB_SetTurnaroundTime+0x124>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d202      	bcs.n	8004f58 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004f52:	230e      	movs	r3, #14
 8004f54:	617b      	str	r3, [r7, #20]
 8004f56:	e057      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	4a38      	ldr	r2, [pc, #224]	@ (800503c <USB_SetTurnaroundTime+0x124>)
 8004f5c:	4293      	cmp	r3, r2
 8004f5e:	d306      	bcc.n	8004f6e <USB_SetTurnaroundTime+0x56>
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	4a37      	ldr	r2, [pc, #220]	@ (8005040 <USB_SetTurnaroundTime+0x128>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d202      	bcs.n	8004f6e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004f68:	230d      	movs	r3, #13
 8004f6a:	617b      	str	r3, [r7, #20]
 8004f6c:	e04c      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	4a33      	ldr	r2, [pc, #204]	@ (8005040 <USB_SetTurnaroundTime+0x128>)
 8004f72:	4293      	cmp	r3, r2
 8004f74:	d306      	bcc.n	8004f84 <USB_SetTurnaroundTime+0x6c>
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	4a32      	ldr	r2, [pc, #200]	@ (8005044 <USB_SetTurnaroundTime+0x12c>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d802      	bhi.n	8004f84 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004f7e:	230c      	movs	r3, #12
 8004f80:	617b      	str	r3, [r7, #20]
 8004f82:	e041      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004f84:	68bb      	ldr	r3, [r7, #8]
 8004f86:	4a2f      	ldr	r2, [pc, #188]	@ (8005044 <USB_SetTurnaroundTime+0x12c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d906      	bls.n	8004f9a <USB_SetTurnaroundTime+0x82>
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	4a2e      	ldr	r2, [pc, #184]	@ (8005048 <USB_SetTurnaroundTime+0x130>)
 8004f90:	4293      	cmp	r3, r2
 8004f92:	d802      	bhi.n	8004f9a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004f94:	230b      	movs	r3, #11
 8004f96:	617b      	str	r3, [r7, #20]
 8004f98:	e036      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	4a2a      	ldr	r2, [pc, #168]	@ (8005048 <USB_SetTurnaroundTime+0x130>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d906      	bls.n	8004fb0 <USB_SetTurnaroundTime+0x98>
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	4a29      	ldr	r2, [pc, #164]	@ (800504c <USB_SetTurnaroundTime+0x134>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d802      	bhi.n	8004fb0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004faa:	230a      	movs	r3, #10
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	e02b      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004fb0:	68bb      	ldr	r3, [r7, #8]
 8004fb2:	4a26      	ldr	r2, [pc, #152]	@ (800504c <USB_SetTurnaroundTime+0x134>)
 8004fb4:	4293      	cmp	r3, r2
 8004fb6:	d906      	bls.n	8004fc6 <USB_SetTurnaroundTime+0xae>
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	4a25      	ldr	r2, [pc, #148]	@ (8005050 <USB_SetTurnaroundTime+0x138>)
 8004fbc:	4293      	cmp	r3, r2
 8004fbe:	d202      	bcs.n	8004fc6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004fc0:	2309      	movs	r3, #9
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	e020      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004fc6:	68bb      	ldr	r3, [r7, #8]
 8004fc8:	4a21      	ldr	r2, [pc, #132]	@ (8005050 <USB_SetTurnaroundTime+0x138>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d306      	bcc.n	8004fdc <USB_SetTurnaroundTime+0xc4>
 8004fce:	68bb      	ldr	r3, [r7, #8]
 8004fd0:	4a20      	ldr	r2, [pc, #128]	@ (8005054 <USB_SetTurnaroundTime+0x13c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d802      	bhi.n	8004fdc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004fd6:	2308      	movs	r3, #8
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	e015      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	4a1d      	ldr	r2, [pc, #116]	@ (8005054 <USB_SetTurnaroundTime+0x13c>)
 8004fe0:	4293      	cmp	r3, r2
 8004fe2:	d906      	bls.n	8004ff2 <USB_SetTurnaroundTime+0xda>
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	4a1c      	ldr	r2, [pc, #112]	@ (8005058 <USB_SetTurnaroundTime+0x140>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d202      	bcs.n	8004ff2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004fec:	2307      	movs	r3, #7
 8004fee:	617b      	str	r3, [r7, #20]
 8004ff0:	e00a      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8004ff2:	2306      	movs	r3, #6
 8004ff4:	617b      	str	r3, [r7, #20]
 8004ff6:	e007      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004ff8:	79fb      	ldrb	r3, [r7, #7]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d102      	bne.n	8005004 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004ffe:	2309      	movs	r3, #9
 8005000:	617b      	str	r3, [r7, #20]
 8005002:	e001      	b.n	8005008 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8005004:	2309      	movs	r3, #9
 8005006:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	68db      	ldr	r3, [r3, #12]
 800500c:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	68da      	ldr	r2, [r3, #12]
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	029b      	lsls	r3, r3, #10
 800501c:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8005020:	431a      	orrs	r2, r3
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005026:	2300      	movs	r3, #0
}
 8005028:	4618      	mov	r0, r3
 800502a:	371c      	adds	r7, #28
 800502c:	46bd      	mov	sp, r7
 800502e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005032:	4770      	bx	lr
 8005034:	00d8acbf 	.word	0x00d8acbf
 8005038:	00e4e1c0 	.word	0x00e4e1c0
 800503c:	00f42400 	.word	0x00f42400
 8005040:	01067380 	.word	0x01067380
 8005044:	011a499f 	.word	0x011a499f
 8005048:	01312cff 	.word	0x01312cff
 800504c:	014ca43f 	.word	0x014ca43f
 8005050:	016e3600 	.word	0x016e3600
 8005054:	01a6ab1f 	.word	0x01a6ab1f
 8005058:	01e84800 	.word	0x01e84800

0800505c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800505c:	b480      	push	{r7}
 800505e:	b083      	sub	sp, #12
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f043 0201 	orr.w	r2, r3, #1
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	370c      	adds	r7, #12
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr

0800507e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800507e:	b480      	push	{r7}
 8005080:	b083      	sub	sp, #12
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f023 0201 	bic.w	r2, r3, #1
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	370c      	adds	r7, #12
 8005098:	46bd      	mov	sp, r7
 800509a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509e:	4770      	bx	lr

080050a0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050a0:	b580      	push	{r7, lr}
 80050a2:	b084      	sub	sp, #16
 80050a4:	af00      	add	r7, sp, #0
 80050a6:	6078      	str	r0, [r7, #4]
 80050a8:	460b      	mov	r3, r1
 80050aa:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050ac:	2300      	movs	r3, #0
 80050ae:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	68db      	ldr	r3, [r3, #12]
 80050b4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d115      	bne.n	80050ee <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050ce:	2001      	movs	r0, #1
 80050d0:	f7fc fac0 	bl	8001654 <HAL_Delay>
      ms++;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	3301      	adds	r3, #1
 80050d8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f001 fa45 	bl	800656a <USB_GetMode>
 80050e0:	4603      	mov	r3, r0
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d01e      	beq.n	8005124 <USB_SetCurrentMode+0x84>
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	2b31      	cmp	r3, #49	@ 0x31
 80050ea:	d9f0      	bls.n	80050ce <USB_SetCurrentMode+0x2e>
 80050ec:	e01a      	b.n	8005124 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050ee:	78fb      	ldrb	r3, [r7, #3]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d115      	bne.n	8005120 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005100:	2001      	movs	r0, #1
 8005102:	f7fc faa7 	bl	8001654 <HAL_Delay>
      ms++;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	3301      	adds	r3, #1
 800510a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f001 fa2c 	bl	800656a <USB_GetMode>
 8005112:	4603      	mov	r3, r0
 8005114:	2b00      	cmp	r3, #0
 8005116:	d005      	beq.n	8005124 <USB_SetCurrentMode+0x84>
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	2b31      	cmp	r3, #49	@ 0x31
 800511c:	d9f0      	bls.n	8005100 <USB_SetCurrentMode+0x60>
 800511e:	e001      	b.n	8005124 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
 8005122:	e005      	b.n	8005130 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	2b32      	cmp	r3, #50	@ 0x32
 8005128:	d101      	bne.n	800512e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800512a:	2301      	movs	r3, #1
 800512c:	e000      	b.n	8005130 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800512e:	2300      	movs	r3, #0
}
 8005130:	4618      	mov	r0, r3
 8005132:	3710      	adds	r7, #16
 8005134:	46bd      	mov	sp, r7
 8005136:	bd80      	pop	{r7, pc}

08005138 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005138:	b084      	sub	sp, #16
 800513a:	b580      	push	{r7, lr}
 800513c:	b086      	sub	sp, #24
 800513e:	af00      	add	r7, sp, #0
 8005140:	6078      	str	r0, [r7, #4]
 8005142:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8005146:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800514a:	2300      	movs	r3, #0
 800514c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005152:	2300      	movs	r3, #0
 8005154:	613b      	str	r3, [r7, #16]
 8005156:	e009      	b.n	800516c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005158:	687a      	ldr	r2, [r7, #4]
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	3340      	adds	r3, #64	@ 0x40
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	4413      	add	r3, r2
 8005162:	2200      	movs	r2, #0
 8005164:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	3301      	adds	r3, #1
 800516a:	613b      	str	r3, [r7, #16]
 800516c:	693b      	ldr	r3, [r7, #16]
 800516e:	2b0e      	cmp	r3, #14
 8005170:	d9f2      	bls.n	8005158 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005172:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005174:	2b00      	cmp	r3, #0
 8005176:	d11c      	bne.n	80051b2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	68fa      	ldr	r2, [r7, #12]
 8005182:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005186:	f043 0302 	orr.w	r3, r3, #2
 800518a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005190:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800519c:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051a8:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	639a      	str	r2, [r3, #56]	@ 0x38
 80051b0:	e00b      	b.n	80051ca <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051b6:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80051d0:	461a      	mov	r2, r3
 80051d2:	2300      	movs	r3, #0
 80051d4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051dc:	4619      	mov	r1, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051e4:	461a      	mov	r2, r3
 80051e6:	680b      	ldr	r3, [r1, #0]
 80051e8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d10c      	bne.n	800520a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d104      	bne.n	8005200 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051f6:	2100      	movs	r1, #0
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 f965 	bl	80054c8 <USB_SetDevSpeed>
 80051fe:	e008      	b.n	8005212 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005200:	2101      	movs	r1, #1
 8005202:	6878      	ldr	r0, [r7, #4]
 8005204:	f000 f960 	bl	80054c8 <USB_SetDevSpeed>
 8005208:	e003      	b.n	8005212 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800520a:	2103      	movs	r1, #3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f95b 	bl	80054c8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005212:	2110      	movs	r1, #16
 8005214:	6878      	ldr	r0, [r7, #4]
 8005216:	f000 f8f3 	bl	8005400 <USB_FlushTxFifo>
 800521a:	4603      	mov	r3, r0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d001      	beq.n	8005224 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005220:	2301      	movs	r3, #1
 8005222:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005224:	6878      	ldr	r0, [r7, #4]
 8005226:	f000 f91f 	bl	8005468 <USB_FlushRxFifo>
 800522a:	4603      	mov	r3, r0
 800522c:	2b00      	cmp	r3, #0
 800522e:	d001      	beq.n	8005234 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005230:	2301      	movs	r3, #1
 8005232:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800523a:	461a      	mov	r2, r3
 800523c:	2300      	movs	r3, #0
 800523e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005246:	461a      	mov	r2, r3
 8005248:	2300      	movs	r3, #0
 800524a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005252:	461a      	mov	r2, r3
 8005254:	2300      	movs	r3, #0
 8005256:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005258:	2300      	movs	r3, #0
 800525a:	613b      	str	r3, [r7, #16]
 800525c:	e043      	b.n	80052e6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	015a      	lsls	r2, r3, #5
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	4413      	add	r3, r2
 8005266:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005270:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005274:	d118      	bne.n	80052a8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	2b00      	cmp	r3, #0
 800527a:	d10a      	bne.n	8005292 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	015a      	lsls	r2, r3, #5
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	4413      	add	r3, r2
 8005284:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005288:	461a      	mov	r2, r3
 800528a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800528e:	6013      	str	r3, [r2, #0]
 8005290:	e013      	b.n	80052ba <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005292:	693b      	ldr	r3, [r7, #16]
 8005294:	015a      	lsls	r2, r3, #5
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800529e:	461a      	mov	r2, r3
 80052a0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80052a4:	6013      	str	r3, [r2, #0]
 80052a6:	e008      	b.n	80052ba <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80052a8:	693b      	ldr	r3, [r7, #16]
 80052aa:	015a      	lsls	r2, r3, #5
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	4413      	add	r3, r2
 80052b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052b4:	461a      	mov	r2, r3
 80052b6:	2300      	movs	r3, #0
 80052b8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	015a      	lsls	r2, r3, #5
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	4413      	add	r3, r2
 80052c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052c6:	461a      	mov	r2, r3
 80052c8:	2300      	movs	r3, #0
 80052ca:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052cc:	693b      	ldr	r3, [r7, #16]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80052d8:	461a      	mov	r2, r3
 80052da:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80052de:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	3301      	adds	r3, #1
 80052e4:	613b      	str	r3, [r7, #16]
 80052e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	429a      	cmp	r2, r3
 80052ec:	d3b7      	bcc.n	800525e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052ee:	2300      	movs	r3, #0
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	e043      	b.n	800537c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052f4:	693b      	ldr	r3, [r7, #16]
 80052f6:	015a      	lsls	r2, r3, #5
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	4413      	add	r3, r2
 80052fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005306:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800530a:	d118      	bne.n	800533e <USB_DevInit+0x206>
    {
      if (i == 0U)
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10a      	bne.n	8005328 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	015a      	lsls	r2, r3, #5
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	4413      	add	r3, r2
 800531a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800531e:	461a      	mov	r2, r3
 8005320:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8005324:	6013      	str	r3, [r2, #0]
 8005326:	e013      	b.n	8005350 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	015a      	lsls	r2, r3, #5
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4413      	add	r3, r2
 8005330:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005334:	461a      	mov	r2, r3
 8005336:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	e008      	b.n	8005350 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	015a      	lsls	r2, r3, #5
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	4413      	add	r3, r2
 8005346:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800534a:	461a      	mov	r2, r3
 800534c:	2300      	movs	r3, #0
 800534e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	015a      	lsls	r2, r3, #5
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	4413      	add	r3, r2
 8005358:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800535c:	461a      	mov	r2, r3
 800535e:	2300      	movs	r3, #0
 8005360:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800536e:	461a      	mov	r2, r3
 8005370:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005374:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	3301      	adds	r3, #1
 800537a:	613b      	str	r3, [r7, #16]
 800537c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	429a      	cmp	r2, r3
 8005382:	d3b7      	bcc.n	80052f4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800538a:	691b      	ldr	r3, [r3, #16]
 800538c:	68fa      	ldr	r2, [r7, #12]
 800538e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005392:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005396:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2200      	movs	r2, #0
 800539c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80053a4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80053a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d105      	bne.n	80053b8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	699b      	ldr	r3, [r3, #24]
 80053b0:	f043 0210 	orr.w	r2, r3, #16
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	699a      	ldr	r2, [r3, #24]
 80053bc:	4b0f      	ldr	r3, [pc, #60]	@ (80053fc <USB_DevInit+0x2c4>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	687a      	ldr	r2, [r7, #4]
 80053c2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80053c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d005      	beq.n	80053d6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	699b      	ldr	r3, [r3, #24]
 80053ce:	f043 0208 	orr.w	r2, r3, #8
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80053d8:	2b01      	cmp	r3, #1
 80053da:	d107      	bne.n	80053ec <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	699b      	ldr	r3, [r3, #24]
 80053e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80053e4:	f043 0304 	orr.w	r3, r3, #4
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3718      	adds	r7, #24
 80053f2:	46bd      	mov	sp, r7
 80053f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053f8:	b004      	add	sp, #16
 80053fa:	4770      	bx	lr
 80053fc:	803c3800 	.word	0x803c3800

08005400 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800540a:	2300      	movs	r3, #0
 800540c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3301      	adds	r3, #1
 8005412:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	4a13      	ldr	r2, [pc, #76]	@ (8005464 <USB_FlushTxFifo+0x64>)
 8005418:	4293      	cmp	r3, r2
 800541a:	d901      	bls.n	8005420 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800541c:	2303      	movs	r3, #3
 800541e:	e01b      	b.n	8005458 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691b      	ldr	r3, [r3, #16]
 8005424:	2b00      	cmp	r3, #0
 8005426:	daf2      	bge.n	800540e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005428:	2300      	movs	r3, #0
 800542a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	019b      	lsls	r3, r3, #6
 8005430:	f043 0220 	orr.w	r2, r3, #32
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	3301      	adds	r3, #1
 800543c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	4a08      	ldr	r2, [pc, #32]	@ (8005464 <USB_FlushTxFifo+0x64>)
 8005442:	4293      	cmp	r3, r2
 8005444:	d901      	bls.n	800544a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005446:	2303      	movs	r3, #3
 8005448:	e006      	b.n	8005458 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	691b      	ldr	r3, [r3, #16]
 800544e:	f003 0320 	and.w	r3, r3, #32
 8005452:	2b20      	cmp	r3, #32
 8005454:	d0f0      	beq.n	8005438 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005456:	2300      	movs	r3, #0
}
 8005458:	4618      	mov	r0, r3
 800545a:	3714      	adds	r7, #20
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	00030d40 	.word	0x00030d40

08005468 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005468:	b480      	push	{r7}
 800546a:	b085      	sub	sp, #20
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	3301      	adds	r3, #1
 8005478:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	4a11      	ldr	r2, [pc, #68]	@ (80054c4 <USB_FlushRxFifo+0x5c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d901      	bls.n	8005486 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005482:	2303      	movs	r3, #3
 8005484:	e018      	b.n	80054b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	2b00      	cmp	r3, #0
 800548c:	daf2      	bge.n	8005474 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800548e:	2300      	movs	r3, #0
 8005490:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	2210      	movs	r2, #16
 8005496:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	3301      	adds	r3, #1
 800549c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	4a08      	ldr	r2, [pc, #32]	@ (80054c4 <USB_FlushRxFifo+0x5c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d901      	bls.n	80054aa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e006      	b.n	80054b8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	691b      	ldr	r3, [r3, #16]
 80054ae:	f003 0310 	and.w	r3, r3, #16
 80054b2:	2b10      	cmp	r3, #16
 80054b4:	d0f0      	beq.n	8005498 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054b6:	2300      	movs	r3, #0
}
 80054b8:	4618      	mov	r0, r3
 80054ba:	3714      	adds	r7, #20
 80054bc:	46bd      	mov	sp, r7
 80054be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c2:	4770      	bx	lr
 80054c4:	00030d40 	.word	0x00030d40

080054c8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b085      	sub	sp, #20
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	6078      	str	r0, [r7, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80054de:	681a      	ldr	r2, [r3, #0]
 80054e0:	78fb      	ldrb	r3, [r7, #3]
 80054e2:	68f9      	ldr	r1, [r7, #12]
 80054e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80054e8:	4313      	orrs	r3, r2
 80054ea:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054ec:	2300      	movs	r3, #0
}
 80054ee:	4618      	mov	r0, r3
 80054f0:	3714      	adds	r7, #20
 80054f2:	46bd      	mov	sp, r7
 80054f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f8:	4770      	bx	lr

080054fa <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80054fa:	b480      	push	{r7}
 80054fc:	b087      	sub	sp, #28
 80054fe:	af00      	add	r7, sp, #0
 8005500:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f003 0306 	and.w	r3, r3, #6
 8005512:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d102      	bne.n	8005520 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800551a:	2300      	movs	r3, #0
 800551c:	75fb      	strb	r3, [r7, #23]
 800551e:	e00a      	b.n	8005536 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2b02      	cmp	r3, #2
 8005524:	d002      	beq.n	800552c <USB_GetDevSpeed+0x32>
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	2b06      	cmp	r3, #6
 800552a:	d102      	bne.n	8005532 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800552c:	2302      	movs	r3, #2
 800552e:	75fb      	strb	r3, [r7, #23]
 8005530:	e001      	b.n	8005536 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005532:	230f      	movs	r3, #15
 8005534:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005536:	7dfb      	ldrb	r3, [r7, #23]
}
 8005538:	4618      	mov	r0, r3
 800553a:	371c      	adds	r7, #28
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr

08005544 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005544:	b480      	push	{r7}
 8005546:	b085      	sub	sp, #20
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005552:	683b      	ldr	r3, [r7, #0]
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	785b      	ldrb	r3, [r3, #1]
 800555c:	2b01      	cmp	r3, #1
 800555e:	d13a      	bne.n	80055d6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005566:	69da      	ldr	r2, [r3, #28]
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	f003 030f 	and.w	r3, r3, #15
 8005570:	2101      	movs	r1, #1
 8005572:	fa01 f303 	lsl.w	r3, r1, r3
 8005576:	b29b      	uxth	r3, r3
 8005578:	68f9      	ldr	r1, [r7, #12]
 800557a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800557e:	4313      	orrs	r3, r2
 8005580:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d155      	bne.n	8005644 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	015a      	lsls	r2, r3, #5
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	4413      	add	r3, r2
 80055a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	791b      	ldrb	r3, [r3, #4]
 80055b2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055b4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80055b6:	68bb      	ldr	r3, [r7, #8]
 80055b8:	059b      	lsls	r3, r3, #22
 80055ba:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80055bc:	4313      	orrs	r3, r2
 80055be:	68ba      	ldr	r2, [r7, #8]
 80055c0:	0151      	lsls	r1, r2, #5
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	440a      	add	r2, r1
 80055c6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80055ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80055ce:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	e036      	b.n	8005644 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055dc:	69da      	ldr	r2, [r3, #28]
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	781b      	ldrb	r3, [r3, #0]
 80055e2:	f003 030f 	and.w	r3, r3, #15
 80055e6:	2101      	movs	r1, #1
 80055e8:	fa01 f303 	lsl.w	r3, r1, r3
 80055ec:	041b      	lsls	r3, r3, #16
 80055ee:	68f9      	ldr	r1, [r7, #12]
 80055f0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80055f4:	4313      	orrs	r3, r2
 80055f6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80055f8:	68bb      	ldr	r3, [r7, #8]
 80055fa:	015a      	lsls	r2, r3, #5
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	4413      	add	r3, r2
 8005600:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800560a:	2b00      	cmp	r3, #0
 800560c:	d11a      	bne.n	8005644 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	015a      	lsls	r2, r3, #5
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	4413      	add	r3, r2
 8005616:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800561a:	681a      	ldr	r2, [r3, #0]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	68db      	ldr	r3, [r3, #12]
 8005620:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	791b      	ldrb	r3, [r3, #4]
 8005628:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800562a:	430b      	orrs	r3, r1
 800562c:	4313      	orrs	r3, r2
 800562e:	68ba      	ldr	r2, [r7, #8]
 8005630:	0151      	lsls	r1, r2, #5
 8005632:	68fa      	ldr	r2, [r7, #12]
 8005634:	440a      	add	r2, r1
 8005636:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800563a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800563e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005642:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005644:	2300      	movs	r3, #0
}
 8005646:	4618      	mov	r0, r3
 8005648:	3714      	adds	r7, #20
 800564a:	46bd      	mov	sp, r7
 800564c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005650:	4770      	bx	lr
	...

08005654 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005654:	b480      	push	{r7}
 8005656:	b085      	sub	sp, #20
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
 800565c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	785b      	ldrb	r3, [r3, #1]
 800566c:	2b01      	cmp	r3, #1
 800566e:	d161      	bne.n	8005734 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	015a      	lsls	r2, r3, #5
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	4413      	add	r3, r2
 8005678:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005682:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005686:	d11f      	bne.n	80056c8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	015a      	lsls	r2, r3, #5
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	68ba      	ldr	r2, [r7, #8]
 8005698:	0151      	lsls	r1, r2, #5
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	440a      	add	r2, r1
 800569e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056a2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80056a6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	015a      	lsls	r2, r3, #5
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	4413      	add	r3, r2
 80056b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	68ba      	ldr	r2, [r7, #8]
 80056b8:	0151      	lsls	r1, r2, #5
 80056ba:	68fa      	ldr	r2, [r7, #12]
 80056bc:	440a      	add	r2, r1
 80056be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056c2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80056c6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	f003 030f 	and.w	r3, r3, #15
 80056d8:	2101      	movs	r1, #1
 80056da:	fa01 f303 	lsl.w	r3, r1, r3
 80056de:	b29b      	uxth	r3, r3
 80056e0:	43db      	mvns	r3, r3
 80056e2:	68f9      	ldr	r1, [r7, #12]
 80056e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80056e8:	4013      	ands	r3, r2
 80056ea:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056f2:	69da      	ldr	r2, [r3, #28]
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	f003 030f 	and.w	r3, r3, #15
 80056fc:	2101      	movs	r1, #1
 80056fe:	fa01 f303 	lsl.w	r3, r1, r3
 8005702:	b29b      	uxth	r3, r3
 8005704:	43db      	mvns	r3, r3
 8005706:	68f9      	ldr	r1, [r7, #12]
 8005708:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800570c:	4013      	ands	r3, r2
 800570e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8005710:	68bb      	ldr	r3, [r7, #8]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	0159      	lsls	r1, r3, #5
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	440b      	add	r3, r1
 8005726:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800572a:	4619      	mov	r1, r3
 800572c:	4b35      	ldr	r3, [pc, #212]	@ (8005804 <USB_DeactivateEndpoint+0x1b0>)
 800572e:	4013      	ands	r3, r2
 8005730:	600b      	str	r3, [r1, #0]
 8005732:	e060      	b.n	80057f6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005734:	68bb      	ldr	r3, [r7, #8]
 8005736:	015a      	lsls	r2, r3, #5
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4413      	add	r3, r2
 800573c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005746:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800574a:	d11f      	bne.n	800578c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800574c:	68bb      	ldr	r3, [r7, #8]
 800574e:	015a      	lsls	r2, r3, #5
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4413      	add	r3, r2
 8005754:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	68ba      	ldr	r2, [r7, #8]
 800575c:	0151      	lsls	r1, r2, #5
 800575e:	68fa      	ldr	r2, [r7, #12]
 8005760:	440a      	add	r2, r1
 8005762:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005766:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800576a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	015a      	lsls	r2, r3, #5
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4413      	add	r3, r2
 8005774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	0151      	lsls	r1, r2, #5
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	440a      	add	r2, r1
 8005782:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005786:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800578a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005792:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8005794:	683b      	ldr	r3, [r7, #0]
 8005796:	781b      	ldrb	r3, [r3, #0]
 8005798:	f003 030f 	and.w	r3, r3, #15
 800579c:	2101      	movs	r1, #1
 800579e:	fa01 f303 	lsl.w	r3, r1, r3
 80057a2:	041b      	lsls	r3, r3, #16
 80057a4:	43db      	mvns	r3, r3
 80057a6:	68f9      	ldr	r1, [r7, #12]
 80057a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057ac:	4013      	ands	r3, r2
 80057ae:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80057b6:	69da      	ldr	r2, [r3, #28]
 80057b8:	683b      	ldr	r3, [r7, #0]
 80057ba:	781b      	ldrb	r3, [r3, #0]
 80057bc:	f003 030f 	and.w	r3, r3, #15
 80057c0:	2101      	movs	r1, #1
 80057c2:	fa01 f303 	lsl.w	r3, r1, r3
 80057c6:	041b      	lsls	r3, r3, #16
 80057c8:	43db      	mvns	r3, r3
 80057ca:	68f9      	ldr	r1, [r7, #12]
 80057cc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80057d0:	4013      	ands	r3, r2
 80057d2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80057d4:	68bb      	ldr	r3, [r7, #8]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057e0:	681a      	ldr	r2, [r3, #0]
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	0159      	lsls	r1, r3, #5
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	440b      	add	r3, r1
 80057ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057ee:	4619      	mov	r1, r3
 80057f0:	4b05      	ldr	r3, [pc, #20]	@ (8005808 <USB_DeactivateEndpoint+0x1b4>)
 80057f2:	4013      	ands	r3, r2
 80057f4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80057f6:	2300      	movs	r3, #0
}
 80057f8:	4618      	mov	r0, r3
 80057fa:	3714      	adds	r7, #20
 80057fc:	46bd      	mov	sp, r7
 80057fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005802:	4770      	bx	lr
 8005804:	ec337800 	.word	0xec337800
 8005808:	eff37800 	.word	0xeff37800

0800580c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08a      	sub	sp, #40	@ 0x28
 8005810:	af02      	add	r7, sp, #8
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	4613      	mov	r3, r2
 8005818:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	781b      	ldrb	r3, [r3, #0]
 8005822:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	785b      	ldrb	r3, [r3, #1]
 8005828:	2b01      	cmp	r3, #1
 800582a:	f040 815c 	bne.w	8005ae6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	699b      	ldr	r3, [r3, #24]
 8005832:	2b00      	cmp	r3, #0
 8005834:	d132      	bne.n	800589c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	015a      	lsls	r2, r3, #5
 800583a:	69fb      	ldr	r3, [r7, #28]
 800583c:	4413      	add	r3, r2
 800583e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	69ba      	ldr	r2, [r7, #24]
 8005846:	0151      	lsls	r1, r2, #5
 8005848:	69fa      	ldr	r2, [r7, #28]
 800584a:	440a      	add	r2, r1
 800584c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005850:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005854:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005858:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800585a:	69bb      	ldr	r3, [r7, #24]
 800585c:	015a      	lsls	r2, r3, #5
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	4413      	add	r3, r2
 8005862:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005866:	691b      	ldr	r3, [r3, #16]
 8005868:	69ba      	ldr	r2, [r7, #24]
 800586a:	0151      	lsls	r1, r2, #5
 800586c:	69fa      	ldr	r2, [r7, #28]
 800586e:	440a      	add	r2, r1
 8005870:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005874:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005878:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800587a:	69bb      	ldr	r3, [r7, #24]
 800587c:	015a      	lsls	r2, r3, #5
 800587e:	69fb      	ldr	r3, [r7, #28]
 8005880:	4413      	add	r3, r2
 8005882:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005886:	691b      	ldr	r3, [r3, #16]
 8005888:	69ba      	ldr	r2, [r7, #24]
 800588a:	0151      	lsls	r1, r2, #5
 800588c:	69fa      	ldr	r2, [r7, #28]
 800588e:	440a      	add	r2, r1
 8005890:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005894:	0cdb      	lsrs	r3, r3, #19
 8005896:	04db      	lsls	r3, r3, #19
 8005898:	6113      	str	r3, [r2, #16]
 800589a:	e074      	b.n	8005986 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800589c:	69bb      	ldr	r3, [r7, #24]
 800589e:	015a      	lsls	r2, r3, #5
 80058a0:	69fb      	ldr	r3, [r7, #28]
 80058a2:	4413      	add	r3, r2
 80058a4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058a8:	691b      	ldr	r3, [r3, #16]
 80058aa:	69ba      	ldr	r2, [r7, #24]
 80058ac:	0151      	lsls	r1, r2, #5
 80058ae:	69fa      	ldr	r2, [r7, #28]
 80058b0:	440a      	add	r2, r1
 80058b2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058b6:	0cdb      	lsrs	r3, r3, #19
 80058b8:	04db      	lsls	r3, r3, #19
 80058ba:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	015a      	lsls	r2, r3, #5
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	4413      	add	r3, r2
 80058c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058c8:	691b      	ldr	r3, [r3, #16]
 80058ca:	69ba      	ldr	r2, [r7, #24]
 80058cc:	0151      	lsls	r1, r2, #5
 80058ce:	69fa      	ldr	r2, [r7, #28]
 80058d0:	440a      	add	r2, r1
 80058d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80058d6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80058da:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80058de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80058e0:	69bb      	ldr	r3, [r7, #24]
 80058e2:	015a      	lsls	r2, r3, #5
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	4413      	add	r3, r2
 80058e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80058ec:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	6999      	ldr	r1, [r3, #24]
 80058f2:	68bb      	ldr	r3, [r7, #8]
 80058f4:	68db      	ldr	r3, [r3, #12]
 80058f6:	440b      	add	r3, r1
 80058f8:	1e59      	subs	r1, r3, #1
 80058fa:	68bb      	ldr	r3, [r7, #8]
 80058fc:	68db      	ldr	r3, [r3, #12]
 80058fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8005902:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005904:	4b9d      	ldr	r3, [pc, #628]	@ (8005b7c <USB_EPStartXfer+0x370>)
 8005906:	400b      	ands	r3, r1
 8005908:	69b9      	ldr	r1, [r7, #24]
 800590a:	0148      	lsls	r0, r1, #5
 800590c:	69f9      	ldr	r1, [r7, #28]
 800590e:	4401      	add	r1, r0
 8005910:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005914:	4313      	orrs	r3, r2
 8005916:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005918:	69bb      	ldr	r3, [r7, #24]
 800591a:	015a      	lsls	r2, r3, #5
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	4413      	add	r3, r2
 8005920:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005924:	691a      	ldr	r2, [r3, #16]
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	699b      	ldr	r3, [r3, #24]
 800592a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800592e:	69b9      	ldr	r1, [r7, #24]
 8005930:	0148      	lsls	r0, r1, #5
 8005932:	69f9      	ldr	r1, [r7, #28]
 8005934:	4401      	add	r1, r0
 8005936:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800593a:	4313      	orrs	r3, r2
 800593c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800593e:	68bb      	ldr	r3, [r7, #8]
 8005940:	791b      	ldrb	r3, [r3, #4]
 8005942:	2b01      	cmp	r3, #1
 8005944:	d11f      	bne.n	8005986 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005946:	69bb      	ldr	r3, [r7, #24]
 8005948:	015a      	lsls	r2, r3, #5
 800594a:	69fb      	ldr	r3, [r7, #28]
 800594c:	4413      	add	r3, r2
 800594e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005952:	691b      	ldr	r3, [r3, #16]
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	0151      	lsls	r1, r2, #5
 8005958:	69fa      	ldr	r2, [r7, #28]
 800595a:	440a      	add	r2, r1
 800595c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005960:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005964:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	015a      	lsls	r2, r3, #5
 800596a:	69fb      	ldr	r3, [r7, #28]
 800596c:	4413      	add	r3, r2
 800596e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005972:	691b      	ldr	r3, [r3, #16]
 8005974:	69ba      	ldr	r2, [r7, #24]
 8005976:	0151      	lsls	r1, r2, #5
 8005978:	69fa      	ldr	r2, [r7, #28]
 800597a:	440a      	add	r2, r1
 800597c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005980:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005984:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005986:	79fb      	ldrb	r3, [r7, #7]
 8005988:	2b01      	cmp	r3, #1
 800598a:	d14b      	bne.n	8005a24 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800598c:	68bb      	ldr	r3, [r7, #8]
 800598e:	695b      	ldr	r3, [r3, #20]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d009      	beq.n	80059a8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005994:	69bb      	ldr	r3, [r7, #24]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059a0:	461a      	mov	r2, r3
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	791b      	ldrb	r3, [r3, #4]
 80059ac:	2b01      	cmp	r3, #1
 80059ae:	d128      	bne.n	8005a02 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80059b0:	69fb      	ldr	r3, [r7, #28]
 80059b2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059b6:	689b      	ldr	r3, [r3, #8]
 80059b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d110      	bne.n	80059e2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80059c0:	69bb      	ldr	r3, [r7, #24]
 80059c2:	015a      	lsls	r2, r3, #5
 80059c4:	69fb      	ldr	r3, [r7, #28]
 80059c6:	4413      	add	r3, r2
 80059c8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	0151      	lsls	r1, r2, #5
 80059d2:	69fa      	ldr	r2, [r7, #28]
 80059d4:	440a      	add	r2, r1
 80059d6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059da:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80059de:	6013      	str	r3, [r2, #0]
 80059e0:	e00f      	b.n	8005a02 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	69ba      	ldr	r2, [r7, #24]
 80059f2:	0151      	lsls	r1, r2, #5
 80059f4:	69fa      	ldr	r2, [r7, #28]
 80059f6:	440a      	add	r2, r1
 80059f8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80059fc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005a00:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a02:	69bb      	ldr	r3, [r7, #24]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	69fb      	ldr	r3, [r7, #28]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	69ba      	ldr	r2, [r7, #24]
 8005a12:	0151      	lsls	r1, r2, #5
 8005a14:	69fa      	ldr	r2, [r7, #28]
 8005a16:	440a      	add	r2, r1
 8005a18:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a1c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005a20:	6013      	str	r3, [r2, #0]
 8005a22:	e133      	b.n	8005c8c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005a24:	69bb      	ldr	r3, [r7, #24]
 8005a26:	015a      	lsls	r2, r3, #5
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	4413      	add	r3, r2
 8005a2c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	69ba      	ldr	r2, [r7, #24]
 8005a34:	0151      	lsls	r1, r2, #5
 8005a36:	69fa      	ldr	r2, [r7, #28]
 8005a38:	440a      	add	r2, r1
 8005a3a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a3e:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005a42:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	791b      	ldrb	r3, [r3, #4]
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d015      	beq.n	8005a78 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	699b      	ldr	r3, [r3, #24]
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	f000 811b 	beq.w	8005c8c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	f003 030f 	and.w	r3, r3, #15
 8005a66:	2101      	movs	r1, #1
 8005a68:	fa01 f303 	lsl.w	r3, r1, r3
 8005a6c:	69f9      	ldr	r1, [r7, #28]
 8005a6e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005a72:	4313      	orrs	r3, r2
 8005a74:	634b      	str	r3, [r1, #52]	@ 0x34
 8005a76:	e109      	b.n	8005c8c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005a78:	69fb      	ldr	r3, [r7, #28]
 8005a7a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a7e:	689b      	ldr	r3, [r3, #8]
 8005a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d110      	bne.n	8005aaa <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005a88:	69bb      	ldr	r3, [r7, #24]
 8005a8a:	015a      	lsls	r2, r3, #5
 8005a8c:	69fb      	ldr	r3, [r7, #28]
 8005a8e:	4413      	add	r3, r2
 8005a90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	69ba      	ldr	r2, [r7, #24]
 8005a98:	0151      	lsls	r1, r2, #5
 8005a9a:	69fa      	ldr	r2, [r7, #28]
 8005a9c:	440a      	add	r2, r1
 8005a9e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005aa2:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005aa6:	6013      	str	r3, [r2, #0]
 8005aa8:	e00f      	b.n	8005aca <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005aaa:	69bb      	ldr	r3, [r7, #24]
 8005aac:	015a      	lsls	r2, r3, #5
 8005aae:	69fb      	ldr	r3, [r7, #28]
 8005ab0:	4413      	add	r3, r2
 8005ab2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	69ba      	ldr	r2, [r7, #24]
 8005aba:	0151      	lsls	r1, r2, #5
 8005abc:	69fa      	ldr	r2, [r7, #28]
 8005abe:	440a      	add	r2, r1
 8005ac0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ac4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005ac8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	6919      	ldr	r1, [r3, #16]
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	781a      	ldrb	r2, [r3, #0]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	b298      	uxth	r0, r3
 8005ad8:	79fb      	ldrb	r3, [r7, #7]
 8005ada:	9300      	str	r3, [sp, #0]
 8005adc:	4603      	mov	r3, r0
 8005ade:	68f8      	ldr	r0, [r7, #12]
 8005ae0:	f000 fade 	bl	80060a0 <USB_WritePacket>
 8005ae4:	e0d2      	b.n	8005c8c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	015a      	lsls	r2, r3, #5
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	4413      	add	r3, r2
 8005aee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	69ba      	ldr	r2, [r7, #24]
 8005af6:	0151      	lsls	r1, r2, #5
 8005af8:	69fa      	ldr	r2, [r7, #28]
 8005afa:	440a      	add	r2, r1
 8005afc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b00:	0cdb      	lsrs	r3, r3, #19
 8005b02:	04db      	lsls	r3, r3, #19
 8005b04:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	015a      	lsls	r2, r3, #5
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	4413      	add	r3, r2
 8005b0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	69ba      	ldr	r2, [r7, #24]
 8005b16:	0151      	lsls	r1, r2, #5
 8005b18:	69fa      	ldr	r2, [r7, #28]
 8005b1a:	440a      	add	r2, r1
 8005b1c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b20:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005b24:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005b28:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	699b      	ldr	r3, [r3, #24]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d126      	bne.n	8005b80 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005b32:	69bb      	ldr	r3, [r7, #24]
 8005b34:	015a      	lsls	r2, r3, #5
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	4413      	add	r3, r2
 8005b3a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b3e:	691a      	ldr	r2, [r3, #16]
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	68db      	ldr	r3, [r3, #12]
 8005b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005b48:	69b9      	ldr	r1, [r7, #24]
 8005b4a:	0148      	lsls	r0, r1, #5
 8005b4c:	69f9      	ldr	r1, [r7, #28]
 8005b4e:	4401      	add	r1, r0
 8005b50:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005b54:	4313      	orrs	r3, r2
 8005b56:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005b58:	69bb      	ldr	r3, [r7, #24]
 8005b5a:	015a      	lsls	r2, r3, #5
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	4413      	add	r3, r2
 8005b60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b64:	691b      	ldr	r3, [r3, #16]
 8005b66:	69ba      	ldr	r2, [r7, #24]
 8005b68:	0151      	lsls	r1, r2, #5
 8005b6a:	69fa      	ldr	r2, [r7, #28]
 8005b6c:	440a      	add	r2, r1
 8005b6e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005b72:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005b76:	6113      	str	r3, [r2, #16]
 8005b78:	e03a      	b.n	8005bf0 <USB_EPStartXfer+0x3e4>
 8005b7a:	bf00      	nop
 8005b7c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	699a      	ldr	r2, [r3, #24]
 8005b84:	68bb      	ldr	r3, [r7, #8]
 8005b86:	68db      	ldr	r3, [r3, #12]
 8005b88:	4413      	add	r3, r2
 8005b8a:	1e5a      	subs	r2, r3, #1
 8005b8c:	68bb      	ldr	r3, [r7, #8]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b94:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	8afa      	ldrh	r2, [r7, #22]
 8005b9c:	fb03 f202 	mul.w	r2, r3, r2
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005ba4:	69bb      	ldr	r3, [r7, #24]
 8005ba6:	015a      	lsls	r2, r3, #5
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	4413      	add	r3, r2
 8005bac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb0:	691a      	ldr	r2, [r3, #16]
 8005bb2:	8afb      	ldrh	r3, [r7, #22]
 8005bb4:	04d9      	lsls	r1, r3, #19
 8005bb6:	4b38      	ldr	r3, [pc, #224]	@ (8005c98 <USB_EPStartXfer+0x48c>)
 8005bb8:	400b      	ands	r3, r1
 8005bba:	69b9      	ldr	r1, [r7, #24]
 8005bbc:	0148      	lsls	r0, r1, #5
 8005bbe:	69f9      	ldr	r1, [r7, #28]
 8005bc0:	4401      	add	r1, r0
 8005bc2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005bc6:	4313      	orrs	r3, r2
 8005bc8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8005bca:	69bb      	ldr	r3, [r7, #24]
 8005bcc:	015a      	lsls	r2, r3, #5
 8005bce:	69fb      	ldr	r3, [r7, #28]
 8005bd0:	4413      	add	r3, r2
 8005bd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bd6:	691a      	ldr	r2, [r3, #16]
 8005bd8:	68bb      	ldr	r3, [r7, #8]
 8005bda:	69db      	ldr	r3, [r3, #28]
 8005bdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005be0:	69b9      	ldr	r1, [r7, #24]
 8005be2:	0148      	lsls	r0, r1, #5
 8005be4:	69f9      	ldr	r1, [r7, #28]
 8005be6:	4401      	add	r1, r0
 8005be8:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005bec:	4313      	orrs	r3, r2
 8005bee:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005bf0:	79fb      	ldrb	r3, [r7, #7]
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d10d      	bne.n	8005c12 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d009      	beq.n	8005c12 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	6919      	ldr	r1, [r3, #16]
 8005c02:	69bb      	ldr	r3, [r7, #24]
 8005c04:	015a      	lsls	r2, r3, #5
 8005c06:	69fb      	ldr	r3, [r7, #28]
 8005c08:	4413      	add	r3, r2
 8005c0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c0e:	460a      	mov	r2, r1
 8005c10:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	791b      	ldrb	r3, [r3, #4]
 8005c16:	2b01      	cmp	r3, #1
 8005c18:	d128      	bne.n	8005c6c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d110      	bne.n	8005c4c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	015a      	lsls	r2, r3, #5
 8005c2e:	69fb      	ldr	r3, [r7, #28]
 8005c30:	4413      	add	r3, r2
 8005c32:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	69ba      	ldr	r2, [r7, #24]
 8005c3a:	0151      	lsls	r1, r2, #5
 8005c3c:	69fa      	ldr	r2, [r7, #28]
 8005c3e:	440a      	add	r2, r1
 8005c40:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c44:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005c48:	6013      	str	r3, [r2, #0]
 8005c4a:	e00f      	b.n	8005c6c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005c4c:	69bb      	ldr	r3, [r7, #24]
 8005c4e:	015a      	lsls	r2, r3, #5
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	4413      	add	r3, r2
 8005c54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	69ba      	ldr	r2, [r7, #24]
 8005c5c:	0151      	lsls	r1, r2, #5
 8005c5e:	69fa      	ldr	r2, [r7, #28]
 8005c60:	440a      	add	r2, r1
 8005c62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005c6a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	015a      	lsls	r2, r3, #5
 8005c70:	69fb      	ldr	r3, [r7, #28]
 8005c72:	4413      	add	r3, r2
 8005c74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	69ba      	ldr	r2, [r7, #24]
 8005c7c:	0151      	lsls	r1, r2, #5
 8005c7e:	69fa      	ldr	r2, [r7, #28]
 8005c80:	440a      	add	r2, r1
 8005c82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005c86:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005c8a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3720      	adds	r7, #32
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	1ff80000 	.word	0x1ff80000

08005c9c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	4613      	mov	r3, r2
 8005ca8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	781b      	ldrb	r3, [r3, #0]
 8005cb2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	785b      	ldrb	r3, [r3, #1]
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	f040 80ce 	bne.w	8005e5a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d132      	bne.n	8005d2c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	015a      	lsls	r2, r3, #5
 8005cca:	697b      	ldr	r3, [r7, #20]
 8005ccc:	4413      	add	r3, r2
 8005cce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cd2:	691b      	ldr	r3, [r3, #16]
 8005cd4:	693a      	ldr	r2, [r7, #16]
 8005cd6:	0151      	lsls	r1, r2, #5
 8005cd8:	697a      	ldr	r2, [r7, #20]
 8005cda:	440a      	add	r2, r1
 8005cdc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005ce0:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005ce4:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005ce8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	015a      	lsls	r2, r3, #5
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	4413      	add	r3, r2
 8005cf2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	693a      	ldr	r2, [r7, #16]
 8005cfa:	0151      	lsls	r1, r2, #5
 8005cfc:	697a      	ldr	r2, [r7, #20]
 8005cfe:	440a      	add	r2, r1
 8005d00:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d04:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005d08:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d0a:	693b      	ldr	r3, [r7, #16]
 8005d0c:	015a      	lsls	r2, r3, #5
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	4413      	add	r3, r2
 8005d12:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d16:	691b      	ldr	r3, [r3, #16]
 8005d18:	693a      	ldr	r2, [r7, #16]
 8005d1a:	0151      	lsls	r1, r2, #5
 8005d1c:	697a      	ldr	r2, [r7, #20]
 8005d1e:	440a      	add	r2, r1
 8005d20:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d24:	0cdb      	lsrs	r3, r3, #19
 8005d26:	04db      	lsls	r3, r3, #19
 8005d28:	6113      	str	r3, [r2, #16]
 8005d2a:	e04e      	b.n	8005dca <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005d2c:	693b      	ldr	r3, [r7, #16]
 8005d2e:	015a      	lsls	r2, r3, #5
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	4413      	add	r3, r2
 8005d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d38:	691b      	ldr	r3, [r3, #16]
 8005d3a:	693a      	ldr	r2, [r7, #16]
 8005d3c:	0151      	lsls	r1, r2, #5
 8005d3e:	697a      	ldr	r2, [r7, #20]
 8005d40:	440a      	add	r2, r1
 8005d42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d46:	0cdb      	lsrs	r3, r3, #19
 8005d48:	04db      	lsls	r3, r3, #19
 8005d4a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005d4c:	693b      	ldr	r3, [r7, #16]
 8005d4e:	015a      	lsls	r2, r3, #5
 8005d50:	697b      	ldr	r3, [r7, #20]
 8005d52:	4413      	add	r3, r2
 8005d54:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d58:	691b      	ldr	r3, [r3, #16]
 8005d5a:	693a      	ldr	r2, [r7, #16]
 8005d5c:	0151      	lsls	r1, r2, #5
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	440a      	add	r2, r1
 8005d62:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d66:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005d6a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005d6e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005d70:	68bb      	ldr	r3, [r7, #8]
 8005d72:	699a      	ldr	r2, [r3, #24]
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	68db      	ldr	r3, [r3, #12]
 8005d78:	429a      	cmp	r2, r3
 8005d7a:	d903      	bls.n	8005d84 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	68da      	ldr	r2, [r3, #12]
 8005d80:	68bb      	ldr	r3, [r7, #8]
 8005d82:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	015a      	lsls	r2, r3, #5
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	4413      	add	r3, r2
 8005d8c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005d90:	691b      	ldr	r3, [r3, #16]
 8005d92:	693a      	ldr	r2, [r7, #16]
 8005d94:	0151      	lsls	r1, r2, #5
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	440a      	add	r2, r1
 8005d9a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005d9e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005da2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	015a      	lsls	r2, r3, #5
 8005da8:	697b      	ldr	r3, [r7, #20]
 8005daa:	4413      	add	r3, r2
 8005dac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005db0:	691a      	ldr	r2, [r3, #16]
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	699b      	ldr	r3, [r3, #24]
 8005db6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dba:	6939      	ldr	r1, [r7, #16]
 8005dbc:	0148      	lsls	r0, r1, #5
 8005dbe:	6979      	ldr	r1, [r7, #20]
 8005dc0:	4401      	add	r1, r0
 8005dc2:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005dca:	79fb      	ldrb	r3, [r7, #7]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d11e      	bne.n	8005e0e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d009      	beq.n	8005dec <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005dd8:	693b      	ldr	r3, [r7, #16]
 8005dda:	015a      	lsls	r2, r3, #5
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	4413      	add	r3, r2
 8005de0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005de4:	461a      	mov	r2, r3
 8005de6:	68bb      	ldr	r3, [r7, #8]
 8005de8:	695b      	ldr	r3, [r3, #20]
 8005dea:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	015a      	lsls	r2, r3, #5
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	4413      	add	r3, r2
 8005df4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	693a      	ldr	r2, [r7, #16]
 8005dfc:	0151      	lsls	r1, r2, #5
 8005dfe:	697a      	ldr	r2, [r7, #20]
 8005e00:	440a      	add	r2, r1
 8005e02:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e06:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	e097      	b.n	8005f3e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005e0e:	693b      	ldr	r3, [r7, #16]
 8005e10:	015a      	lsls	r2, r3, #5
 8005e12:	697b      	ldr	r3, [r7, #20]
 8005e14:	4413      	add	r3, r2
 8005e16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	693a      	ldr	r2, [r7, #16]
 8005e1e:	0151      	lsls	r1, r2, #5
 8005e20:	697a      	ldr	r2, [r7, #20]
 8005e22:	440a      	add	r2, r1
 8005e24:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005e28:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005e2c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005e2e:	68bb      	ldr	r3, [r7, #8]
 8005e30:	699b      	ldr	r3, [r3, #24]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f000 8083 	beq.w	8005f3e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005e3e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005e40:	68bb      	ldr	r3, [r7, #8]
 8005e42:	781b      	ldrb	r3, [r3, #0]
 8005e44:	f003 030f 	and.w	r3, r3, #15
 8005e48:	2101      	movs	r1, #1
 8005e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8005e4e:	6979      	ldr	r1, [r7, #20]
 8005e50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005e54:	4313      	orrs	r3, r2
 8005e56:	634b      	str	r3, [r1, #52]	@ 0x34
 8005e58:	e071      	b.n	8005f3e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	693a      	ldr	r2, [r7, #16]
 8005e6a:	0151      	lsls	r1, r2, #5
 8005e6c:	697a      	ldr	r2, [r7, #20]
 8005e6e:	440a      	add	r2, r1
 8005e70:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e74:	0cdb      	lsrs	r3, r3, #19
 8005e76:	04db      	lsls	r3, r3, #19
 8005e78:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005e7a:	693b      	ldr	r3, [r7, #16]
 8005e7c:	015a      	lsls	r2, r3, #5
 8005e7e:	697b      	ldr	r3, [r7, #20]
 8005e80:	4413      	add	r3, r2
 8005e82:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005e86:	691b      	ldr	r3, [r3, #16]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	0151      	lsls	r1, r2, #5
 8005e8c:	697a      	ldr	r2, [r7, #20]
 8005e8e:	440a      	add	r2, r1
 8005e90:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005e94:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8005e98:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8005e9c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	699b      	ldr	r3, [r3, #24]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005ea6:	68bb      	ldr	r3, [r7, #8]
 8005ea8:	68da      	ldr	r2, [r3, #12]
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	68da      	ldr	r2, [r3, #12]
 8005eb2:	68bb      	ldr	r3, [r7, #8]
 8005eb4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	015a      	lsls	r2, r3, #5
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	4413      	add	r3, r2
 8005ebe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ec2:	691b      	ldr	r3, [r3, #16]
 8005ec4:	693a      	ldr	r2, [r7, #16]
 8005ec6:	0151      	lsls	r1, r2, #5
 8005ec8:	697a      	ldr	r2, [r7, #20]
 8005eca:	440a      	add	r2, r1
 8005ecc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ed0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005ed4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005ed6:	693b      	ldr	r3, [r7, #16]
 8005ed8:	015a      	lsls	r2, r3, #5
 8005eda:	697b      	ldr	r3, [r7, #20]
 8005edc:	4413      	add	r3, r2
 8005ede:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ee2:	691a      	ldr	r2, [r3, #16]
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	69db      	ldr	r3, [r3, #28]
 8005ee8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005eec:	6939      	ldr	r1, [r7, #16]
 8005eee:	0148      	lsls	r0, r1, #5
 8005ef0:	6979      	ldr	r1, [r7, #20]
 8005ef2:	4401      	add	r1, r0
 8005ef4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005efc:	79fb      	ldrb	r3, [r7, #7]
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d10d      	bne.n	8005f1e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005f02:	68bb      	ldr	r3, [r7, #8]
 8005f04:	691b      	ldr	r3, [r3, #16]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d009      	beq.n	8005f1e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	6919      	ldr	r1, [r3, #16]
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	015a      	lsls	r2, r3, #5
 8005f12:	697b      	ldr	r3, [r7, #20]
 8005f14:	4413      	add	r3, r2
 8005f16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f1a:	460a      	mov	r2, r1
 8005f1c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005f1e:	693b      	ldr	r3, [r7, #16]
 8005f20:	015a      	lsls	r2, r3, #5
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	4413      	add	r3, r2
 8005f26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	693a      	ldr	r2, [r7, #16]
 8005f2e:	0151      	lsls	r1, r2, #5
 8005f30:	697a      	ldr	r2, [r7, #20]
 8005f32:	440a      	add	r2, r1
 8005f34:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005f38:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8005f3c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005f3e:	2300      	movs	r3, #0
}
 8005f40:	4618      	mov	r0, r3
 8005f42:	371c      	adds	r7, #28
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f56:	2300      	movs	r3, #0
 8005f58:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	785b      	ldrb	r3, [r3, #1]
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d14a      	bne.n	8006000 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	781b      	ldrb	r3, [r3, #0]
 8005f6e:	015a      	lsls	r2, r3, #5
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	4413      	add	r3, r2
 8005f74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005f7e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005f82:	f040 8086 	bne.w	8006092 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	781b      	ldrb	r3, [r3, #0]
 8005f8a:	015a      	lsls	r2, r3, #5
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	4413      	add	r3, r2
 8005f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	7812      	ldrb	r2, [r2, #0]
 8005f9a:	0151      	lsls	r1, r2, #5
 8005f9c:	693a      	ldr	r2, [r7, #16]
 8005f9e:	440a      	add	r2, r1
 8005fa0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fa4:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005fa8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	781b      	ldrb	r3, [r3, #0]
 8005fae:	015a      	lsls	r2, r3, #5
 8005fb0:	693b      	ldr	r3, [r7, #16]
 8005fb2:	4413      	add	r3, r2
 8005fb4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	683a      	ldr	r2, [r7, #0]
 8005fbc:	7812      	ldrb	r2, [r2, #0]
 8005fbe:	0151      	lsls	r1, r2, #5
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	440a      	add	r2, r1
 8005fc4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005fc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005fcc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	3301      	adds	r3, #1
 8005fd2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d902      	bls.n	8005fe4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005fde:	2301      	movs	r3, #1
 8005fe0:	75fb      	strb	r3, [r7, #23]
          break;
 8005fe2:	e056      	b.n	8006092 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005fe4:	683b      	ldr	r3, [r7, #0]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	015a      	lsls	r2, r3, #5
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	4413      	add	r3, r2
 8005fee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005ffc:	d0e7      	beq.n	8005fce <USB_EPStopXfer+0x82>
 8005ffe:	e048      	b.n	8006092 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	781b      	ldrb	r3, [r3, #0]
 8006004:	015a      	lsls	r2, r3, #5
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	4413      	add	r3, r2
 800600a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8006014:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006018:	d13b      	bne.n	8006092 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	781b      	ldrb	r3, [r3, #0]
 800601e:	015a      	lsls	r2, r3, #5
 8006020:	693b      	ldr	r3, [r7, #16]
 8006022:	4413      	add	r3, r2
 8006024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	683a      	ldr	r2, [r7, #0]
 800602c:	7812      	ldrb	r2, [r2, #0]
 800602e:	0151      	lsls	r1, r2, #5
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	440a      	add	r2, r1
 8006034:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006038:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800603c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800603e:	683b      	ldr	r3, [r7, #0]
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	015a      	lsls	r2, r3, #5
 8006044:	693b      	ldr	r3, [r7, #16]
 8006046:	4413      	add	r3, r2
 8006048:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	683a      	ldr	r2, [r7, #0]
 8006050:	7812      	ldrb	r2, [r2, #0]
 8006052:	0151      	lsls	r1, r2, #5
 8006054:	693a      	ldr	r2, [r7, #16]
 8006056:	440a      	add	r2, r1
 8006058:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800605c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8006060:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	3301      	adds	r3, #1
 8006066:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800606e:	4293      	cmp	r3, r2
 8006070:	d902      	bls.n	8006078 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	75fb      	strb	r3, [r7, #23]
          break;
 8006076:	e00c      	b.n	8006092 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8006078:	683b      	ldr	r3, [r7, #0]
 800607a:	781b      	ldrb	r3, [r3, #0]
 800607c:	015a      	lsls	r2, r3, #5
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	4413      	add	r3, r2
 8006082:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800608c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006090:	d0e7      	beq.n	8006062 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8006092:	7dfb      	ldrb	r3, [r7, #23]
}
 8006094:	4618      	mov	r0, r3
 8006096:	371c      	adds	r7, #28
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b089      	sub	sp, #36	@ 0x24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	60f8      	str	r0, [r7, #12]
 80060a8:	60b9      	str	r1, [r7, #8]
 80060aa:	4611      	mov	r1, r2
 80060ac:	461a      	mov	r2, r3
 80060ae:	460b      	mov	r3, r1
 80060b0:	71fb      	strb	r3, [r7, #7]
 80060b2:	4613      	mov	r3, r2
 80060b4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80060ba:	68bb      	ldr	r3, [r7, #8]
 80060bc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80060be:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d123      	bne.n	800610e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80060c6:	88bb      	ldrh	r3, [r7, #4]
 80060c8:	3303      	adds	r3, #3
 80060ca:	089b      	lsrs	r3, r3, #2
 80060cc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80060ce:	2300      	movs	r3, #0
 80060d0:	61bb      	str	r3, [r7, #24]
 80060d2:	e018      	b.n	8006106 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80060d4:	79fb      	ldrb	r3, [r7, #7]
 80060d6:	031a      	lsls	r2, r3, #12
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80060e0:	461a      	mov	r2, r3
 80060e2:	69fb      	ldr	r3, [r7, #28]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80060e8:	69fb      	ldr	r3, [r7, #28]
 80060ea:	3301      	adds	r3, #1
 80060ec:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060ee:	69fb      	ldr	r3, [r7, #28]
 80060f0:	3301      	adds	r3, #1
 80060f2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	3301      	adds	r3, #1
 80060f8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	3301      	adds	r3, #1
 80060fe:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006100:	69bb      	ldr	r3, [r7, #24]
 8006102:	3301      	adds	r3, #1
 8006104:	61bb      	str	r3, [r7, #24]
 8006106:	69ba      	ldr	r2, [r7, #24]
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	429a      	cmp	r2, r3
 800610c:	d3e2      	bcc.n	80060d4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800610e:	2300      	movs	r3, #0
}
 8006110:	4618      	mov	r0, r3
 8006112:	3724      	adds	r7, #36	@ 0x24
 8006114:	46bd      	mov	sp, r7
 8006116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800611a:	4770      	bx	lr

0800611c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800611c:	b480      	push	{r7}
 800611e:	b08b      	sub	sp, #44	@ 0x2c
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	4613      	mov	r3, r2
 8006128:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800612e:	68bb      	ldr	r3, [r7, #8]
 8006130:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006132:	88fb      	ldrh	r3, [r7, #6]
 8006134:	089b      	lsrs	r3, r3, #2
 8006136:	b29b      	uxth	r3, r3
 8006138:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800613a:	88fb      	ldrh	r3, [r7, #6]
 800613c:	f003 0303 	and.w	r3, r3, #3
 8006140:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006142:	2300      	movs	r3, #0
 8006144:	623b      	str	r3, [r7, #32]
 8006146:	e014      	b.n	8006172 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006148:	69bb      	ldr	r3, [r7, #24]
 800614a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006152:	601a      	str	r2, [r3, #0]
    pDest++;
 8006154:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006156:	3301      	adds	r3, #1
 8006158:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800615a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800615c:	3301      	adds	r3, #1
 800615e:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006162:	3301      	adds	r3, #1
 8006164:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006168:	3301      	adds	r3, #1
 800616a:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	3301      	adds	r3, #1
 8006170:	623b      	str	r3, [r7, #32]
 8006172:	6a3a      	ldr	r2, [r7, #32]
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	429a      	cmp	r2, r3
 8006178:	d3e6      	bcc.n	8006148 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800617a:	8bfb      	ldrh	r3, [r7, #30]
 800617c:	2b00      	cmp	r3, #0
 800617e:	d01e      	beq.n	80061be <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006180:	2300      	movs	r3, #0
 8006182:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800618a:	461a      	mov	r2, r3
 800618c:	f107 0310 	add.w	r3, r7, #16
 8006190:	6812      	ldr	r2, [r2, #0]
 8006192:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006194:	693a      	ldr	r2, [r7, #16]
 8006196:	6a3b      	ldr	r3, [r7, #32]
 8006198:	b2db      	uxtb	r3, r3
 800619a:	00db      	lsls	r3, r3, #3
 800619c:	fa22 f303 	lsr.w	r3, r2, r3
 80061a0:	b2da      	uxtb	r2, r3
 80061a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061a4:	701a      	strb	r2, [r3, #0]
      i++;
 80061a6:	6a3b      	ldr	r3, [r7, #32]
 80061a8:	3301      	adds	r3, #1
 80061aa:	623b      	str	r3, [r7, #32]
      pDest++;
 80061ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061ae:	3301      	adds	r3, #1
 80061b0:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80061b2:	8bfb      	ldrh	r3, [r7, #30]
 80061b4:	3b01      	subs	r3, #1
 80061b6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80061b8:	8bfb      	ldrh	r3, [r7, #30]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d1ea      	bne.n	8006194 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80061be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80061c0:	4618      	mov	r0, r3
 80061c2:	372c      	adds	r7, #44	@ 0x2c
 80061c4:	46bd      	mov	sp, r7
 80061c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ca:	4770      	bx	lr

080061cc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80061cc:	b480      	push	{r7}
 80061ce:	b085      	sub	sp, #20
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
 80061d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	781b      	ldrb	r3, [r3, #0]
 80061de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	785b      	ldrb	r3, [r3, #1]
 80061e4:	2b01      	cmp	r3, #1
 80061e6:	d12c      	bne.n	8006242 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	015a      	lsls	r2, r3, #5
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	4413      	add	r3, r2
 80061f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	db12      	blt.n	8006220 <USB_EPSetStall+0x54>
 80061fa:	68bb      	ldr	r3, [r7, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d00f      	beq.n	8006220 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	015a      	lsls	r2, r3, #5
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	4413      	add	r3, r2
 8006208:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	68ba      	ldr	r2, [r7, #8]
 8006210:	0151      	lsls	r1, r2, #5
 8006212:	68fa      	ldr	r2, [r7, #12]
 8006214:	440a      	add	r2, r1
 8006216:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800621a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800621e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	015a      	lsls	r2, r3, #5
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	4413      	add	r3, r2
 8006228:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	68ba      	ldr	r2, [r7, #8]
 8006230:	0151      	lsls	r1, r2, #5
 8006232:	68fa      	ldr	r2, [r7, #12]
 8006234:	440a      	add	r2, r1
 8006236:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800623a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800623e:	6013      	str	r3, [r2, #0]
 8006240:	e02b      	b.n	800629a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	015a      	lsls	r2, r3, #5
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4413      	add	r3, r2
 800624a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	db12      	blt.n	800627a <USB_EPSetStall+0xae>
 8006254:	68bb      	ldr	r3, [r7, #8]
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00f      	beq.n	800627a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	015a      	lsls	r2, r3, #5
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4413      	add	r3, r2
 8006262:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	68ba      	ldr	r2, [r7, #8]
 800626a:	0151      	lsls	r1, r2, #5
 800626c:	68fa      	ldr	r2, [r7, #12]
 800626e:	440a      	add	r2, r1
 8006270:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006274:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006278:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	015a      	lsls	r2, r3, #5
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	4413      	add	r3, r2
 8006282:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	0151      	lsls	r1, r2, #5
 800628c:	68fa      	ldr	r2, [r7, #12]
 800628e:	440a      	add	r2, r1
 8006290:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006294:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006298:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800629a:	2300      	movs	r3, #0
}
 800629c:	4618      	mov	r0, r3
 800629e:	3714      	adds	r7, #20
 80062a0:	46bd      	mov	sp, r7
 80062a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a6:	4770      	bx	lr

080062a8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80062a8:	b480      	push	{r7}
 80062aa:	b085      	sub	sp, #20
 80062ac:	af00      	add	r7, sp, #0
 80062ae:	6078      	str	r0, [r7, #4]
 80062b0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	781b      	ldrb	r3, [r3, #0]
 80062ba:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	785b      	ldrb	r3, [r3, #1]
 80062c0:	2b01      	cmp	r3, #1
 80062c2:	d128      	bne.n	8006316 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	015a      	lsls	r2, r3, #5
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	4413      	add	r3, r2
 80062cc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68ba      	ldr	r2, [r7, #8]
 80062d4:	0151      	lsls	r1, r2, #5
 80062d6:	68fa      	ldr	r2, [r7, #12]
 80062d8:	440a      	add	r2, r1
 80062da:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80062de:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80062e2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80062e4:	683b      	ldr	r3, [r7, #0]
 80062e6:	791b      	ldrb	r3, [r3, #4]
 80062e8:	2b03      	cmp	r3, #3
 80062ea:	d003      	beq.n	80062f4 <USB_EPClearStall+0x4c>
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	791b      	ldrb	r3, [r3, #4]
 80062f0:	2b02      	cmp	r3, #2
 80062f2:	d138      	bne.n	8006366 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	015a      	lsls	r2, r3, #5
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	4413      	add	r3, r2
 80062fc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	68ba      	ldr	r2, [r7, #8]
 8006304:	0151      	lsls	r1, r2, #5
 8006306:	68fa      	ldr	r2, [r7, #12]
 8006308:	440a      	add	r2, r1
 800630a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800630e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006312:	6013      	str	r3, [r2, #0]
 8006314:	e027      	b.n	8006366 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006316:	68bb      	ldr	r3, [r7, #8]
 8006318:	015a      	lsls	r2, r3, #5
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	4413      	add	r3, r2
 800631e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	0151      	lsls	r1, r2, #5
 8006328:	68fa      	ldr	r2, [r7, #12]
 800632a:	440a      	add	r2, r1
 800632c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006330:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8006334:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	791b      	ldrb	r3, [r3, #4]
 800633a:	2b03      	cmp	r3, #3
 800633c:	d003      	beq.n	8006346 <USB_EPClearStall+0x9e>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	791b      	ldrb	r3, [r3, #4]
 8006342:	2b02      	cmp	r3, #2
 8006344:	d10f      	bne.n	8006366 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006346:	68bb      	ldr	r3, [r7, #8]
 8006348:	015a      	lsls	r2, r3, #5
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	4413      	add	r3, r2
 800634e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	68ba      	ldr	r2, [r7, #8]
 8006356:	0151      	lsls	r1, r2, #5
 8006358:	68fa      	ldr	r2, [r7, #12]
 800635a:	440a      	add	r2, r1
 800635c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006360:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006364:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006366:	2300      	movs	r3, #0
}
 8006368:	4618      	mov	r0, r3
 800636a:	3714      	adds	r7, #20
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	460b      	mov	r3, r1
 800637e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68fa      	ldr	r2, [r7, #12]
 800638e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006392:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8006396:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	78fb      	ldrb	r3, [r7, #3]
 80063a2:	011b      	lsls	r3, r3, #4
 80063a4:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80063a8:	68f9      	ldr	r1, [r7, #12]
 80063aa:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80063ae:	4313      	orrs	r3, r2
 80063b0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80063b2:	2300      	movs	r3, #0
}
 80063b4:	4618      	mov	r0, r3
 80063b6:	3714      	adds	r7, #20
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr

080063c0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80063c0:	b480      	push	{r7}
 80063c2:	b085      	sub	sp, #20
 80063c4:	af00      	add	r7, sp, #0
 80063c6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80063da:	f023 0303 	bic.w	r3, r3, #3
 80063de:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80063ee:	f023 0302 	bic.w	r3, r3, #2
 80063f2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr

08006402 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006402:	b480      	push	{r7}
 8006404:	b085      	sub	sp, #20
 8006406:	af00      	add	r7, sp, #0
 8006408:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	68fa      	ldr	r2, [r7, #12]
 8006418:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800641c:	f023 0303 	bic.w	r3, r3, #3
 8006420:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006428:	685b      	ldr	r3, [r3, #4]
 800642a:	68fa      	ldr	r2, [r7, #12]
 800642c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8006430:	f043 0302 	orr.w	r3, r3, #2
 8006434:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006436:	2300      	movs	r3, #0
}
 8006438:	4618      	mov	r0, r3
 800643a:	3714      	adds	r7, #20
 800643c:	46bd      	mov	sp, r7
 800643e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006442:	4770      	bx	lr

08006444 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
 800644a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	695b      	ldr	r3, [r3, #20]
 8006450:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	699b      	ldr	r3, [r3, #24]
 8006456:	68fa      	ldr	r2, [r7, #12]
 8006458:	4013      	ands	r3, r2
 800645a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800645c:	68fb      	ldr	r3, [r7, #12]
}
 800645e:	4618      	mov	r0, r3
 8006460:	3714      	adds	r7, #20
 8006462:	46bd      	mov	sp, r7
 8006464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006468:	4770      	bx	lr

0800646a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800646a:	b480      	push	{r7}
 800646c:	b085      	sub	sp, #20
 800646e:	af00      	add	r7, sp, #0
 8006470:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800647c:	699b      	ldr	r3, [r3, #24]
 800647e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006486:	69db      	ldr	r3, [r3, #28]
 8006488:	68ba      	ldr	r2, [r7, #8]
 800648a:	4013      	ands	r3, r2
 800648c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	0c1b      	lsrs	r3, r3, #16
}
 8006492:	4618      	mov	r0, r3
 8006494:	3714      	adds	r7, #20
 8006496:	46bd      	mov	sp, r7
 8006498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649c:	4770      	bx	lr

0800649e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800649e:	b480      	push	{r7}
 80064a0:	b085      	sub	sp, #20
 80064a2:	af00      	add	r7, sp, #0
 80064a4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064ba:	69db      	ldr	r3, [r3, #28]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	4013      	ands	r3, r2
 80064c0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	b29b      	uxth	r3, r3
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3714      	adds	r7, #20
 80064ca:	46bd      	mov	sp, r7
 80064cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d0:	4770      	bx	lr

080064d2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80064d2:	b480      	push	{r7}
 80064d4:	b085      	sub	sp, #20
 80064d6:	af00      	add	r7, sp, #0
 80064d8:	6078      	str	r0, [r7, #4]
 80064da:	460b      	mov	r3, r1
 80064dc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80064e2:	78fb      	ldrb	r3, [r7, #3]
 80064e4:	015a      	lsls	r2, r3, #5
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4413      	add	r3, r2
 80064ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80064ee:	689b      	ldr	r3, [r3, #8]
 80064f0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80064f8:	695b      	ldr	r3, [r3, #20]
 80064fa:	68ba      	ldr	r2, [r7, #8]
 80064fc:	4013      	ands	r3, r2
 80064fe:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006500:	68bb      	ldr	r3, [r7, #8]
}
 8006502:	4618      	mov	r0, r3
 8006504:	3714      	adds	r7, #20
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800650e:	b480      	push	{r7}
 8006510:	b087      	sub	sp, #28
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	460b      	mov	r3, r1
 8006518:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006528:	697b      	ldr	r3, [r7, #20]
 800652a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800652e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006530:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006532:	78fb      	ldrb	r3, [r7, #3]
 8006534:	f003 030f 	and.w	r3, r3, #15
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	fa22 f303 	lsr.w	r3, r2, r3
 800653e:	01db      	lsls	r3, r3, #7
 8006540:	b2db      	uxtb	r3, r3
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006548:	78fb      	ldrb	r3, [r7, #3]
 800654a:	015a      	lsls	r2, r3, #5
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	4413      	add	r3, r2
 8006550:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	4013      	ands	r3, r2
 800655a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800655c:	68bb      	ldr	r3, [r7, #8]
}
 800655e:	4618      	mov	r0, r3
 8006560:	371c      	adds	r7, #28
 8006562:	46bd      	mov	sp, r7
 8006564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006568:	4770      	bx	lr

0800656a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800656a:	b480      	push	{r7}
 800656c:	b083      	sub	sp, #12
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	f003 0301 	and.w	r3, r3, #1
}
 800657a:	4618      	mov	r0, r3
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006586:	b480      	push	{r7}
 8006588:	b085      	sub	sp, #20
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68fa      	ldr	r2, [r7, #12]
 800659c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80065a0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80065a4:	f023 0307 	bic.w	r3, r3, #7
 80065a8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80065b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065bc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80065be:	2300      	movs	r3, #0
}
 80065c0:	4618      	mov	r0, r3
 80065c2:	3714      	adds	r7, #20
 80065c4:	46bd      	mov	sp, r7
 80065c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ca:	4770      	bx	lr

080065cc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80065cc:	b480      	push	{r7}
 80065ce:	b087      	sub	sp, #28
 80065d0:	af00      	add	r7, sp, #0
 80065d2:	60f8      	str	r0, [r7, #12]
 80065d4:	460b      	mov	r3, r1
 80065d6:	607a      	str	r2, [r7, #4]
 80065d8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	333c      	adds	r3, #60	@ 0x3c
 80065e2:	3304      	adds	r3, #4
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	4a26      	ldr	r2, [pc, #152]	@ (8006684 <USB_EP0_OutStart+0xb8>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d90a      	bls.n	8006606 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80065fc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8006600:	d101      	bne.n	8006606 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006602:	2300      	movs	r3, #0
 8006604:	e037      	b.n	8006676 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800660c:	461a      	mov	r2, r3
 800660e:	2300      	movs	r3, #0
 8006610:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	697a      	ldr	r2, [r7, #20]
 800661c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006620:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8006624:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006626:	697b      	ldr	r3, [r7, #20]
 8006628:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	697a      	ldr	r2, [r7, #20]
 8006630:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006634:	f043 0318 	orr.w	r3, r3, #24
 8006638:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006640:	691b      	ldr	r3, [r3, #16]
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8006648:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800664c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800664e:	7afb      	ldrb	r3, [r7, #11]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d10f      	bne.n	8006674 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800665a:	461a      	mov	r2, r3
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	697a      	ldr	r2, [r7, #20]
 800666a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800666e:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8006672:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	371c      	adds	r7, #28
 800667a:	46bd      	mov	sp, r7
 800667c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006680:	4770      	bx	lr
 8006682:	bf00      	nop
 8006684:	4f54300a 	.word	0x4f54300a

08006688 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006688:	b480      	push	{r7}
 800668a:	b085      	sub	sp, #20
 800668c:	af00      	add	r7, sp, #0
 800668e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006690:	2300      	movs	r3, #0
 8006692:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	3301      	adds	r3, #1
 8006698:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	4a13      	ldr	r2, [pc, #76]	@ (80066ec <USB_CoreReset+0x64>)
 800669e:	4293      	cmp	r3, r2
 80066a0:	d901      	bls.n	80066a6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80066a2:	2303      	movs	r3, #3
 80066a4:	e01b      	b.n	80066de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	691b      	ldr	r3, [r3, #16]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	daf2      	bge.n	8006694 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80066ae:	2300      	movs	r3, #0
 80066b0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	f043 0201 	orr.w	r2, r3, #1
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	3301      	adds	r3, #1
 80066c2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	4a09      	ldr	r2, [pc, #36]	@ (80066ec <USB_CoreReset+0x64>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d901      	bls.n	80066d0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80066cc:	2303      	movs	r3, #3
 80066ce:	e006      	b.n	80066de <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	f003 0301 	and.w	r3, r3, #1
 80066d8:	2b01      	cmp	r3, #1
 80066da:	d0f0      	beq.n	80066be <USB_CoreReset+0x36>

  return HAL_OK;
 80066dc:	2300      	movs	r3, #0
}
 80066de:	4618      	mov	r0, r3
 80066e0:	3714      	adds	r7, #20
 80066e2:	46bd      	mov	sp, r7
 80066e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e8:	4770      	bx	lr
 80066ea:	bf00      	nop
 80066ec:	00030d40 	.word	0x00030d40

080066f0 <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	460b      	mov	r3, r1
 80066fa:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80066fc:	2044      	movs	r0, #68	@ 0x44
 80066fe:	f002 fad3 	bl	8008ca8 <USBD_static_malloc>
 8006702:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d109      	bne.n	800671e <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	32b0      	adds	r2, #176	@ 0xb0
 8006714:	2100      	movs	r1, #0
 8006716:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800671a:	2302      	movs	r3, #2
 800671c:	e08b      	b.n	8006836 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	32b0      	adds	r2, #176	@ 0xb0
 8006728:	68f9      	ldr	r1, [r7, #12]
 800672a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	32b0      	adds	r2, #176	@ 0xb0
 8006738:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	7c1b      	ldrb	r3, [r3, #16]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d11b      	bne.n	8006782 <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 800674a:	4b3d      	ldr	r3, [pc, #244]	@ (8006840 <USBD_CUSTOM_HID_Init+0x150>)
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	f003 020f 	and.w	r2, r3, #15
 8006752:	6879      	ldr	r1, [r7, #4]
 8006754:	4613      	mov	r3, r2
 8006756:	009b      	lsls	r3, r3, #2
 8006758:	4413      	add	r3, r2
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	440b      	add	r3, r1
 800675e:	3326      	adds	r3, #38	@ 0x26
 8006760:	2205      	movs	r2, #5
 8006762:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006764:	4b37      	ldr	r3, [pc, #220]	@ (8006844 <USBD_CUSTOM_HID_Init+0x154>)
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	f003 020f 	and.w	r2, r3, #15
 800676c:	6879      	ldr	r1, [r7, #4]
 800676e:	4613      	mov	r3, r2
 8006770:	009b      	lsls	r3, r3, #2
 8006772:	4413      	add	r3, r2
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	440b      	add	r3, r1
 8006778:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 800677c:	2205      	movs	r2, #5
 800677e:	801a      	strh	r2, [r3, #0]
 8006780:	e01a      	b.n	80067b8 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006782:	4b2f      	ldr	r3, [pc, #188]	@ (8006840 <USBD_CUSTOM_HID_Init+0x150>)
 8006784:	781b      	ldrb	r3, [r3, #0]
 8006786:	f003 020f 	and.w	r2, r3, #15
 800678a:	6879      	ldr	r1, [r7, #4]
 800678c:	4613      	mov	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4413      	add	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	440b      	add	r3, r1
 8006796:	3326      	adds	r3, #38	@ 0x26
 8006798:	2205      	movs	r2, #5
 800679a:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800679c:	4b29      	ldr	r3, [pc, #164]	@ (8006844 <USBD_CUSTOM_HID_Init+0x154>)
 800679e:	781b      	ldrb	r3, [r3, #0]
 80067a0:	f003 020f 	and.w	r2, r3, #15
 80067a4:	6879      	ldr	r1, [r7, #4]
 80067a6:	4613      	mov	r3, r2
 80067a8:	009b      	lsls	r3, r3, #2
 80067aa:	4413      	add	r3, r2
 80067ac:	009b      	lsls	r3, r3, #2
 80067ae:	440b      	add	r3, r1
 80067b0:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80067b4:	2205      	movs	r2, #5
 80067b6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80067b8:	4b21      	ldr	r3, [pc, #132]	@ (8006840 <USBD_CUSTOM_HID_Init+0x150>)
 80067ba:	7819      	ldrb	r1, [r3, #0]
 80067bc:	2302      	movs	r3, #2
 80067be:	2203      	movs	r2, #3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f002 f960 	bl	8008a86 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80067c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006840 <USBD_CUSTOM_HID_Init+0x150>)
 80067c8:	781b      	ldrb	r3, [r3, #0]
 80067ca:	f003 020f 	and.w	r2, r3, #15
 80067ce:	6879      	ldr	r1, [r7, #4]
 80067d0:	4613      	mov	r3, r2
 80067d2:	009b      	lsls	r3, r3, #2
 80067d4:	4413      	add	r3, r2
 80067d6:	009b      	lsls	r3, r3, #2
 80067d8:	440b      	add	r3, r1
 80067da:	3324      	adds	r3, #36	@ 0x24
 80067dc:	2201      	movs	r2, #1
 80067de:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80067e0:	4b18      	ldr	r3, [pc, #96]	@ (8006844 <USBD_CUSTOM_HID_Init+0x154>)
 80067e2:	7819      	ldrb	r1, [r3, #0]
 80067e4:	2302      	movs	r3, #2
 80067e6:	2203      	movs	r2, #3
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f002 f94c 	bl	8008a86 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80067ee:	4b15      	ldr	r3, [pc, #84]	@ (8006844 <USBD_CUSTOM_HID_Init+0x154>)
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	f003 020f 	and.w	r2, r3, #15
 80067f6:	6879      	ldr	r1, [r7, #4]
 80067f8:	4613      	mov	r3, r2
 80067fa:	009b      	lsls	r3, r3, #2
 80067fc:	4413      	add	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	440b      	add	r3, r1
 8006802:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006806:	2201      	movs	r2, #1
 8006808:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2200      	movs	r2, #0
 800680e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	33b0      	adds	r3, #176	@ 0xb0
 800681c:	009b      	lsls	r3, r3, #2
 800681e:	4413      	add	r3, r2
 8006820:	685b      	ldr	r3, [r3, #4]
 8006822:	685b      	ldr	r3, [r3, #4]
 8006824:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006826:	4b07      	ldr	r3, [pc, #28]	@ (8006844 <USBD_CUSTOM_HID_Init+0x154>)
 8006828:	7819      	ldrb	r1, [r3, #0]
 800682a:	68fa      	ldr	r2, [r7, #12]
 800682c:	2330      	movs	r3, #48	@ 0x30
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f002 fa18 	bl	8008c64 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8006834:	2300      	movs	r3, #0
}
 8006836:	4618      	mov	r0, r3
 8006838:	3710      	adds	r7, #16
 800683a:	46bd      	mov	sp, r7
 800683c:	bd80      	pop	{r7, pc}
 800683e:	bf00      	nop
 8006840:	20000106 	.word	0x20000106
 8006844:	20000107 	.word	0x20000107

08006848 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b082      	sub	sp, #8
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
 8006850:	460b      	mov	r3, r1
 8006852:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8006854:	4b37      	ldr	r3, [pc, #220]	@ (8006934 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006856:	781b      	ldrb	r3, [r3, #0]
 8006858:	4619      	mov	r1, r3
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f002 f939 	bl	8008ad2 <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 8006860:	4b34      	ldr	r3, [pc, #208]	@ (8006934 <USBD_CUSTOM_HID_DeInit+0xec>)
 8006862:	781b      	ldrb	r3, [r3, #0]
 8006864:	f003 020f 	and.w	r2, r3, #15
 8006868:	6879      	ldr	r1, [r7, #4]
 800686a:	4613      	mov	r3, r2
 800686c:	009b      	lsls	r3, r3, #2
 800686e:	4413      	add	r3, r2
 8006870:	009b      	lsls	r3, r3, #2
 8006872:	440b      	add	r3, r1
 8006874:	3324      	adds	r3, #36	@ 0x24
 8006876:	2200      	movs	r2, #0
 8006878:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 800687a:	4b2e      	ldr	r3, [pc, #184]	@ (8006934 <USBD_CUSTOM_HID_DeInit+0xec>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	f003 020f 	and.w	r2, r3, #15
 8006882:	6879      	ldr	r1, [r7, #4]
 8006884:	4613      	mov	r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	4413      	add	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	440b      	add	r3, r1
 800688e:	3326      	adds	r3, #38	@ 0x26
 8006890:	2200      	movs	r2, #0
 8006892:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8006894:	4b28      	ldr	r3, [pc, #160]	@ (8006938 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8006896:	781b      	ldrb	r3, [r3, #0]
 8006898:	4619      	mov	r1, r3
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f002 f919 	bl	8008ad2 <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 80068a0:	4b25      	ldr	r3, [pc, #148]	@ (8006938 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	f003 020f 	and.w	r2, r3, #15
 80068a8:	6879      	ldr	r1, [r7, #4]
 80068aa:	4613      	mov	r3, r2
 80068ac:	009b      	lsls	r3, r3, #2
 80068ae:	4413      	add	r3, r2
 80068b0:	009b      	lsls	r3, r3, #2
 80068b2:	440b      	add	r3, r1
 80068b4:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80068b8:	2200      	movs	r2, #0
 80068ba:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80068bc:	4b1e      	ldr	r3, [pc, #120]	@ (8006938 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80068be:	781b      	ldrb	r3, [r3, #0]
 80068c0:	f003 020f 	and.w	r2, r3, #15
 80068c4:	6879      	ldr	r1, [r7, #4]
 80068c6:	4613      	mov	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4413      	add	r3, r2
 80068cc:	009b      	lsls	r3, r3, #2
 80068ce:	440b      	add	r3, r1
 80068d0:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80068d4:	2200      	movs	r2, #0
 80068d6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	32b0      	adds	r2, #176	@ 0xb0
 80068e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d01f      	beq.n	800692a <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80068f0:	687a      	ldr	r2, [r7, #4]
 80068f2:	33b0      	adds	r3, #176	@ 0xb0
 80068f4:	009b      	lsls	r3, r3, #2
 80068f6:	4413      	add	r3, r2
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	32b0      	adds	r2, #176	@ 0xb0
 8006908:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690c:	4618      	mov	r0, r3
 800690e:	f002 f9d9 	bl	8008cc4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	32b0      	adds	r2, #176	@ 0xb0
 800691c:	2100      	movs	r1, #0
 800691e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800692a:	2300      	movs	r3, #0
}
 800692c:	4618      	mov	r0, r3
 800692e:	3708      	adds	r7, #8
 8006930:	46bd      	mov	sp, r7
 8006932:	bd80      	pop	{r7, pc}
 8006934:	20000106 	.word	0x20000106
 8006938:	20000107 	.word	0x20000107

0800693c <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	32b0      	adds	r2, #176	@ 0xb0
 8006950:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006954:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 800695a:	2300      	movs	r3, #0
 800695c:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800695e:	2300      	movs	r3, #0
 8006960:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8006966:	693b      	ldr	r3, [r7, #16]
 8006968:	2b00      	cmp	r3, #0
 800696a:	d101      	bne.n	8006970 <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 800696c:	2303      	movs	r3, #3
 800696e:	e0f8      	b.n	8006b62 <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006978:	2b00      	cmp	r3, #0
 800697a:	d056      	beq.n	8006a2a <USBD_CUSTOM_HID_Setup+0xee>
 800697c:	2b20      	cmp	r3, #32
 800697e:	f040 80e8 	bne.w	8006b52 <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	785b      	ldrb	r3, [r3, #1]
 8006986:	3b02      	subs	r3, #2
 8006988:	2b09      	cmp	r3, #9
 800698a:	d846      	bhi.n	8006a1a <USBD_CUSTOM_HID_Setup+0xde>
 800698c:	a201      	add	r2, pc, #4	@ (adr r2, 8006994 <USBD_CUSTOM_HID_Setup+0x58>)
 800698e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006992:	bf00      	nop
 8006994:	080069ed 	.word	0x080069ed
 8006998:	080069cb 	.word	0x080069cb
 800699c:	08006a1b 	.word	0x08006a1b
 80069a0:	08006a1b 	.word	0x08006a1b
 80069a4:	08006a1b 	.word	0x08006a1b
 80069a8:	08006a1b 	.word	0x08006a1b
 80069ac:	08006a1b 	.word	0x08006a1b
 80069b0:	080069fd 	.word	0x080069fd
 80069b4:	080069db 	.word	0x080069db
 80069b8:	080069bd 	.word	0x080069bd
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	885b      	ldrh	r3, [r3, #2]
 80069c0:	b2db      	uxtb	r3, r3
 80069c2:	461a      	mov	r2, r3
 80069c4:	693b      	ldr	r3, [r7, #16]
 80069c6:	631a      	str	r2, [r3, #48]	@ 0x30
          break;
 80069c8:	e02e      	b.n	8006a28 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	3330      	adds	r3, #48	@ 0x30
 80069ce:	2201      	movs	r2, #1
 80069d0:	4619      	mov	r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f001 fccc 	bl	8008370 <USBD_CtlSendData>
          break;
 80069d8:	e026      	b.n	8006a28 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	885b      	ldrh	r3, [r3, #2]
 80069de:	0a1b      	lsrs	r3, r3, #8
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	461a      	mov	r2, r3
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	635a      	str	r2, [r3, #52]	@ 0x34
          break;
 80069ea:	e01d      	b.n	8006a28 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80069ec:	693b      	ldr	r3, [r7, #16]
 80069ee:	3334      	adds	r3, #52	@ 0x34
 80069f0:	2201      	movs	r2, #1
 80069f2:	4619      	mov	r1, r3
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f001 fcbb 	bl	8008370 <USBD_CtlSendData>
          break;
 80069fa:	e015      	b.n	8006a28 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	2201      	movs	r2, #1
 8006a00:	63da      	str	r2, [r3, #60]	@ 0x3c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006a02:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	88db      	ldrh	r3, [r3, #6]
 8006a08:	2b30      	cmp	r3, #48	@ 0x30
 8006a0a:	bf28      	it	cs
 8006a0c:	2330      	movcs	r3, #48	@ 0x30
 8006a0e:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 8006a10:	461a      	mov	r2, r3
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	f001 fcd8 	bl	80083c8 <USBD_CtlPrepareRx>
          break;
 8006a18:	e006      	b.n	8006a28 <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 8006a1a:	6839      	ldr	r1, [r7, #0]
 8006a1c:	6878      	ldr	r0, [r7, #4]
 8006a1e:	f001 fc36 	bl	800828e <USBD_CtlError>
          ret = USBD_FAIL;
 8006a22:	2303      	movs	r3, #3
 8006a24:	75fb      	strb	r3, [r7, #23]
          break;
 8006a26:	bf00      	nop
      }
      break;
 8006a28:	e09a      	b.n	8006b60 <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	785b      	ldrb	r3, [r3, #1]
 8006a2e:	2b0b      	cmp	r3, #11
 8006a30:	f200 8086 	bhi.w	8006b40 <USBD_CUSTOM_HID_Setup+0x204>
 8006a34:	a201      	add	r2, pc, #4	@ (adr r2, 8006a3c <USBD_CUSTOM_HID_Setup+0x100>)
 8006a36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a3a:	bf00      	nop
 8006a3c:	08006a6d 	.word	0x08006a6d
 8006a40:	08006b4f 	.word	0x08006b4f
 8006a44:	08006b41 	.word	0x08006b41
 8006a48:	08006b41 	.word	0x08006b41
 8006a4c:	08006b41 	.word	0x08006b41
 8006a50:	08006b41 	.word	0x08006b41
 8006a54:	08006a97 	.word	0x08006a97
 8006a58:	08006b41 	.word	0x08006b41
 8006a5c:	08006b41 	.word	0x08006b41
 8006a60:	08006b41 	.word	0x08006b41
 8006a64:	08006aef 	.word	0x08006aef
 8006a68:	08006b19 	.word	0x08006b19
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a72:	b2db      	uxtb	r3, r3
 8006a74:	2b03      	cmp	r3, #3
 8006a76:	d107      	bne.n	8006a88 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006a78:	f107 030e 	add.w	r3, r7, #14
 8006a7c:	2202      	movs	r2, #2
 8006a7e:	4619      	mov	r1, r3
 8006a80:	6878      	ldr	r0, [r7, #4]
 8006a82:	f001 fc75 	bl	8008370 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006a86:	e063      	b.n	8006b50 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006a88:	6839      	ldr	r1, [r7, #0]
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f001 fbff 	bl	800828e <USBD_CtlError>
            ret = USBD_FAIL;
 8006a90:	2303      	movs	r3, #3
 8006a92:	75fb      	strb	r3, [r7, #23]
          break;
 8006a94:	e05c      	b.n	8006b50 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	885b      	ldrh	r3, [r3, #2]
 8006a9a:	0a1b      	lsrs	r3, r3, #8
 8006a9c:	b29b      	uxth	r3, r3
 8006a9e:	2b22      	cmp	r3, #34	@ 0x22
 8006aa0:	d110      	bne.n	8006ac4 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	88db      	ldrh	r3, [r3, #6]
 8006aa6:	2b66      	cmp	r3, #102	@ 0x66
 8006aa8:	bf28      	it	cs
 8006aaa:	2366      	movcs	r3, #102	@ 0x66
 8006aac:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	33b0      	adds	r3, #176	@ 0xb0
 8006ab8:	009b      	lsls	r3, r3, #2
 8006aba:	4413      	add	r3, r2
 8006abc:	685b      	ldr	r3, [r3, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	61bb      	str	r3, [r7, #24]
 8006ac2:	e00d      	b.n	8006ae0 <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	885b      	ldrh	r3, [r3, #2]
 8006ac8:	0a1b      	lsrs	r3, r3, #8
 8006aca:	b29b      	uxth	r3, r3
 8006acc:	2b21      	cmp	r3, #33	@ 0x21
 8006ace:	d107      	bne.n	8006ae0 <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 8006ad0:	4b26      	ldr	r3, [pc, #152]	@ (8006b6c <USBD_CUSTOM_HID_Setup+0x230>)
 8006ad2:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	88db      	ldrh	r3, [r3, #6]
 8006ad8:	2b09      	cmp	r3, #9
 8006ada:	bf28      	it	cs
 8006adc:	2309      	movcs	r3, #9
 8006ade:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006ae0:	8bfb      	ldrh	r3, [r7, #30]
 8006ae2:	461a      	mov	r2, r3
 8006ae4:	69b9      	ldr	r1, [r7, #24]
 8006ae6:	6878      	ldr	r0, [r7, #4]
 8006ae8:	f001 fc42 	bl	8008370 <USBD_CtlSendData>
          break;
 8006aec:	e030      	b.n	8006b50 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006af4:	b2db      	uxtb	r3, r3
 8006af6:	2b03      	cmp	r3, #3
 8006af8:	d107      	bne.n	8006b0a <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8006afa:	693b      	ldr	r3, [r7, #16]
 8006afc:	3338      	adds	r3, #56	@ 0x38
 8006afe:	2201      	movs	r2, #1
 8006b00:	4619      	mov	r1, r3
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	f001 fc34 	bl	8008370 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b08:	e022      	b.n	8006b50 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006b0a:	6839      	ldr	r1, [r7, #0]
 8006b0c:	6878      	ldr	r0, [r7, #4]
 8006b0e:	f001 fbbe 	bl	800828e <USBD_CtlError>
            ret = USBD_FAIL;
 8006b12:	2303      	movs	r3, #3
 8006b14:	75fb      	strb	r3, [r7, #23]
          break;
 8006b16:	e01b      	b.n	8006b50 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b1e:	b2db      	uxtb	r3, r3
 8006b20:	2b03      	cmp	r3, #3
 8006b22:	d106      	bne.n	8006b32 <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	885b      	ldrh	r3, [r3, #2]
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	693b      	ldr	r3, [r7, #16]
 8006b2e:	639a      	str	r2, [r3, #56]	@ 0x38
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006b30:	e00e      	b.n	8006b50 <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8006b32:	6839      	ldr	r1, [r7, #0]
 8006b34:	6878      	ldr	r0, [r7, #4]
 8006b36:	f001 fbaa 	bl	800828e <USBD_CtlError>
            ret = USBD_FAIL;
 8006b3a:	2303      	movs	r3, #3
 8006b3c:	75fb      	strb	r3, [r7, #23]
          break;
 8006b3e:	e007      	b.n	8006b50 <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006b40:	6839      	ldr	r1, [r7, #0]
 8006b42:	6878      	ldr	r0, [r7, #4]
 8006b44:	f001 fba3 	bl	800828e <USBD_CtlError>
          ret = USBD_FAIL;
 8006b48:	2303      	movs	r3, #3
 8006b4a:	75fb      	strb	r3, [r7, #23]
          break;
 8006b4c:	e000      	b.n	8006b50 <USBD_CUSTOM_HID_Setup+0x214>
          break;
 8006b4e:	bf00      	nop
      }
      break;
 8006b50:	e006      	b.n	8006b60 <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 8006b52:	6839      	ldr	r1, [r7, #0]
 8006b54:	6878      	ldr	r0, [r7, #4]
 8006b56:	f001 fb9a 	bl	800828e <USBD_CtlError>
      ret = USBD_FAIL;
 8006b5a:	2303      	movs	r3, #3
 8006b5c:	75fb      	strb	r3, [r7, #23]
      break;
 8006b5e:	bf00      	nop
  }
  return (uint8_t)ret;
 8006b60:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3720      	adds	r7, #32
 8006b66:	46bd      	mov	sp, r7
 8006b68:	bd80      	pop	{r7, pc}
 8006b6a:	bf00      	nop
 8006b6c:	200000f0 	.word	0x200000f0

08006b70 <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b086      	sub	sp, #24
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	60f8      	str	r0, [r7, #12]
 8006b78:	60b9      	str	r1, [r7, #8]
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	32b0      	adds	r2, #176	@ 0xb0
 8006b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <USBD_CUSTOM_HID_SendReport+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e021      	b.n	8006bd8 <USBD_CUSTOM_HID_SendReport+0x68>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	32b0      	adds	r2, #176	@ 0xb0
 8006b9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba2:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006baa:	b2db      	uxtb	r3, r3
 8006bac:	2b03      	cmp	r3, #3
 8006bae:	d112      	bne.n	8006bd6 <USBD_CUSTOM_HID_SendReport+0x66>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d10b      	bne.n	8006bd2 <USBD_CUSTOM_HID_SendReport+0x62>
    {
      hhid->state = CUSTOM_HID_BUSY;
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	2201      	movs	r2, #1
 8006bbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 8006bc2:	4b07      	ldr	r3, [pc, #28]	@ (8006be0 <USBD_CUSTOM_HID_SendReport+0x70>)
 8006bc4:	7819      	ldrb	r1, [r3, #0]
 8006bc6:	88fb      	ldrh	r3, [r7, #6]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	68f8      	ldr	r0, [r7, #12]
 8006bcc:	f002 f829 	bl	8008c22 <USBD_LL_Transmit>
 8006bd0:	e001      	b.n	8006bd6 <USBD_CUSTOM_HID_SendReport+0x66>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 8006bd2:	2301      	movs	r3, #1
 8006bd4:	e000      	b.n	8006bd8 <USBD_CUSTOM_HID_SendReport+0x68>
    }
  }
  return (uint8_t)USBD_OK;
 8006bd6:	2300      	movs	r3, #0
}
 8006bd8:	4618      	mov	r0, r3
 8006bda:	3718      	adds	r7, #24
 8006bdc:	46bd      	mov	sp, r7
 8006bde:	bd80      	pop	{r7, pc}
 8006be0:	20000106 	.word	0x20000106

08006be4 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b084      	sub	sp, #16
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006bec:	2181      	movs	r1, #129	@ 0x81
 8006bee:	4815      	ldr	r0, [pc, #84]	@ (8006c44 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006bf0:	f000 fd17 	bl	8007622 <USBD_GetEpDesc>
 8006bf4:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006bf6:	2101      	movs	r1, #1
 8006bf8:	4812      	ldr	r0, [pc, #72]	@ (8006c44 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 8006bfa:	f000 fd12 	bl	8007622 <USBD_GetEpDesc>
 8006bfe:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d009      	beq.n	8006c1a <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f042 0202 	orr.w	r2, r2, #2
 8006c0e:	711a      	strb	r2, [r3, #4]
 8006c10:	2200      	movs	r2, #0
 8006c12:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	2205      	movs	r2, #5
 8006c18:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c1a:	68bb      	ldr	r3, [r7, #8]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d009      	beq.n	8006c34 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f042 0202 	orr.w	r2, r2, #2
 8006c28:	711a      	strb	r2, [r3, #4]
 8006c2a:	2200      	movs	r2, #0
 8006c2c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	2205      	movs	r2, #5
 8006c32:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2229      	movs	r2, #41	@ 0x29
 8006c38:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006c3a:	4b02      	ldr	r3, [pc, #8]	@ (8006c44 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	200000c4 	.word	0x200000c4

08006c48 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006c50:	2181      	movs	r1, #129	@ 0x81
 8006c52:	4815      	ldr	r0, [pc, #84]	@ (8006ca8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006c54:	f000 fce5 	bl	8007622 <USBD_GetEpDesc>
 8006c58:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006c5a:	2101      	movs	r1, #1
 8006c5c:	4812      	ldr	r0, [pc, #72]	@ (8006ca8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8006c5e:	f000 fce0 	bl	8007622 <USBD_GetEpDesc>
 8006c62:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d009      	beq.n	8006c7e <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2200      	movs	r2, #0
 8006c6e:	f042 0202 	orr.w	r2, r2, #2
 8006c72:	711a      	strb	r2, [r3, #4]
 8006c74:	2200      	movs	r2, #0
 8006c76:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	2205      	movs	r2, #5
 8006c7c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d009      	beq.n	8006c98 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	2200      	movs	r2, #0
 8006c88:	f042 0202 	orr.w	r2, r2, #2
 8006c8c:	711a      	strb	r2, [r3, #4]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2205      	movs	r2, #5
 8006c96:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2229      	movs	r2, #41	@ 0x29
 8006c9c:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006c9e:	4b02      	ldr	r3, [pc, #8]	@ (8006ca8 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 8006ca0:	4618      	mov	r0, r3
 8006ca2:	3710      	adds	r7, #16
 8006ca4:	46bd      	mov	sp, r7
 8006ca6:	bd80      	pop	{r7, pc}
 8006ca8:	200000c4 	.word	0x200000c4

08006cac <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 8006cb4:	2181      	movs	r1, #129	@ 0x81
 8006cb6:	4815      	ldr	r0, [pc, #84]	@ (8006d0c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006cb8:	f000 fcb3 	bl	8007622 <USBD_GetEpDesc>
 8006cbc:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8006cbe:	2101      	movs	r1, #1
 8006cc0:	4812      	ldr	r0, [pc, #72]	@ (8006d0c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 8006cc2:	f000 fcae 	bl	8007622 <USBD_GetEpDesc>
 8006cc6:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d009      	beq.n	8006ce2 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	f042 0202 	orr.w	r2, r2, #2
 8006cd6:	711a      	strb	r2, [r3, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2205      	movs	r2, #5
 8006ce0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d009      	beq.n	8006cfc <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2200      	movs	r2, #0
 8006cec:	f042 0202 	orr.w	r2, r2, #2
 8006cf0:	711a      	strb	r2, [r3, #4]
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	2205      	movs	r2, #5
 8006cfa:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2229      	movs	r2, #41	@ 0x29
 8006d00:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8006d02:	4b02      	ldr	r3, [pc, #8]	@ (8006d0c <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3710      	adds	r7, #16
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	200000c4 	.word	0x200000c4

08006d10 <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d10:	b480      	push	{r7}
 8006d12:	b083      	sub	sp, #12
 8006d14:	af00      	add	r7, sp, #0
 8006d16:	6078      	str	r0, [r7, #4]
 8006d18:	460b      	mov	r3, r1
 8006d1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	32b0      	adds	r2, #176	@ 0xb0
 8006d26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return (uint8_t)USBD_OK;
 8006d30:	2300      	movs	r3, #0
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	370c      	adds	r7, #12
 8006d36:	46bd      	mov	sp, r7
 8006d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3c:	4770      	bx	lr

08006d3e <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006d3e:	b580      	push	{r7, lr}
 8006d40:	b084      	sub	sp, #16
 8006d42:	af00      	add	r7, sp, #0
 8006d44:	6078      	str	r0, [r7, #4]
 8006d46:	460b      	mov	r3, r1
 8006d48:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	32b0      	adds	r2, #176	@ 0xb0
 8006d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d101      	bne.n	8006d60 <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006d5c:	2303      	movs	r3, #3
 8006d5e:	e017      	b.n	8006d90 <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	32b0      	adds	r2, #176	@ 0xb0
 8006d6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	33b0      	adds	r3, #176	@ 0xb0
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	68fa      	ldr	r2, [r7, #12]
 8006d84:	7810      	ldrb	r0, [r2, #0]
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	7852      	ldrb	r2, [r2, #1]
 8006d8a:	4611      	mov	r1, r2
 8006d8c:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 8006d8e:	2300      	movs	r3, #0
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b084      	sub	sp, #16
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	32b0      	adds	r2, #176	@ 0xb0
 8006daa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d101      	bne.n	8006db6 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 8006db2:	2303      	movs	r3, #3
 8006db4:	e00f      	b.n	8006dd6 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	32b0      	adds	r2, #176	@ 0xb0
 8006dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dc4:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8006dc6:	4b06      	ldr	r3, [pc, #24]	@ (8006de0 <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 8006dc8:	7819      	ldrb	r1, [r3, #0]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	2330      	movs	r3, #48	@ 0x30
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f001 ff48 	bl	8008c64 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8006dd4:	2300      	movs	r3, #0
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	3710      	adds	r7, #16
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	20000107 	.word	0x20000107

08006de4 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b084      	sub	sp, #16
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	32b0      	adds	r2, #176	@ 0xb0
 8006df6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006dfa:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d101      	bne.n	8006e06 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e016      	b.n	8006e34 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e0a:	2b01      	cmp	r3, #1
 8006e0c:	d111      	bne.n	8006e32 <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	33b0      	adds	r3, #176	@ 0xb0
 8006e18:	009b      	lsls	r3, r3, #2
 8006e1a:	4413      	add	r3, r2
 8006e1c:	685b      	ldr	r3, [r3, #4]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	68fa      	ldr	r2, [r7, #12]
 8006e22:	7810      	ldrb	r0, [r2, #0]
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	7852      	ldrb	r2, [r2, #1]
 8006e28:	4611      	mov	r1, r2
 8006e2a:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2200      	movs	r2, #0
 8006e30:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  return (uint8_t)USBD_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	3710      	adds	r7, #16
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006e3c:	b480      	push	{r7}
 8006e3e:	b083      	sub	sp, #12
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	220a      	movs	r2, #10
 8006e48:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8006e4a:	4b03      	ldr	r3, [pc, #12]	@ (8006e58 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006e4c:	4618      	mov	r0, r3
 8006e4e:	370c      	adds	r7, #12
 8006e50:	46bd      	mov	sp, r7
 8006e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e56:	4770      	bx	lr
 8006e58:	200000fc 	.word	0x200000fc

08006e5c <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b083      	sub	sp, #12
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	6078      	str	r0, [r7, #4]
 8006e64:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d101      	bne.n	8006e70 <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006e6c:	2303      	movs	r3, #3
 8006e6e:	e009      	b.n	8006e84 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006e76:	687a      	ldr	r2, [r7, #4]
 8006e78:	33b0      	adds	r3, #176	@ 0xb0
 8006e7a:	009b      	lsls	r3, r3, #2
 8006e7c:	4413      	add	r3, r2
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8006e82:	2300      	movs	r3, #0
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr

08006e90 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	60f8      	str	r0, [r7, #12]
 8006e98:	60b9      	str	r1, [r7, #8]
 8006e9a:	4613      	mov	r3, r2
 8006e9c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d101      	bne.n	8006ea8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e01f      	b.n	8006ee8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	2200      	movs	r2, #0
 8006eac:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	2200      	movs	r2, #0
 8006ebc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8006ec0:	68bb      	ldr	r3, [r7, #8]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d003      	beq.n	8006ece <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	79fa      	ldrb	r2, [r7, #7]
 8006eda:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f001 fd6b 	bl	80089b8 <USBD_LL_Init>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006ee6:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3718      	adds	r7, #24
 8006eec:	46bd      	mov	sp, r7
 8006eee:	bd80      	pop	{r7, pc}

08006ef0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b084      	sub	sp, #16
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006efa:	2300      	movs	r3, #0
 8006efc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006efe:	683b      	ldr	r3, [r7, #0]
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d101      	bne.n	8006f08 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006f04:	2303      	movs	r3, #3
 8006f06:	e025      	b.n	8006f54 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	683a      	ldr	r2, [r7, #0]
 8006f0c:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	32ae      	adds	r2, #174	@ 0xae
 8006f1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00f      	beq.n	8006f44 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	32ae      	adds	r2, #174	@ 0xae
 8006f2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f34:	f107 020e 	add.w	r2, r7, #14
 8006f38:	4610      	mov	r0, r2
 8006f3a:	4798      	blx	r3
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006f4a:	1c5a      	adds	r2, r3, #1
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 8006f52:	2300      	movs	r3, #0
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	3710      	adds	r7, #16
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	bd80      	pop	{r7, pc}

08006f5c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b082      	sub	sp, #8
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006f64:	6878      	ldr	r0, [r7, #4]
 8006f66:	f001 fd73 	bl	8008a50 <USBD_LL_Start>
 8006f6a:	4603      	mov	r3, r0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006f74:	b480      	push	{r7}
 8006f76:	b083      	sub	sp, #12
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006f7c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006f7e:	4618      	mov	r0, r3
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b084      	sub	sp, #16
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
 8006f92:	460b      	mov	r3, r1
 8006f94:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006f96:	2300      	movs	r3, #0
 8006f98:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d009      	beq.n	8006fb8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	78fa      	ldrb	r2, [r7, #3]
 8006fae:	4611      	mov	r1, r2
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	4798      	blx	r3
 8006fb4:	4603      	mov	r3, r0
 8006fb6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3710      	adds	r7, #16
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}

08006fc2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006fc2:	b580      	push	{r7, lr}
 8006fc4:	b084      	sub	sp, #16
 8006fc6:	af00      	add	r7, sp, #0
 8006fc8:	6078      	str	r0, [r7, #4]
 8006fca:	460b      	mov	r3, r1
 8006fcc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006fd8:	685b      	ldr	r3, [r3, #4]
 8006fda:	78fa      	ldrb	r2, [r7, #3]
 8006fdc:	4611      	mov	r1, r2
 8006fde:	6878      	ldr	r0, [r7, #4]
 8006fe0:	4798      	blx	r3
 8006fe2:	4603      	mov	r3, r0
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d001      	beq.n	8006fec <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006fe8:	2303      	movs	r3, #3
 8006fea:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fee:	4618      	mov	r0, r3
 8006ff0:	3710      	adds	r7, #16
 8006ff2:	46bd      	mov	sp, r7
 8006ff4:	bd80      	pop	{r7, pc}

08006ff6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006ff6:	b580      	push	{r7, lr}
 8006ff8:	b084      	sub	sp, #16
 8006ffa:	af00      	add	r7, sp, #0
 8006ffc:	6078      	str	r0, [r7, #4]
 8006ffe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007006:	6839      	ldr	r1, [r7, #0]
 8007008:	4618      	mov	r0, r3
 800700a:	f001 f906 	bl	800821a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	2201      	movs	r2, #1
 8007012:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800701c:	461a      	mov	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800702a:	f003 031f 	and.w	r3, r3, #31
 800702e:	2b02      	cmp	r3, #2
 8007030:	d01a      	beq.n	8007068 <USBD_LL_SetupStage+0x72>
 8007032:	2b02      	cmp	r3, #2
 8007034:	d822      	bhi.n	800707c <USBD_LL_SetupStage+0x86>
 8007036:	2b00      	cmp	r3, #0
 8007038:	d002      	beq.n	8007040 <USBD_LL_SetupStage+0x4a>
 800703a:	2b01      	cmp	r3, #1
 800703c:	d00a      	beq.n	8007054 <USBD_LL_SetupStage+0x5e>
 800703e:	e01d      	b.n	800707c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8007046:	4619      	mov	r1, r3
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fb5d 	bl	8007708 <USBD_StdDevReq>
 800704e:	4603      	mov	r3, r0
 8007050:	73fb      	strb	r3, [r7, #15]
      break;
 8007052:	e020      	b.n	8007096 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800705a:	4619      	mov	r1, r3
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 fbc5 	bl	80077ec <USBD_StdItfReq>
 8007062:	4603      	mov	r3, r0
 8007064:	73fb      	strb	r3, [r7, #15]
      break;
 8007066:	e016      	b.n	8007096 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800706e:	4619      	mov	r1, r3
 8007070:	6878      	ldr	r0, [r7, #4]
 8007072:	f000 fc27 	bl	80078c4 <USBD_StdEPReq>
 8007076:	4603      	mov	r3, r0
 8007078:	73fb      	strb	r3, [r7, #15]
      break;
 800707a:	e00c      	b.n	8007096 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007082:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8007086:	b2db      	uxtb	r3, r3
 8007088:	4619      	mov	r1, r3
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f001 fd40 	bl	8008b10 <USBD_LL_StallEP>
 8007090:	4603      	mov	r3, r0
 8007092:	73fb      	strb	r3, [r7, #15]
      break;
 8007094:	bf00      	nop
  }

  return ret;
 8007096:	7bfb      	ldrb	r3, [r7, #15]
}
 8007098:	4618      	mov	r0, r3
 800709a:	3710      	adds	r7, #16
 800709c:	46bd      	mov	sp, r7
 800709e:	bd80      	pop	{r7, pc}

080070a0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80070a0:	b580      	push	{r7, lr}
 80070a2:	b086      	sub	sp, #24
 80070a4:	af00      	add	r7, sp, #0
 80070a6:	60f8      	str	r0, [r7, #12]
 80070a8:	460b      	mov	r3, r1
 80070aa:	607a      	str	r2, [r7, #4]
 80070ac:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80070ae:	2300      	movs	r3, #0
 80070b0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80070b2:	7afb      	ldrb	r3, [r7, #11]
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d16e      	bne.n	8007196 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80070be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80070c6:	2b03      	cmp	r3, #3
 80070c8:	f040 8098 	bne.w	80071fc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	689a      	ldr	r2, [r3, #8]
 80070d0:	693b      	ldr	r3, [r7, #16]
 80070d2:	68db      	ldr	r3, [r3, #12]
 80070d4:	429a      	cmp	r2, r3
 80070d6:	d913      	bls.n	8007100 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	689a      	ldr	r2, [r3, #8]
 80070dc:	693b      	ldr	r3, [r7, #16]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	1ad2      	subs	r2, r2, r3
 80070e2:	693b      	ldr	r3, [r7, #16]
 80070e4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80070e6:	693b      	ldr	r3, [r7, #16]
 80070e8:	68da      	ldr	r2, [r3, #12]
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	4293      	cmp	r3, r2
 80070f0:	bf28      	it	cs
 80070f2:	4613      	movcs	r3, r2
 80070f4:	461a      	mov	r2, r3
 80070f6:	6879      	ldr	r1, [r7, #4]
 80070f8:	68f8      	ldr	r0, [r7, #12]
 80070fa:	f001 f982 	bl	8008402 <USBD_CtlContinueRx>
 80070fe:	e07d      	b.n	80071fc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8007106:	f003 031f 	and.w	r3, r3, #31
 800710a:	2b02      	cmp	r3, #2
 800710c:	d014      	beq.n	8007138 <USBD_LL_DataOutStage+0x98>
 800710e:	2b02      	cmp	r3, #2
 8007110:	d81d      	bhi.n	800714e <USBD_LL_DataOutStage+0xae>
 8007112:	2b00      	cmp	r3, #0
 8007114:	d002      	beq.n	800711c <USBD_LL_DataOutStage+0x7c>
 8007116:	2b01      	cmp	r3, #1
 8007118:	d003      	beq.n	8007122 <USBD_LL_DataOutStage+0x82>
 800711a:	e018      	b.n	800714e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800711c:	2300      	movs	r3, #0
 800711e:	75bb      	strb	r3, [r7, #22]
            break;
 8007120:	e018      	b.n	8007154 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8007128:	b2db      	uxtb	r3, r3
 800712a:	4619      	mov	r1, r3
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 fa5e 	bl	80075ee <USBD_CoreFindIF>
 8007132:	4603      	mov	r3, r0
 8007134:	75bb      	strb	r3, [r7, #22]
            break;
 8007136:	e00d      	b.n	8007154 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800713e:	b2db      	uxtb	r3, r3
 8007140:	4619      	mov	r1, r3
 8007142:	68f8      	ldr	r0, [r7, #12]
 8007144:	f000 fa60 	bl	8007608 <USBD_CoreFindEP>
 8007148:	4603      	mov	r3, r0
 800714a:	75bb      	strb	r3, [r7, #22]
            break;
 800714c:	e002      	b.n	8007154 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800714e:	2300      	movs	r3, #0
 8007150:	75bb      	strb	r3, [r7, #22]
            break;
 8007152:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007154:	7dbb      	ldrb	r3, [r7, #22]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d119      	bne.n	800718e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b03      	cmp	r3, #3
 8007164:	d113      	bne.n	800718e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007166:	7dba      	ldrb	r2, [r7, #22]
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	32ae      	adds	r2, #174	@ 0xae
 800716c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007170:	691b      	ldr	r3, [r3, #16]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d00b      	beq.n	800718e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007176:	7dba      	ldrb	r2, [r7, #22]
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800717e:	7dba      	ldrb	r2, [r7, #22]
 8007180:	68fb      	ldr	r3, [r7, #12]
 8007182:	32ae      	adds	r2, #174	@ 0xae
 8007184:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007188:	691b      	ldr	r3, [r3, #16]
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800718e:	68f8      	ldr	r0, [r7, #12]
 8007190:	f001 f948 	bl	8008424 <USBD_CtlSendStatus>
 8007194:	e032      	b.n	80071fc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007196:	7afb      	ldrb	r3, [r7, #11]
 8007198:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800719c:	b2db      	uxtb	r3, r3
 800719e:	4619      	mov	r1, r3
 80071a0:	68f8      	ldr	r0, [r7, #12]
 80071a2:	f000 fa31 	bl	8007608 <USBD_CoreFindEP>
 80071a6:	4603      	mov	r3, r0
 80071a8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80071aa:	7dbb      	ldrb	r3, [r7, #22]
 80071ac:	2bff      	cmp	r3, #255	@ 0xff
 80071ae:	d025      	beq.n	80071fc <USBD_LL_DataOutStage+0x15c>
 80071b0:	7dbb      	ldrb	r3, [r7, #22]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d122      	bne.n	80071fc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	2b03      	cmp	r3, #3
 80071c0:	d117      	bne.n	80071f2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80071c2:	7dba      	ldrb	r2, [r7, #22]
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	32ae      	adds	r2, #174	@ 0xae
 80071c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071cc:	699b      	ldr	r3, [r3, #24]
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d00f      	beq.n	80071f2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80071d2:	7dba      	ldrb	r2, [r7, #22]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80071da:	7dba      	ldrb	r2, [r7, #22]
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	32ae      	adds	r2, #174	@ 0xae
 80071e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80071e4:	699b      	ldr	r3, [r3, #24]
 80071e6:	7afa      	ldrb	r2, [r7, #11]
 80071e8:	4611      	mov	r1, r2
 80071ea:	68f8      	ldr	r0, [r7, #12]
 80071ec:	4798      	blx	r3
 80071ee:	4603      	mov	r3, r0
 80071f0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80071f2:	7dfb      	ldrb	r3, [r7, #23]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d001      	beq.n	80071fc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80071f8:	7dfb      	ldrb	r3, [r7, #23]
 80071fa:	e000      	b.n	80071fe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80071fc:	2300      	movs	r3, #0
}
 80071fe:	4618      	mov	r0, r3
 8007200:	3718      	adds	r7, #24
 8007202:	46bd      	mov	sp, r7
 8007204:	bd80      	pop	{r7, pc}

08007206 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007206:	b580      	push	{r7, lr}
 8007208:	b086      	sub	sp, #24
 800720a:	af00      	add	r7, sp, #0
 800720c:	60f8      	str	r0, [r7, #12]
 800720e:	460b      	mov	r3, r1
 8007210:	607a      	str	r2, [r7, #4]
 8007212:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007214:	7afb      	ldrb	r3, [r7, #11]
 8007216:	2b00      	cmp	r3, #0
 8007218:	d16f      	bne.n	80072fa <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	3314      	adds	r3, #20
 800721e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8007226:	2b02      	cmp	r3, #2
 8007228:	d15a      	bne.n	80072e0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	689a      	ldr	r2, [r3, #8]
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	68db      	ldr	r3, [r3, #12]
 8007232:	429a      	cmp	r2, r3
 8007234:	d914      	bls.n	8007260 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	689a      	ldr	r2, [r3, #8]
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	68db      	ldr	r3, [r3, #12]
 800723e:	1ad2      	subs	r2, r2, r3
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007244:	693b      	ldr	r3, [r7, #16]
 8007246:	689b      	ldr	r3, [r3, #8]
 8007248:	461a      	mov	r2, r3
 800724a:	6879      	ldr	r1, [r7, #4]
 800724c:	68f8      	ldr	r0, [r7, #12]
 800724e:	f001 f8aa 	bl	80083a6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007252:	2300      	movs	r3, #0
 8007254:	2200      	movs	r2, #0
 8007256:	2100      	movs	r1, #0
 8007258:	68f8      	ldr	r0, [r7, #12]
 800725a:	f001 fd03 	bl	8008c64 <USBD_LL_PrepareReceive>
 800725e:	e03f      	b.n	80072e0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	68da      	ldr	r2, [r3, #12]
 8007264:	693b      	ldr	r3, [r7, #16]
 8007266:	689b      	ldr	r3, [r3, #8]
 8007268:	429a      	cmp	r2, r3
 800726a:	d11c      	bne.n	80072a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	685a      	ldr	r2, [r3, #4]
 8007270:	693b      	ldr	r3, [r7, #16]
 8007272:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007274:	429a      	cmp	r2, r3
 8007276:	d316      	bcc.n	80072a6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007278:	693b      	ldr	r3, [r7, #16]
 800727a:	685a      	ldr	r2, [r3, #4]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007282:	429a      	cmp	r2, r3
 8007284:	d20f      	bcs.n	80072a6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007286:	2200      	movs	r2, #0
 8007288:	2100      	movs	r1, #0
 800728a:	68f8      	ldr	r0, [r7, #12]
 800728c:	f001 f88b 	bl	80083a6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2200      	movs	r2, #0
 8007294:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007298:	2300      	movs	r3, #0
 800729a:	2200      	movs	r2, #0
 800729c:	2100      	movs	r1, #0
 800729e:	68f8      	ldr	r0, [r7, #12]
 80072a0:	f001 fce0 	bl	8008c64 <USBD_LL_PrepareReceive>
 80072a4:	e01c      	b.n	80072e0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80072ac:	b2db      	uxtb	r3, r3
 80072ae:	2b03      	cmp	r3, #3
 80072b0:	d10f      	bne.n	80072d2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	2b00      	cmp	r3, #0
 80072bc:	d009      	beq.n	80072d2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	68f8      	ldr	r0, [r7, #12]
 80072d0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80072d2:	2180      	movs	r1, #128	@ 0x80
 80072d4:	68f8      	ldr	r0, [r7, #12]
 80072d6:	f001 fc1b 	bl	8008b10 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80072da:	68f8      	ldr	r0, [r7, #12]
 80072dc:	f001 f8b5 	bl	800844a <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d03a      	beq.n	8007360 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f7ff fe42 	bl	8006f74 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	2200      	movs	r2, #0
 80072f4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 80072f8:	e032      	b.n	8007360 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80072fa:	7afb      	ldrb	r3, [r7, #11]
 80072fc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8007300:	b2db      	uxtb	r3, r3
 8007302:	4619      	mov	r1, r3
 8007304:	68f8      	ldr	r0, [r7, #12]
 8007306:	f000 f97f 	bl	8007608 <USBD_CoreFindEP>
 800730a:	4603      	mov	r3, r0
 800730c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800730e:	7dfb      	ldrb	r3, [r7, #23]
 8007310:	2bff      	cmp	r3, #255	@ 0xff
 8007312:	d025      	beq.n	8007360 <USBD_LL_DataInStage+0x15a>
 8007314:	7dfb      	ldrb	r3, [r7, #23]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d122      	bne.n	8007360 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007320:	b2db      	uxtb	r3, r3
 8007322:	2b03      	cmp	r3, #3
 8007324:	d11c      	bne.n	8007360 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007326:	7dfa      	ldrb	r2, [r7, #23]
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	32ae      	adds	r2, #174	@ 0xae
 800732c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007330:	695b      	ldr	r3, [r3, #20]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d014      	beq.n	8007360 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007336:	7dfa      	ldrb	r2, [r7, #23]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800733e:	7dfa      	ldrb	r2, [r7, #23]
 8007340:	68fb      	ldr	r3, [r7, #12]
 8007342:	32ae      	adds	r2, #174	@ 0xae
 8007344:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	7afa      	ldrb	r2, [r7, #11]
 800734c:	4611      	mov	r1, r2
 800734e:	68f8      	ldr	r0, [r7, #12]
 8007350:	4798      	blx	r3
 8007352:	4603      	mov	r3, r0
 8007354:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007356:	7dbb      	ldrb	r3, [r7, #22]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d001      	beq.n	8007360 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800735c:	7dbb      	ldrb	r3, [r7, #22]
 800735e:	e000      	b.n	8007362 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007360:	2300      	movs	r3, #0
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007372:	2300      	movs	r3, #0
 8007374:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2201      	movs	r2, #1
 800737a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	2200      	movs	r2, #0
 8007382:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	2200      	movs	r2, #0
 800738a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	2200      	movs	r2, #0
 8007390:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d014      	beq.n	80073d0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073ac:	685b      	ldr	r3, [r3, #4]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00e      	beq.n	80073d0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80073b8:	685b      	ldr	r3, [r3, #4]
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	6852      	ldr	r2, [r2, #4]
 80073be:	b2d2      	uxtb	r2, r2
 80073c0:	4611      	mov	r1, r2
 80073c2:	6878      	ldr	r0, [r7, #4]
 80073c4:	4798      	blx	r3
 80073c6:	4603      	mov	r3, r0
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d001      	beq.n	80073d0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80073cc:	2303      	movs	r3, #3
 80073ce:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073d0:	2340      	movs	r3, #64	@ 0x40
 80073d2:	2200      	movs	r2, #0
 80073d4:	2100      	movs	r1, #0
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f001 fb55 	bl	8008a86 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2201      	movs	r2, #1
 80073e0:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	2240      	movs	r2, #64	@ 0x40
 80073e8:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80073ec:	2340      	movs	r3, #64	@ 0x40
 80073ee:	2200      	movs	r2, #0
 80073f0:	2180      	movs	r1, #128	@ 0x80
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f001 fb47 	bl	8008a86 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2201      	movs	r2, #1
 80073fc:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2240      	movs	r2, #64	@ 0x40
 8007402:	621a      	str	r2, [r3, #32]

  return ret;
 8007404:	7bfb      	ldrb	r3, [r7, #15]
}
 8007406:	4618      	mov	r0, r3
 8007408:	3710      	adds	r7, #16
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}

0800740e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800740e:	b480      	push	{r7}
 8007410:	b083      	sub	sp, #12
 8007412:	af00      	add	r7, sp, #0
 8007414:	6078      	str	r0, [r7, #4]
 8007416:	460b      	mov	r3, r1
 8007418:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	78fa      	ldrb	r2, [r7, #3]
 800741e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007420:	2300      	movs	r3, #0
}
 8007422:	4618      	mov	r0, r3
 8007424:	370c      	adds	r7, #12
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr

0800742e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800742e:	b480      	push	{r7}
 8007430:	b083      	sub	sp, #12
 8007432:	af00      	add	r7, sp, #0
 8007434:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800743c:	b2da      	uxtb	r2, r3
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2204      	movs	r2, #4
 8007448:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800745a:	b480      	push	{r7}
 800745c:	b083      	sub	sp, #12
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007468:	b2db      	uxtb	r3, r3
 800746a:	2b04      	cmp	r3, #4
 800746c:	d106      	bne.n	800747c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8007474:	b2da      	uxtb	r2, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800747c:	2300      	movs	r3, #0
}
 800747e:	4618      	mov	r0, r3
 8007480:	370c      	adds	r7, #12
 8007482:	46bd      	mov	sp, r7
 8007484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007488:	4770      	bx	lr

0800748a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800748a:	b580      	push	{r7, lr}
 800748c:	b082      	sub	sp, #8
 800748e:	af00      	add	r7, sp, #0
 8007490:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b03      	cmp	r3, #3
 800749c:	d110      	bne.n	80074c0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00b      	beq.n	80074c0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074ae:	69db      	ldr	r3, [r3, #28]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d005      	beq.n	80074c0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80074ba:	69db      	ldr	r3, [r3, #28]
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80074c0:	2300      	movs	r3, #0
}
 80074c2:	4618      	mov	r0, r3
 80074c4:	3708      	adds	r7, #8
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}

080074ca <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80074ca:	b580      	push	{r7, lr}
 80074cc:	b082      	sub	sp, #8
 80074ce:	af00      	add	r7, sp, #0
 80074d0:	6078      	str	r0, [r7, #4]
 80074d2:	460b      	mov	r3, r1
 80074d4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	32ae      	adds	r2, #174	@ 0xae
 80074e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80074e8:	2303      	movs	r3, #3
 80074ea:	e01c      	b.n	8007526 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	2b03      	cmp	r3, #3
 80074f6:	d115      	bne.n	8007524 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	32ae      	adds	r2, #174	@ 0xae
 8007502:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007506:	6a1b      	ldr	r3, [r3, #32]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d00b      	beq.n	8007524 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	32ae      	adds	r2, #174	@ 0xae
 8007516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751a:	6a1b      	ldr	r3, [r3, #32]
 800751c:	78fa      	ldrb	r2, [r7, #3]
 800751e:	4611      	mov	r1, r2
 8007520:	6878      	ldr	r0, [r7, #4]
 8007522:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007524:	2300      	movs	r3, #0
}
 8007526:	4618      	mov	r0, r3
 8007528:	3708      	adds	r7, #8
 800752a:	46bd      	mov	sp, r7
 800752c:	bd80      	pop	{r7, pc}

0800752e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800752e:	b580      	push	{r7, lr}
 8007530:	b082      	sub	sp, #8
 8007532:	af00      	add	r7, sp, #0
 8007534:	6078      	str	r0, [r7, #4]
 8007536:	460b      	mov	r3, r1
 8007538:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	32ae      	adds	r2, #174	@ 0xae
 8007544:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d101      	bne.n	8007550 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800754c:	2303      	movs	r3, #3
 800754e:	e01c      	b.n	800758a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007556:	b2db      	uxtb	r3, r3
 8007558:	2b03      	cmp	r3, #3
 800755a:	d115      	bne.n	8007588 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	32ae      	adds	r2, #174	@ 0xae
 8007566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800756a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800756c:	2b00      	cmp	r3, #0
 800756e:	d00b      	beq.n	8007588 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	32ae      	adds	r2, #174	@ 0xae
 800757a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800757e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007580:	78fa      	ldrb	r2, [r7, #3]
 8007582:	4611      	mov	r1, r2
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3708      	adds	r7, #8
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}

08007592 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8007592:	b480      	push	{r7}
 8007594:	b083      	sub	sp, #12
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800759a:	2300      	movs	r3, #0
}
 800759c:	4618      	mov	r0, r3
 800759e:	370c      	adds	r7, #12
 80075a0:	46bd      	mov	sp, r7
 80075a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a6:	4770      	bx	lr

080075a8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b084      	sub	sp, #16
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80075b0:	2300      	movs	r3, #0
 80075b2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2201      	movs	r2, #1
 80075b8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d00e      	beq.n	80075e4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	687a      	ldr	r2, [r7, #4]
 80075d0:	6852      	ldr	r2, [r2, #4]
 80075d2:	b2d2      	uxtb	r2, r2
 80075d4:	4611      	mov	r1, r2
 80075d6:	6878      	ldr	r0, [r7, #4]
 80075d8:	4798      	blx	r3
 80075da:	4603      	mov	r3, r0
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d001      	beq.n	80075e4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80075e0:	2303      	movs	r3, #3
 80075e2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80075e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3710      	adds	r7, #16
 80075ea:	46bd      	mov	sp, r7
 80075ec:	bd80      	pop	{r7, pc}

080075ee <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80075ee:	b480      	push	{r7}
 80075f0:	b083      	sub	sp, #12
 80075f2:	af00      	add	r7, sp, #0
 80075f4:	6078      	str	r0, [r7, #4]
 80075f6:	460b      	mov	r3, r1
 80075f8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80075fa:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	370c      	adds	r7, #12
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8007608:	b480      	push	{r7}
 800760a:	b083      	sub	sp, #12
 800760c:	af00      	add	r7, sp, #0
 800760e:	6078      	str	r0, [r7, #4]
 8007610:	460b      	mov	r3, r1
 8007612:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8007614:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8007616:	4618      	mov	r0, r3
 8007618:	370c      	adds	r7, #12
 800761a:	46bd      	mov	sp, r7
 800761c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007620:	4770      	bx	lr

08007622 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8007622:	b580      	push	{r7, lr}
 8007624:	b086      	sub	sp, #24
 8007626:	af00      	add	r7, sp, #0
 8007628:	6078      	str	r0, [r7, #4]
 800762a:	460b      	mov	r3, r1
 800762c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8007636:	2300      	movs	r3, #0
 8007638:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	885b      	ldrh	r3, [r3, #2]
 800763e:	b29b      	uxth	r3, r3
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	7812      	ldrb	r2, [r2, #0]
 8007644:	4293      	cmp	r3, r2
 8007646:	d91f      	bls.n	8007688 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	781b      	ldrb	r3, [r3, #0]
 800764c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800764e:	e013      	b.n	8007678 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8007650:	f107 030a 	add.w	r3, r7, #10
 8007654:	4619      	mov	r1, r3
 8007656:	6978      	ldr	r0, [r7, #20]
 8007658:	f000 f81b 	bl	8007692 <USBD_GetNextDesc>
 800765c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	785b      	ldrb	r3, [r3, #1]
 8007662:	2b05      	cmp	r3, #5
 8007664:	d108      	bne.n	8007678 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8007666:	697b      	ldr	r3, [r7, #20]
 8007668:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800766a:	693b      	ldr	r3, [r7, #16]
 800766c:	789b      	ldrb	r3, [r3, #2]
 800766e:	78fa      	ldrb	r2, [r7, #3]
 8007670:	429a      	cmp	r2, r3
 8007672:	d008      	beq.n	8007686 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8007674:	2300      	movs	r3, #0
 8007676:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	885b      	ldrh	r3, [r3, #2]
 800767c:	b29a      	uxth	r2, r3
 800767e:	897b      	ldrh	r3, [r7, #10]
 8007680:	429a      	cmp	r2, r3
 8007682:	d8e5      	bhi.n	8007650 <USBD_GetEpDesc+0x2e>
 8007684:	e000      	b.n	8007688 <USBD_GetEpDesc+0x66>
          break;
 8007686:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8007688:	693b      	ldr	r3, [r7, #16]
}
 800768a:	4618      	mov	r0, r3
 800768c:	3718      	adds	r7, #24
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}

08007692 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8007692:	b480      	push	{r7}
 8007694:	b085      	sub	sp, #20
 8007696:	af00      	add	r7, sp, #0
 8007698:	6078      	str	r0, [r7, #4]
 800769a:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	881b      	ldrh	r3, [r3, #0]
 80076a4:	68fa      	ldr	r2, [r7, #12]
 80076a6:	7812      	ldrb	r2, [r2, #0]
 80076a8:	4413      	add	r3, r2
 80076aa:	b29a      	uxth	r2, r3
 80076ac:	683b      	ldr	r3, [r7, #0]
 80076ae:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	781b      	ldrb	r3, [r3, #0]
 80076b4:	461a      	mov	r2, r3
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	4413      	add	r3, r2
 80076ba:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80076bc:	68fb      	ldr	r3, [r7, #12]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3714      	adds	r7, #20
 80076c2:	46bd      	mov	sp, r7
 80076c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076c8:	4770      	bx	lr

080076ca <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80076ca:	b480      	push	{r7}
 80076cc:	b087      	sub	sp, #28
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	781b      	ldrb	r3, [r3, #0]
 80076da:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80076dc:	697b      	ldr	r3, [r7, #20]
 80076de:	3301      	adds	r3, #1
 80076e0:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80076e2:	697b      	ldr	r3, [r7, #20]
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80076e8:	8a3b      	ldrh	r3, [r7, #16]
 80076ea:	021b      	lsls	r3, r3, #8
 80076ec:	b21a      	sxth	r2, r3
 80076ee:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80076f2:	4313      	orrs	r3, r2
 80076f4:	b21b      	sxth	r3, r3
 80076f6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80076f8:	89fb      	ldrh	r3, [r7, #14]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	371c      	adds	r7, #28
 80076fe:	46bd      	mov	sp, r7
 8007700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007704:	4770      	bx	lr
	...

08007708 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
 8007710:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007712:	2300      	movs	r3, #0
 8007714:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8007716:	683b      	ldr	r3, [r7, #0]
 8007718:	781b      	ldrb	r3, [r3, #0]
 800771a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800771e:	2b40      	cmp	r3, #64	@ 0x40
 8007720:	d005      	beq.n	800772e <USBD_StdDevReq+0x26>
 8007722:	2b40      	cmp	r3, #64	@ 0x40
 8007724:	d857      	bhi.n	80077d6 <USBD_StdDevReq+0xce>
 8007726:	2b00      	cmp	r3, #0
 8007728:	d00f      	beq.n	800774a <USBD_StdDevReq+0x42>
 800772a:	2b20      	cmp	r3, #32
 800772c:	d153      	bne.n	80077d6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	32ae      	adds	r2, #174	@ 0xae
 8007738:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800773c:	689b      	ldr	r3, [r3, #8]
 800773e:	6839      	ldr	r1, [r7, #0]
 8007740:	6878      	ldr	r0, [r7, #4]
 8007742:	4798      	blx	r3
 8007744:	4603      	mov	r3, r0
 8007746:	73fb      	strb	r3, [r7, #15]
      break;
 8007748:	e04a      	b.n	80077e0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	785b      	ldrb	r3, [r3, #1]
 800774e:	2b09      	cmp	r3, #9
 8007750:	d83b      	bhi.n	80077ca <USBD_StdDevReq+0xc2>
 8007752:	a201      	add	r2, pc, #4	@ (adr r2, 8007758 <USBD_StdDevReq+0x50>)
 8007754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007758:	080077ad 	.word	0x080077ad
 800775c:	080077c1 	.word	0x080077c1
 8007760:	080077cb 	.word	0x080077cb
 8007764:	080077b7 	.word	0x080077b7
 8007768:	080077cb 	.word	0x080077cb
 800776c:	0800778b 	.word	0x0800778b
 8007770:	08007781 	.word	0x08007781
 8007774:	080077cb 	.word	0x080077cb
 8007778:	080077a3 	.word	0x080077a3
 800777c:	08007795 	.word	0x08007795
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8007780:	6839      	ldr	r1, [r7, #0]
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fa3c 	bl	8007c00 <USBD_GetDescriptor>
          break;
 8007788:	e024      	b.n	80077d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800778a:	6839      	ldr	r1, [r7, #0]
 800778c:	6878      	ldr	r0, [r7, #4]
 800778e:	f000 fba1 	bl	8007ed4 <USBD_SetAddress>
          break;
 8007792:	e01f      	b.n	80077d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8007794:	6839      	ldr	r1, [r7, #0]
 8007796:	6878      	ldr	r0, [r7, #4]
 8007798:	f000 fbe0 	bl	8007f5c <USBD_SetConfig>
 800779c:	4603      	mov	r3, r0
 800779e:	73fb      	strb	r3, [r7, #15]
          break;
 80077a0:	e018      	b.n	80077d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80077a2:	6839      	ldr	r1, [r7, #0]
 80077a4:	6878      	ldr	r0, [r7, #4]
 80077a6:	f000 fc83 	bl	80080b0 <USBD_GetConfig>
          break;
 80077aa:	e013      	b.n	80077d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80077ac:	6839      	ldr	r1, [r7, #0]
 80077ae:	6878      	ldr	r0, [r7, #4]
 80077b0:	f000 fcb4 	bl	800811c <USBD_GetStatus>
          break;
 80077b4:	e00e      	b.n	80077d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80077b6:	6839      	ldr	r1, [r7, #0]
 80077b8:	6878      	ldr	r0, [r7, #4]
 80077ba:	f000 fce3 	bl	8008184 <USBD_SetFeature>
          break;
 80077be:	e009      	b.n	80077d4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80077c0:	6839      	ldr	r1, [r7, #0]
 80077c2:	6878      	ldr	r0, [r7, #4]
 80077c4:	f000 fd07 	bl	80081d6 <USBD_ClrFeature>
          break;
 80077c8:	e004      	b.n	80077d4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80077ca:	6839      	ldr	r1, [r7, #0]
 80077cc:	6878      	ldr	r0, [r7, #4]
 80077ce:	f000 fd5e 	bl	800828e <USBD_CtlError>
          break;
 80077d2:	bf00      	nop
      }
      break;
 80077d4:	e004      	b.n	80077e0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80077d6:	6839      	ldr	r1, [r7, #0]
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fd58 	bl	800828e <USBD_CtlError>
      break;
 80077de:	bf00      	nop
  }

  return ret;
 80077e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3710      	adds	r7, #16
 80077e6:	46bd      	mov	sp, r7
 80077e8:	bd80      	pop	{r7, pc}
 80077ea:	bf00      	nop

080077ec <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
 80077f4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80077f6:	2300      	movs	r3, #0
 80077f8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	781b      	ldrb	r3, [r3, #0]
 80077fe:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007802:	2b40      	cmp	r3, #64	@ 0x40
 8007804:	d005      	beq.n	8007812 <USBD_StdItfReq+0x26>
 8007806:	2b40      	cmp	r3, #64	@ 0x40
 8007808:	d852      	bhi.n	80078b0 <USBD_StdItfReq+0xc4>
 800780a:	2b00      	cmp	r3, #0
 800780c:	d001      	beq.n	8007812 <USBD_StdItfReq+0x26>
 800780e:	2b20      	cmp	r3, #32
 8007810:	d14e      	bne.n	80078b0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007818:	b2db      	uxtb	r3, r3
 800781a:	3b01      	subs	r3, #1
 800781c:	2b02      	cmp	r3, #2
 800781e:	d840      	bhi.n	80078a2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	889b      	ldrh	r3, [r3, #4]
 8007824:	b2db      	uxtb	r3, r3
 8007826:	2b02      	cmp	r3, #2
 8007828:	d836      	bhi.n	8007898 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	889b      	ldrh	r3, [r3, #4]
 800782e:	b2db      	uxtb	r3, r3
 8007830:	4619      	mov	r1, r3
 8007832:	6878      	ldr	r0, [r7, #4]
 8007834:	f7ff fedb 	bl	80075ee <USBD_CoreFindIF>
 8007838:	4603      	mov	r3, r0
 800783a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800783c:	7bbb      	ldrb	r3, [r7, #14]
 800783e:	2bff      	cmp	r3, #255	@ 0xff
 8007840:	d01d      	beq.n	800787e <USBD_StdItfReq+0x92>
 8007842:	7bbb      	ldrb	r3, [r7, #14]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d11a      	bne.n	800787e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8007848:	7bba      	ldrb	r2, [r7, #14]
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	32ae      	adds	r2, #174	@ 0xae
 800784e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007852:	689b      	ldr	r3, [r3, #8]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d00f      	beq.n	8007878 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8007858:	7bba      	ldrb	r2, [r7, #14]
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007860:	7bba      	ldrb	r2, [r7, #14]
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	32ae      	adds	r2, #174	@ 0xae
 8007866:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	6839      	ldr	r1, [r7, #0]
 800786e:	6878      	ldr	r0, [r7, #4]
 8007870:	4798      	blx	r3
 8007872:	4603      	mov	r3, r0
 8007874:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8007876:	e004      	b.n	8007882 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8007878:	2303      	movs	r3, #3
 800787a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800787c:	e001      	b.n	8007882 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800787e:	2303      	movs	r3, #3
 8007880:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8007882:	683b      	ldr	r3, [r7, #0]
 8007884:	88db      	ldrh	r3, [r3, #6]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d110      	bne.n	80078ac <USBD_StdItfReq+0xc0>
 800788a:	7bfb      	ldrb	r3, [r7, #15]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d10d      	bne.n	80078ac <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8007890:	6878      	ldr	r0, [r7, #4]
 8007892:	f000 fdc7 	bl	8008424 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8007896:	e009      	b.n	80078ac <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8007898:	6839      	ldr	r1, [r7, #0]
 800789a:	6878      	ldr	r0, [r7, #4]
 800789c:	f000 fcf7 	bl	800828e <USBD_CtlError>
          break;
 80078a0:	e004      	b.n	80078ac <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80078a2:	6839      	ldr	r1, [r7, #0]
 80078a4:	6878      	ldr	r0, [r7, #4]
 80078a6:	f000 fcf2 	bl	800828e <USBD_CtlError>
          break;
 80078aa:	e000      	b.n	80078ae <USBD_StdItfReq+0xc2>
          break;
 80078ac:	bf00      	nop
      }
      break;
 80078ae:	e004      	b.n	80078ba <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80078b0:	6839      	ldr	r1, [r7, #0]
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fceb 	bl	800828e <USBD_CtlError>
      break;
 80078b8:	bf00      	nop
  }

  return ret;
 80078ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3710      	adds	r7, #16
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}

080078c4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80078ce:	2300      	movs	r3, #0
 80078d0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80078d2:	683b      	ldr	r3, [r7, #0]
 80078d4:	889b      	ldrh	r3, [r3, #4]
 80078d6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80078d8:	683b      	ldr	r3, [r7, #0]
 80078da:	781b      	ldrb	r3, [r3, #0]
 80078dc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80078e0:	2b40      	cmp	r3, #64	@ 0x40
 80078e2:	d007      	beq.n	80078f4 <USBD_StdEPReq+0x30>
 80078e4:	2b40      	cmp	r3, #64	@ 0x40
 80078e6:	f200 817f 	bhi.w	8007be8 <USBD_StdEPReq+0x324>
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d02a      	beq.n	8007944 <USBD_StdEPReq+0x80>
 80078ee:	2b20      	cmp	r3, #32
 80078f0:	f040 817a 	bne.w	8007be8 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80078f4:	7bbb      	ldrb	r3, [r7, #14]
 80078f6:	4619      	mov	r1, r3
 80078f8:	6878      	ldr	r0, [r7, #4]
 80078fa:	f7ff fe85 	bl	8007608 <USBD_CoreFindEP>
 80078fe:	4603      	mov	r3, r0
 8007900:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007902:	7b7b      	ldrb	r3, [r7, #13]
 8007904:	2bff      	cmp	r3, #255	@ 0xff
 8007906:	f000 8174 	beq.w	8007bf2 <USBD_StdEPReq+0x32e>
 800790a:	7b7b      	ldrb	r3, [r7, #13]
 800790c:	2b00      	cmp	r3, #0
 800790e:	f040 8170 	bne.w	8007bf2 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8007912:	7b7a      	ldrb	r2, [r7, #13]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800791a:	7b7a      	ldrb	r2, [r7, #13]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	32ae      	adds	r2, #174	@ 0xae
 8007920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007924:	689b      	ldr	r3, [r3, #8]
 8007926:	2b00      	cmp	r3, #0
 8007928:	f000 8163 	beq.w	8007bf2 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800792c:	7b7a      	ldrb	r2, [r7, #13]
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	32ae      	adds	r2, #174	@ 0xae
 8007932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007936:	689b      	ldr	r3, [r3, #8]
 8007938:	6839      	ldr	r1, [r7, #0]
 800793a:	6878      	ldr	r0, [r7, #4]
 800793c:	4798      	blx	r3
 800793e:	4603      	mov	r3, r0
 8007940:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007942:	e156      	b.n	8007bf2 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	785b      	ldrb	r3, [r3, #1]
 8007948:	2b03      	cmp	r3, #3
 800794a:	d008      	beq.n	800795e <USBD_StdEPReq+0x9a>
 800794c:	2b03      	cmp	r3, #3
 800794e:	f300 8145 	bgt.w	8007bdc <USBD_StdEPReq+0x318>
 8007952:	2b00      	cmp	r3, #0
 8007954:	f000 809b 	beq.w	8007a8e <USBD_StdEPReq+0x1ca>
 8007958:	2b01      	cmp	r3, #1
 800795a:	d03c      	beq.n	80079d6 <USBD_StdEPReq+0x112>
 800795c:	e13e      	b.n	8007bdc <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007964:	b2db      	uxtb	r3, r3
 8007966:	2b02      	cmp	r3, #2
 8007968:	d002      	beq.n	8007970 <USBD_StdEPReq+0xac>
 800796a:	2b03      	cmp	r3, #3
 800796c:	d016      	beq.n	800799c <USBD_StdEPReq+0xd8>
 800796e:	e02c      	b.n	80079ca <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007970:	7bbb      	ldrb	r3, [r7, #14]
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00d      	beq.n	8007992 <USBD_StdEPReq+0xce>
 8007976:	7bbb      	ldrb	r3, [r7, #14]
 8007978:	2b80      	cmp	r3, #128	@ 0x80
 800797a:	d00a      	beq.n	8007992 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800797c:	7bbb      	ldrb	r3, [r7, #14]
 800797e:	4619      	mov	r1, r3
 8007980:	6878      	ldr	r0, [r7, #4]
 8007982:	f001 f8c5 	bl	8008b10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8007986:	2180      	movs	r1, #128	@ 0x80
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f001 f8c1 	bl	8008b10 <USBD_LL_StallEP>
 800798e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007990:	e020      	b.n	80079d4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8007992:	6839      	ldr	r1, [r7, #0]
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f000 fc7a 	bl	800828e <USBD_CtlError>
              break;
 800799a:	e01b      	b.n	80079d4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800799c:	683b      	ldr	r3, [r7, #0]
 800799e:	885b      	ldrh	r3, [r3, #2]
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d10e      	bne.n	80079c2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80079a4:	7bbb      	ldrb	r3, [r7, #14]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00b      	beq.n	80079c2 <USBD_StdEPReq+0xfe>
 80079aa:	7bbb      	ldrb	r3, [r7, #14]
 80079ac:	2b80      	cmp	r3, #128	@ 0x80
 80079ae:	d008      	beq.n	80079c2 <USBD_StdEPReq+0xfe>
 80079b0:	683b      	ldr	r3, [r7, #0]
 80079b2:	88db      	ldrh	r3, [r3, #6]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d104      	bne.n	80079c2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80079b8:	7bbb      	ldrb	r3, [r7, #14]
 80079ba:	4619      	mov	r1, r3
 80079bc:	6878      	ldr	r0, [r7, #4]
 80079be:	f001 f8a7 	bl	8008b10 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80079c2:	6878      	ldr	r0, [r7, #4]
 80079c4:	f000 fd2e 	bl	8008424 <USBD_CtlSendStatus>

              break;
 80079c8:	e004      	b.n	80079d4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80079ca:	6839      	ldr	r1, [r7, #0]
 80079cc:	6878      	ldr	r0, [r7, #4]
 80079ce:	f000 fc5e 	bl	800828e <USBD_CtlError>
              break;
 80079d2:	bf00      	nop
          }
          break;
 80079d4:	e107      	b.n	8007be6 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b02      	cmp	r3, #2
 80079e0:	d002      	beq.n	80079e8 <USBD_StdEPReq+0x124>
 80079e2:	2b03      	cmp	r3, #3
 80079e4:	d016      	beq.n	8007a14 <USBD_StdEPReq+0x150>
 80079e6:	e04b      	b.n	8007a80 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80079e8:	7bbb      	ldrb	r3, [r7, #14]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d00d      	beq.n	8007a0a <USBD_StdEPReq+0x146>
 80079ee:	7bbb      	ldrb	r3, [r7, #14]
 80079f0:	2b80      	cmp	r3, #128	@ 0x80
 80079f2:	d00a      	beq.n	8007a0a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80079f4:	7bbb      	ldrb	r3, [r7, #14]
 80079f6:	4619      	mov	r1, r3
 80079f8:	6878      	ldr	r0, [r7, #4]
 80079fa:	f001 f889 	bl	8008b10 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80079fe:	2180      	movs	r1, #128	@ 0x80
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f001 f885 	bl	8008b10 <USBD_LL_StallEP>
 8007a06:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007a08:	e040      	b.n	8007a8c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007a0a:	6839      	ldr	r1, [r7, #0]
 8007a0c:	6878      	ldr	r0, [r7, #4]
 8007a0e:	f000 fc3e 	bl	800828e <USBD_CtlError>
              break;
 8007a12:	e03b      	b.n	8007a8c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007a14:	683b      	ldr	r3, [r7, #0]
 8007a16:	885b      	ldrh	r3, [r3, #2]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d136      	bne.n	8007a8a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007a1c:	7bbb      	ldrb	r3, [r7, #14]
 8007a1e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d004      	beq.n	8007a30 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007a26:	7bbb      	ldrb	r3, [r7, #14]
 8007a28:	4619      	mov	r1, r3
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	f001 f88f 	bl	8008b4e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f000 fcf7 	bl	8008424 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007a36:	7bbb      	ldrb	r3, [r7, #14]
 8007a38:	4619      	mov	r1, r3
 8007a3a:	6878      	ldr	r0, [r7, #4]
 8007a3c:	f7ff fde4 	bl	8007608 <USBD_CoreFindEP>
 8007a40:	4603      	mov	r3, r0
 8007a42:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007a44:	7b7b      	ldrb	r3, [r7, #13]
 8007a46:	2bff      	cmp	r3, #255	@ 0xff
 8007a48:	d01f      	beq.n	8007a8a <USBD_StdEPReq+0x1c6>
 8007a4a:	7b7b      	ldrb	r3, [r7, #13]
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d11c      	bne.n	8007a8a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8007a50:	7b7a      	ldrb	r2, [r7, #13]
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007a58:	7b7a      	ldrb	r2, [r7, #13]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	32ae      	adds	r2, #174	@ 0xae
 8007a5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	d010      	beq.n	8007a8a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8007a68:	7b7a      	ldrb	r2, [r7, #13]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	32ae      	adds	r2, #174	@ 0xae
 8007a6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a72:	689b      	ldr	r3, [r3, #8]
 8007a74:	6839      	ldr	r1, [r7, #0]
 8007a76:	6878      	ldr	r0, [r7, #4]
 8007a78:	4798      	blx	r3
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8007a7e:	e004      	b.n	8007a8a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8007a80:	6839      	ldr	r1, [r7, #0]
 8007a82:	6878      	ldr	r0, [r7, #4]
 8007a84:	f000 fc03 	bl	800828e <USBD_CtlError>
              break;
 8007a88:	e000      	b.n	8007a8c <USBD_StdEPReq+0x1c8>
              break;
 8007a8a:	bf00      	nop
          }
          break;
 8007a8c:	e0ab      	b.n	8007be6 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b02      	cmp	r3, #2
 8007a98:	d002      	beq.n	8007aa0 <USBD_StdEPReq+0x1dc>
 8007a9a:	2b03      	cmp	r3, #3
 8007a9c:	d032      	beq.n	8007b04 <USBD_StdEPReq+0x240>
 8007a9e:	e097      	b.n	8007bd0 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007aa0:	7bbb      	ldrb	r3, [r7, #14]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d007      	beq.n	8007ab6 <USBD_StdEPReq+0x1f2>
 8007aa6:	7bbb      	ldrb	r3, [r7, #14]
 8007aa8:	2b80      	cmp	r3, #128	@ 0x80
 8007aaa:	d004      	beq.n	8007ab6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8007aac:	6839      	ldr	r1, [r7, #0]
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f000 fbed 	bl	800828e <USBD_CtlError>
                break;
 8007ab4:	e091      	b.n	8007bda <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007ab6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	da0b      	bge.n	8007ad6 <USBD_StdEPReq+0x212>
 8007abe:	7bbb      	ldrb	r3, [r7, #14]
 8007ac0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007ac4:	4613      	mov	r3, r2
 8007ac6:	009b      	lsls	r3, r3, #2
 8007ac8:	4413      	add	r3, r2
 8007aca:	009b      	lsls	r3, r3, #2
 8007acc:	3310      	adds	r3, #16
 8007ace:	687a      	ldr	r2, [r7, #4]
 8007ad0:	4413      	add	r3, r2
 8007ad2:	3304      	adds	r3, #4
 8007ad4:	e00b      	b.n	8007aee <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007ad6:	7bbb      	ldrb	r3, [r7, #14]
 8007ad8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007adc:	4613      	mov	r3, r2
 8007ade:	009b      	lsls	r3, r3, #2
 8007ae0:	4413      	add	r3, r2
 8007ae2:	009b      	lsls	r3, r3, #2
 8007ae4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007ae8:	687a      	ldr	r2, [r7, #4]
 8007aea:	4413      	add	r3, r2
 8007aec:	3304      	adds	r3, #4
 8007aee:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	2200      	movs	r2, #0
 8007af4:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	2202      	movs	r2, #2
 8007afa:	4619      	mov	r1, r3
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 fc37 	bl	8008370 <USBD_CtlSendData>
              break;
 8007b02:	e06a      	b.n	8007bda <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007b04:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	da11      	bge.n	8007b30 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8007b0c:	7bbb      	ldrb	r3, [r7, #14]
 8007b0e:	f003 020f 	and.w	r2, r3, #15
 8007b12:	6879      	ldr	r1, [r7, #4]
 8007b14:	4613      	mov	r3, r2
 8007b16:	009b      	lsls	r3, r3, #2
 8007b18:	4413      	add	r3, r2
 8007b1a:	009b      	lsls	r3, r3, #2
 8007b1c:	440b      	add	r3, r1
 8007b1e:	3324      	adds	r3, #36	@ 0x24
 8007b20:	881b      	ldrh	r3, [r3, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d117      	bne.n	8007b56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007b26:	6839      	ldr	r1, [r7, #0]
 8007b28:	6878      	ldr	r0, [r7, #4]
 8007b2a:	f000 fbb0 	bl	800828e <USBD_CtlError>
                  break;
 8007b2e:	e054      	b.n	8007bda <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8007b30:	7bbb      	ldrb	r3, [r7, #14]
 8007b32:	f003 020f 	and.w	r2, r3, #15
 8007b36:	6879      	ldr	r1, [r7, #4]
 8007b38:	4613      	mov	r3, r2
 8007b3a:	009b      	lsls	r3, r3, #2
 8007b3c:	4413      	add	r3, r2
 8007b3e:	009b      	lsls	r3, r3, #2
 8007b40:	440b      	add	r3, r1
 8007b42:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8007b46:	881b      	ldrh	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d104      	bne.n	8007b56 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8007b4c:	6839      	ldr	r1, [r7, #0]
 8007b4e:	6878      	ldr	r0, [r7, #4]
 8007b50:	f000 fb9d 	bl	800828e <USBD_CtlError>
                  break;
 8007b54:	e041      	b.n	8007bda <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	da0b      	bge.n	8007b76 <USBD_StdEPReq+0x2b2>
 8007b5e:	7bbb      	ldrb	r3, [r7, #14]
 8007b60:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007b64:	4613      	mov	r3, r2
 8007b66:	009b      	lsls	r3, r3, #2
 8007b68:	4413      	add	r3, r2
 8007b6a:	009b      	lsls	r3, r3, #2
 8007b6c:	3310      	adds	r3, #16
 8007b6e:	687a      	ldr	r2, [r7, #4]
 8007b70:	4413      	add	r3, r2
 8007b72:	3304      	adds	r3, #4
 8007b74:	e00b      	b.n	8007b8e <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007b76:	7bbb      	ldrb	r3, [r7, #14]
 8007b78:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	4413      	add	r3, r2
 8007b8c:	3304      	adds	r3, #4
 8007b8e:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8007b90:	7bbb      	ldrb	r3, [r7, #14]
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d002      	beq.n	8007b9c <USBD_StdEPReq+0x2d8>
 8007b96:	7bbb      	ldrb	r3, [r7, #14]
 8007b98:	2b80      	cmp	r3, #128	@ 0x80
 8007b9a:	d103      	bne.n	8007ba4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2200      	movs	r2, #0
 8007ba0:	601a      	str	r2, [r3, #0]
 8007ba2:	e00e      	b.n	8007bc2 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8007ba4:	7bbb      	ldrb	r3, [r7, #14]
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 ffef 	bl	8008b8c <USBD_LL_IsStallEP>
 8007bae:	4603      	mov	r3, r0
 8007bb0:	2b00      	cmp	r3, #0
 8007bb2:	d003      	beq.n	8007bbc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8007bb4:	68bb      	ldr	r3, [r7, #8]
 8007bb6:	2201      	movs	r2, #1
 8007bb8:	601a      	str	r2, [r3, #0]
 8007bba:	e002      	b.n	8007bc2 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8007bbc:	68bb      	ldr	r3, [r7, #8]
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007bc2:	68bb      	ldr	r3, [r7, #8]
 8007bc4:	2202      	movs	r2, #2
 8007bc6:	4619      	mov	r1, r3
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 fbd1 	bl	8008370 <USBD_CtlSendData>
              break;
 8007bce:	e004      	b.n	8007bda <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007bd0:	6839      	ldr	r1, [r7, #0]
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f000 fb5b 	bl	800828e <USBD_CtlError>
              break;
 8007bd8:	bf00      	nop
          }
          break;
 8007bda:	e004      	b.n	8007be6 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8007bdc:	6839      	ldr	r1, [r7, #0]
 8007bde:	6878      	ldr	r0, [r7, #4]
 8007be0:	f000 fb55 	bl	800828e <USBD_CtlError>
          break;
 8007be4:	bf00      	nop
      }
      break;
 8007be6:	e005      	b.n	8007bf4 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007be8:	6839      	ldr	r1, [r7, #0]
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 fb4f 	bl	800828e <USBD_CtlError>
      break;
 8007bf0:	e000      	b.n	8007bf4 <USBD_StdEPReq+0x330>
      break;
 8007bf2:	bf00      	nop
  }

  return ret;
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	3710      	adds	r7, #16
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	bd80      	pop	{r7, pc}
	...

08007c00 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
 8007c08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8007c0e:	2300      	movs	r3, #0
 8007c10:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007c12:	2300      	movs	r3, #0
 8007c14:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	885b      	ldrh	r3, [r3, #2]
 8007c1a:	0a1b      	lsrs	r3, r3, #8
 8007c1c:	b29b      	uxth	r3, r3
 8007c1e:	3b01      	subs	r3, #1
 8007c20:	2b06      	cmp	r3, #6
 8007c22:	f200 8128 	bhi.w	8007e76 <USBD_GetDescriptor+0x276>
 8007c26:	a201      	add	r2, pc, #4	@ (adr r2, 8007c2c <USBD_GetDescriptor+0x2c>)
 8007c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c2c:	08007c49 	.word	0x08007c49
 8007c30:	08007c61 	.word	0x08007c61
 8007c34:	08007ca1 	.word	0x08007ca1
 8007c38:	08007e77 	.word	0x08007e77
 8007c3c:	08007e77 	.word	0x08007e77
 8007c40:	08007e17 	.word	0x08007e17
 8007c44:	08007e43 	.word	0x08007e43
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	687a      	ldr	r2, [r7, #4]
 8007c52:	7c12      	ldrb	r2, [r2, #16]
 8007c54:	f107 0108 	add.w	r1, r7, #8
 8007c58:	4610      	mov	r0, r2
 8007c5a:	4798      	blx	r3
 8007c5c:	60f8      	str	r0, [r7, #12]
      break;
 8007c5e:	e112      	b.n	8007e86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	7c1b      	ldrb	r3, [r3, #16]
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d10d      	bne.n	8007c84 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c70:	f107 0208 	add.w	r2, r7, #8
 8007c74:	4610      	mov	r0, r2
 8007c76:	4798      	blx	r3
 8007c78:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	3301      	adds	r3, #1
 8007c7e:	2202      	movs	r2, #2
 8007c80:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8007c82:	e100      	b.n	8007e86 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007c8c:	f107 0208 	add.w	r2, r7, #8
 8007c90:	4610      	mov	r0, r2
 8007c92:	4798      	blx	r3
 8007c94:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	3301      	adds	r3, #1
 8007c9a:	2202      	movs	r2, #2
 8007c9c:	701a      	strb	r2, [r3, #0]
      break;
 8007c9e:	e0f2      	b.n	8007e86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	885b      	ldrh	r3, [r3, #2]
 8007ca4:	b2db      	uxtb	r3, r3
 8007ca6:	2b05      	cmp	r3, #5
 8007ca8:	f200 80ac 	bhi.w	8007e04 <USBD_GetDescriptor+0x204>
 8007cac:	a201      	add	r2, pc, #4	@ (adr r2, 8007cb4 <USBD_GetDescriptor+0xb4>)
 8007cae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cb2:	bf00      	nop
 8007cb4:	08007ccd 	.word	0x08007ccd
 8007cb8:	08007d01 	.word	0x08007d01
 8007cbc:	08007d35 	.word	0x08007d35
 8007cc0:	08007d69 	.word	0x08007d69
 8007cc4:	08007d9d 	.word	0x08007d9d
 8007cc8:	08007dd1 	.word	0x08007dd1
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d00b      	beq.n	8007cf0 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	687a      	ldr	r2, [r7, #4]
 8007ce2:	7c12      	ldrb	r2, [r2, #16]
 8007ce4:	f107 0108 	add.w	r1, r7, #8
 8007ce8:	4610      	mov	r0, r2
 8007cea:	4798      	blx	r3
 8007cec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007cee:	e091      	b.n	8007e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007cf0:	6839      	ldr	r1, [r7, #0]
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 facb 	bl	800828e <USBD_CtlError>
            err++;
 8007cf8:	7afb      	ldrb	r3, [r7, #11]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	72fb      	strb	r3, [r7, #11]
          break;
 8007cfe:	e089      	b.n	8007e14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d06:	689b      	ldr	r3, [r3, #8]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d00b      	beq.n	8007d24 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d12:	689b      	ldr	r3, [r3, #8]
 8007d14:	687a      	ldr	r2, [r7, #4]
 8007d16:	7c12      	ldrb	r2, [r2, #16]
 8007d18:	f107 0108 	add.w	r1, r7, #8
 8007d1c:	4610      	mov	r0, r2
 8007d1e:	4798      	blx	r3
 8007d20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d22:	e077      	b.n	8007e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d24:	6839      	ldr	r1, [r7, #0]
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 fab1 	bl	800828e <USBD_CtlError>
            err++;
 8007d2c:	7afb      	ldrb	r3, [r7, #11]
 8007d2e:	3301      	adds	r3, #1
 8007d30:	72fb      	strb	r3, [r7, #11]
          break;
 8007d32:	e06f      	b.n	8007e14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d3a:	68db      	ldr	r3, [r3, #12]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d00b      	beq.n	8007d58 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	687a      	ldr	r2, [r7, #4]
 8007d4a:	7c12      	ldrb	r2, [r2, #16]
 8007d4c:	f107 0108 	add.w	r1, r7, #8
 8007d50:	4610      	mov	r0, r2
 8007d52:	4798      	blx	r3
 8007d54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d56:	e05d      	b.n	8007e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d58:	6839      	ldr	r1, [r7, #0]
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f000 fa97 	bl	800828e <USBD_CtlError>
            err++;
 8007d60:	7afb      	ldrb	r3, [r7, #11]
 8007d62:	3301      	adds	r3, #1
 8007d64:	72fb      	strb	r3, [r7, #11]
          break;
 8007d66:	e055      	b.n	8007e14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d6e:	691b      	ldr	r3, [r3, #16]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d00b      	beq.n	8007d8c <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007d7a:	691b      	ldr	r3, [r3, #16]
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	7c12      	ldrb	r2, [r2, #16]
 8007d80:	f107 0108 	add.w	r1, r7, #8
 8007d84:	4610      	mov	r0, r2
 8007d86:	4798      	blx	r3
 8007d88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007d8a:	e043      	b.n	8007e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007d8c:	6839      	ldr	r1, [r7, #0]
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f000 fa7d 	bl	800828e <USBD_CtlError>
            err++;
 8007d94:	7afb      	ldrb	r3, [r7, #11]
 8007d96:	3301      	adds	r3, #1
 8007d98:	72fb      	strb	r3, [r7, #11]
          break;
 8007d9a:	e03b      	b.n	8007e14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007da2:	695b      	ldr	r3, [r3, #20]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d00b      	beq.n	8007dc0 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dae:	695b      	ldr	r3, [r3, #20]
 8007db0:	687a      	ldr	r2, [r7, #4]
 8007db2:	7c12      	ldrb	r2, [r2, #16]
 8007db4:	f107 0108 	add.w	r1, r7, #8
 8007db8:	4610      	mov	r0, r2
 8007dba:	4798      	blx	r3
 8007dbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007dbe:	e029      	b.n	8007e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007dc0:	6839      	ldr	r1, [r7, #0]
 8007dc2:	6878      	ldr	r0, [r7, #4]
 8007dc4:	f000 fa63 	bl	800828e <USBD_CtlError>
            err++;
 8007dc8:	7afb      	ldrb	r3, [r7, #11]
 8007dca:	3301      	adds	r3, #1
 8007dcc:	72fb      	strb	r3, [r7, #11]
          break;
 8007dce:	e021      	b.n	8007e14 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d00b      	beq.n	8007df4 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007de2:	699b      	ldr	r3, [r3, #24]
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	7c12      	ldrb	r2, [r2, #16]
 8007de8:	f107 0108 	add.w	r1, r7, #8
 8007dec:	4610      	mov	r0, r2
 8007dee:	4798      	blx	r3
 8007df0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007df2:	e00f      	b.n	8007e14 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007df4:	6839      	ldr	r1, [r7, #0]
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 fa49 	bl	800828e <USBD_CtlError>
            err++;
 8007dfc:	7afb      	ldrb	r3, [r7, #11]
 8007dfe:	3301      	adds	r3, #1
 8007e00:	72fb      	strb	r3, [r7, #11]
          break;
 8007e02:	e007      	b.n	8007e14 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007e04:	6839      	ldr	r1, [r7, #0]
 8007e06:	6878      	ldr	r0, [r7, #4]
 8007e08:	f000 fa41 	bl	800828e <USBD_CtlError>
          err++;
 8007e0c:	7afb      	ldrb	r3, [r7, #11]
 8007e0e:	3301      	adds	r3, #1
 8007e10:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007e12:	bf00      	nop
      }
      break;
 8007e14:	e037      	b.n	8007e86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	7c1b      	ldrb	r3, [r3, #16]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d109      	bne.n	8007e32 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e24:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007e26:	f107 0208 	add.w	r2, r7, #8
 8007e2a:	4610      	mov	r0, r2
 8007e2c:	4798      	blx	r3
 8007e2e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e30:	e029      	b.n	8007e86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e32:	6839      	ldr	r1, [r7, #0]
 8007e34:	6878      	ldr	r0, [r7, #4]
 8007e36:	f000 fa2a 	bl	800828e <USBD_CtlError>
        err++;
 8007e3a:	7afb      	ldrb	r3, [r7, #11]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	72fb      	strb	r3, [r7, #11]
      break;
 8007e40:	e021      	b.n	8007e86 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	7c1b      	ldrb	r3, [r3, #16]
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	d10d      	bne.n	8007e66 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e52:	f107 0208 	add.w	r2, r7, #8
 8007e56:	4610      	mov	r0, r2
 8007e58:	4798      	blx	r3
 8007e5a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	3301      	adds	r3, #1
 8007e60:	2207      	movs	r2, #7
 8007e62:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007e64:	e00f      	b.n	8007e86 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007e66:	6839      	ldr	r1, [r7, #0]
 8007e68:	6878      	ldr	r0, [r7, #4]
 8007e6a:	f000 fa10 	bl	800828e <USBD_CtlError>
        err++;
 8007e6e:	7afb      	ldrb	r3, [r7, #11]
 8007e70:	3301      	adds	r3, #1
 8007e72:	72fb      	strb	r3, [r7, #11]
      break;
 8007e74:	e007      	b.n	8007e86 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8007e76:	6839      	ldr	r1, [r7, #0]
 8007e78:	6878      	ldr	r0, [r7, #4]
 8007e7a:	f000 fa08 	bl	800828e <USBD_CtlError>
      err++;
 8007e7e:	7afb      	ldrb	r3, [r7, #11]
 8007e80:	3301      	adds	r3, #1
 8007e82:	72fb      	strb	r3, [r7, #11]
      break;
 8007e84:	bf00      	nop
  }

  if (err != 0U)
 8007e86:	7afb      	ldrb	r3, [r7, #11]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d11e      	bne.n	8007eca <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007e8c:	683b      	ldr	r3, [r7, #0]
 8007e8e:	88db      	ldrh	r3, [r3, #6]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d016      	beq.n	8007ec2 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8007e94:	893b      	ldrh	r3, [r7, #8]
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00e      	beq.n	8007eb8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007e9a:	683b      	ldr	r3, [r7, #0]
 8007e9c:	88da      	ldrh	r2, [r3, #6]
 8007e9e:	893b      	ldrh	r3, [r7, #8]
 8007ea0:	4293      	cmp	r3, r2
 8007ea2:	bf28      	it	cs
 8007ea4:	4613      	movcs	r3, r2
 8007ea6:	b29b      	uxth	r3, r3
 8007ea8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007eaa:	893b      	ldrh	r3, [r7, #8]
 8007eac:	461a      	mov	r2, r3
 8007eae:	68f9      	ldr	r1, [r7, #12]
 8007eb0:	6878      	ldr	r0, [r7, #4]
 8007eb2:	f000 fa5d 	bl	8008370 <USBD_CtlSendData>
 8007eb6:	e009      	b.n	8007ecc <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007eb8:	6839      	ldr	r1, [r7, #0]
 8007eba:	6878      	ldr	r0, [r7, #4]
 8007ebc:	f000 f9e7 	bl	800828e <USBD_CtlError>
 8007ec0:	e004      	b.n	8007ecc <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007ec2:	6878      	ldr	r0, [r7, #4]
 8007ec4:	f000 faae 	bl	8008424 <USBD_CtlSendStatus>
 8007ec8:	e000      	b.n	8007ecc <USBD_GetDescriptor+0x2cc>
    return;
 8007eca:	bf00      	nop
  }
}
 8007ecc:	3710      	adds	r7, #16
 8007ece:	46bd      	mov	sp, r7
 8007ed0:	bd80      	pop	{r7, pc}
 8007ed2:	bf00      	nop

08007ed4 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007ed4:	b580      	push	{r7, lr}
 8007ed6:	b084      	sub	sp, #16
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	6078      	str	r0, [r7, #4]
 8007edc:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	889b      	ldrh	r3, [r3, #4]
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d131      	bne.n	8007f4a <USBD_SetAddress+0x76>
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	88db      	ldrh	r3, [r3, #6]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d12d      	bne.n	8007f4a <USBD_SetAddress+0x76>
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	885b      	ldrh	r3, [r3, #2]
 8007ef2:	2b7f      	cmp	r3, #127	@ 0x7f
 8007ef4:	d829      	bhi.n	8007f4a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	885b      	ldrh	r3, [r3, #2]
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007f00:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f08:	b2db      	uxtb	r3, r3
 8007f0a:	2b03      	cmp	r3, #3
 8007f0c:	d104      	bne.n	8007f18 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8007f0e:	6839      	ldr	r1, [r7, #0]
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f9bc 	bl	800828e <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f16:	e01d      	b.n	8007f54 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	7bfa      	ldrb	r2, [r7, #15]
 8007f1c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007f20:	7bfb      	ldrb	r3, [r7, #15]
 8007f22:	4619      	mov	r1, r3
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fe5d 	bl	8008be4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f000 fa7a 	bl	8008424 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007f30:	7bfb      	ldrb	r3, [r7, #15]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d004      	beq.n	8007f40 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2202      	movs	r2, #2
 8007f3a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f3e:	e009      	b.n	8007f54 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	2201      	movs	r2, #1
 8007f44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007f48:	e004      	b.n	8007f54 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007f4a:	6839      	ldr	r1, [r7, #0]
 8007f4c:	6878      	ldr	r0, [r7, #4]
 8007f4e:	f000 f99e 	bl	800828e <USBD_CtlError>
  }
}
 8007f52:	bf00      	nop
 8007f54:	bf00      	nop
 8007f56:	3710      	adds	r7, #16
 8007f58:	46bd      	mov	sp, r7
 8007f5a:	bd80      	pop	{r7, pc}

08007f5c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	b084      	sub	sp, #16
 8007f60:	af00      	add	r7, sp, #0
 8007f62:	6078      	str	r0, [r7, #4]
 8007f64:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8007f66:	2300      	movs	r3, #0
 8007f68:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	885b      	ldrh	r3, [r3, #2]
 8007f6e:	b2da      	uxtb	r2, r3
 8007f70:	4b4e      	ldr	r3, [pc, #312]	@ (80080ac <USBD_SetConfig+0x150>)
 8007f72:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007f74:	4b4d      	ldr	r3, [pc, #308]	@ (80080ac <USBD_SetConfig+0x150>)
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	2b02      	cmp	r3, #2
 8007f7a:	d905      	bls.n	8007f88 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007f7c:	6839      	ldr	r1, [r7, #0]
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f985 	bl	800828e <USBD_CtlError>
    return USBD_FAIL;
 8007f84:	2303      	movs	r3, #3
 8007f86:	e08c      	b.n	80080a2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b02      	cmp	r3, #2
 8007f92:	d002      	beq.n	8007f9a <USBD_SetConfig+0x3e>
 8007f94:	2b03      	cmp	r3, #3
 8007f96:	d029      	beq.n	8007fec <USBD_SetConfig+0x90>
 8007f98:	e075      	b.n	8008086 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007f9a:	4b44      	ldr	r3, [pc, #272]	@ (80080ac <USBD_SetConfig+0x150>)
 8007f9c:	781b      	ldrb	r3, [r3, #0]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d020      	beq.n	8007fe4 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007fa2:	4b42      	ldr	r3, [pc, #264]	@ (80080ac <USBD_SetConfig+0x150>)
 8007fa4:	781b      	ldrb	r3, [r3, #0]
 8007fa6:	461a      	mov	r2, r3
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007fac:	4b3f      	ldr	r3, [pc, #252]	@ (80080ac <USBD_SetConfig+0x150>)
 8007fae:	781b      	ldrb	r3, [r3, #0]
 8007fb0:	4619      	mov	r1, r3
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7fe ffe9 	bl	8006f8a <USBD_SetClassConfig>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007fbc:	7bfb      	ldrb	r3, [r7, #15]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d008      	beq.n	8007fd4 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007fc2:	6839      	ldr	r1, [r7, #0]
 8007fc4:	6878      	ldr	r0, [r7, #4]
 8007fc6:	f000 f962 	bl	800828e <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2202      	movs	r2, #2
 8007fce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007fd2:	e065      	b.n	80080a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007fd4:	6878      	ldr	r0, [r7, #4]
 8007fd6:	f000 fa25 	bl	8008424 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2203      	movs	r2, #3
 8007fde:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007fe2:	e05d      	b.n	80080a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007fe4:	6878      	ldr	r0, [r7, #4]
 8007fe6:	f000 fa1d 	bl	8008424 <USBD_CtlSendStatus>
      break;
 8007fea:	e059      	b.n	80080a0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007fec:	4b2f      	ldr	r3, [pc, #188]	@ (80080ac <USBD_SetConfig+0x150>)
 8007fee:	781b      	ldrb	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d112      	bne.n	800801a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 8007ffc:	4b2b      	ldr	r3, [pc, #172]	@ (80080ac <USBD_SetConfig+0x150>)
 8007ffe:	781b      	ldrb	r3, [r3, #0]
 8008000:	461a      	mov	r2, r3
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008006:	4b29      	ldr	r3, [pc, #164]	@ (80080ac <USBD_SetConfig+0x150>)
 8008008:	781b      	ldrb	r3, [r3, #0]
 800800a:	4619      	mov	r1, r3
 800800c:	6878      	ldr	r0, [r7, #4]
 800800e:	f7fe ffd8 	bl	8006fc2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f000 fa06 	bl	8008424 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008018:	e042      	b.n	80080a0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800801a:	4b24      	ldr	r3, [pc, #144]	@ (80080ac <USBD_SetConfig+0x150>)
 800801c:	781b      	ldrb	r3, [r3, #0]
 800801e:	461a      	mov	r2, r3
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	429a      	cmp	r2, r3
 8008026:	d02a      	beq.n	800807e <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	685b      	ldr	r3, [r3, #4]
 800802c:	b2db      	uxtb	r3, r3
 800802e:	4619      	mov	r1, r3
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	f7fe ffc6 	bl	8006fc2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008036:	4b1d      	ldr	r3, [pc, #116]	@ (80080ac <USBD_SetConfig+0x150>)
 8008038:	781b      	ldrb	r3, [r3, #0]
 800803a:	461a      	mov	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008040:	4b1a      	ldr	r3, [pc, #104]	@ (80080ac <USBD_SetConfig+0x150>)
 8008042:	781b      	ldrb	r3, [r3, #0]
 8008044:	4619      	mov	r1, r3
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7fe ff9f 	bl	8006f8a <USBD_SetClassConfig>
 800804c:	4603      	mov	r3, r0
 800804e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008050:	7bfb      	ldrb	r3, [r7, #15]
 8008052:	2b00      	cmp	r3, #0
 8008054:	d00f      	beq.n	8008076 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008056:	6839      	ldr	r1, [r7, #0]
 8008058:	6878      	ldr	r0, [r7, #4]
 800805a:	f000 f918 	bl	800828e <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	685b      	ldr	r3, [r3, #4]
 8008062:	b2db      	uxtb	r3, r3
 8008064:	4619      	mov	r1, r3
 8008066:	6878      	ldr	r0, [r7, #4]
 8008068:	f7fe ffab 	bl	8006fc2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2202      	movs	r2, #2
 8008070:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8008074:	e014      	b.n	80080a0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008076:	6878      	ldr	r0, [r7, #4]
 8008078:	f000 f9d4 	bl	8008424 <USBD_CtlSendStatus>
      break;
 800807c:	e010      	b.n	80080a0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800807e:	6878      	ldr	r0, [r7, #4]
 8008080:	f000 f9d0 	bl	8008424 <USBD_CtlSendStatus>
      break;
 8008084:	e00c      	b.n	80080a0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008086:	6839      	ldr	r1, [r7, #0]
 8008088:	6878      	ldr	r0, [r7, #4]
 800808a:	f000 f900 	bl	800828e <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800808e:	4b07      	ldr	r3, [pc, #28]	@ (80080ac <USBD_SetConfig+0x150>)
 8008090:	781b      	ldrb	r3, [r3, #0]
 8008092:	4619      	mov	r1, r3
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	f7fe ff94 	bl	8006fc2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800809a:	2303      	movs	r3, #3
 800809c:	73fb      	strb	r3, [r7, #15]
      break;
 800809e:	bf00      	nop
  }

  return ret;
 80080a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80080a2:	4618      	mov	r0, r3
 80080a4:	3710      	adds	r7, #16
 80080a6:	46bd      	mov	sp, r7
 80080a8:	bd80      	pop	{r7, pc}
 80080aa:	bf00      	nop
 80080ac:	20000798 	.word	0x20000798

080080b0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
 80080b8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80080ba:	683b      	ldr	r3, [r7, #0]
 80080bc:	88db      	ldrh	r3, [r3, #6]
 80080be:	2b01      	cmp	r3, #1
 80080c0:	d004      	beq.n	80080cc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80080c2:	6839      	ldr	r1, [r7, #0]
 80080c4:	6878      	ldr	r0, [r7, #4]
 80080c6:	f000 f8e2 	bl	800828e <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80080ca:	e023      	b.n	8008114 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80080d2:	b2db      	uxtb	r3, r3
 80080d4:	2b02      	cmp	r3, #2
 80080d6:	dc02      	bgt.n	80080de <USBD_GetConfig+0x2e>
 80080d8:	2b00      	cmp	r3, #0
 80080da:	dc03      	bgt.n	80080e4 <USBD_GetConfig+0x34>
 80080dc:	e015      	b.n	800810a <USBD_GetConfig+0x5a>
 80080de:	2b03      	cmp	r3, #3
 80080e0:	d00b      	beq.n	80080fa <USBD_GetConfig+0x4a>
 80080e2:	e012      	b.n	800810a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2200      	movs	r2, #0
 80080e8:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	3308      	adds	r3, #8
 80080ee:	2201      	movs	r2, #1
 80080f0:	4619      	mov	r1, r3
 80080f2:	6878      	ldr	r0, [r7, #4]
 80080f4:	f000 f93c 	bl	8008370 <USBD_CtlSendData>
        break;
 80080f8:	e00c      	b.n	8008114 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	3304      	adds	r3, #4
 80080fe:	2201      	movs	r2, #1
 8008100:	4619      	mov	r1, r3
 8008102:	6878      	ldr	r0, [r7, #4]
 8008104:	f000 f934 	bl	8008370 <USBD_CtlSendData>
        break;
 8008108:	e004      	b.n	8008114 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800810a:	6839      	ldr	r1, [r7, #0]
 800810c:	6878      	ldr	r0, [r7, #4]
 800810e:	f000 f8be 	bl	800828e <USBD_CtlError>
        break;
 8008112:	bf00      	nop
}
 8008114:	bf00      	nop
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b082      	sub	sp, #8
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800812c:	b2db      	uxtb	r3, r3
 800812e:	3b01      	subs	r3, #1
 8008130:	2b02      	cmp	r3, #2
 8008132:	d81e      	bhi.n	8008172 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	88db      	ldrh	r3, [r3, #6]
 8008138:	2b02      	cmp	r3, #2
 800813a:	d004      	beq.n	8008146 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800813c:	6839      	ldr	r1, [r7, #0]
 800813e:	6878      	ldr	r0, [r7, #4]
 8008140:	f000 f8a5 	bl	800828e <USBD_CtlError>
        break;
 8008144:	e01a      	b.n	800817c <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	2201      	movs	r2, #1
 800814a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8008152:	2b00      	cmp	r3, #0
 8008154:	d005      	beq.n	8008162 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	68db      	ldr	r3, [r3, #12]
 800815a:	f043 0202 	orr.w	r2, r3, #2
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	330c      	adds	r3, #12
 8008166:	2202      	movs	r2, #2
 8008168:	4619      	mov	r1, r3
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f000 f900 	bl	8008370 <USBD_CtlSendData>
      break;
 8008170:	e004      	b.n	800817c <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008172:	6839      	ldr	r1, [r7, #0]
 8008174:	6878      	ldr	r0, [r7, #4]
 8008176:	f000 f88a 	bl	800828e <USBD_CtlError>
      break;
 800817a:	bf00      	nop
  }
}
 800817c:	bf00      	nop
 800817e:	3708      	adds	r7, #8
 8008180:	46bd      	mov	sp, r7
 8008182:	bd80      	pop	{r7, pc}

08008184 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008184:	b580      	push	{r7, lr}
 8008186:	b082      	sub	sp, #8
 8008188:	af00      	add	r7, sp, #0
 800818a:	6078      	str	r0, [r7, #4]
 800818c:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	885b      	ldrh	r3, [r3, #2]
 8008192:	2b01      	cmp	r3, #1
 8008194:	d107      	bne.n	80081a6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2201      	movs	r2, #1
 800819a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f940 	bl	8008424 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80081a4:	e013      	b.n	80081ce <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	885b      	ldrh	r3, [r3, #2]
 80081aa:	2b02      	cmp	r3, #2
 80081ac:	d10b      	bne.n	80081c6 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	889b      	ldrh	r3, [r3, #4]
 80081b2:	0a1b      	lsrs	r3, r3, #8
 80081b4:	b29b      	uxth	r3, r3
 80081b6:	b2da      	uxtb	r2, r3
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f000 f930 	bl	8008424 <USBD_CtlSendStatus>
}
 80081c4:	e003      	b.n	80081ce <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	6878      	ldr	r0, [r7, #4]
 80081ca:	f000 f860 	bl	800828e <USBD_CtlError>
}
 80081ce:	bf00      	nop
 80081d0:	3708      	adds	r7, #8
 80081d2:	46bd      	mov	sp, r7
 80081d4:	bd80      	pop	{r7, pc}

080081d6 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b082      	sub	sp, #8
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
 80081de:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80081e6:	b2db      	uxtb	r3, r3
 80081e8:	3b01      	subs	r3, #1
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	d80b      	bhi.n	8008206 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80081ee:	683b      	ldr	r3, [r7, #0]
 80081f0:	885b      	ldrh	r3, [r3, #2]
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d10c      	bne.n	8008210 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2200      	movs	r2, #0
 80081fa:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f910 	bl	8008424 <USBD_CtlSendStatus>
      }
      break;
 8008204:	e004      	b.n	8008210 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008206:	6839      	ldr	r1, [r7, #0]
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f840 	bl	800828e <USBD_CtlError>
      break;
 800820e:	e000      	b.n	8008212 <USBD_ClrFeature+0x3c>
      break;
 8008210:	bf00      	nop
  }
}
 8008212:	bf00      	nop
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800821a:	b580      	push	{r7, lr}
 800821c:	b084      	sub	sp, #16
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
 8008222:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	781a      	ldrb	r2, [r3, #0]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	3301      	adds	r3, #1
 8008234:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	781a      	ldrb	r2, [r3, #0]
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800823e:	68fb      	ldr	r3, [r7, #12]
 8008240:	3301      	adds	r3, #1
 8008242:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008244:	68f8      	ldr	r0, [r7, #12]
 8008246:	f7ff fa40 	bl	80076ca <SWAPBYTE>
 800824a:	4603      	mov	r3, r0
 800824c:	461a      	mov	r2, r3
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	3301      	adds	r3, #1
 8008256:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	3301      	adds	r3, #1
 800825c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800825e:	68f8      	ldr	r0, [r7, #12]
 8008260:	f7ff fa33 	bl	80076ca <SWAPBYTE>
 8008264:	4603      	mov	r3, r0
 8008266:	461a      	mov	r2, r3
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	3301      	adds	r3, #1
 8008270:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008272:	68fb      	ldr	r3, [r7, #12]
 8008274:	3301      	adds	r3, #1
 8008276:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f7ff fa26 	bl	80076ca <SWAPBYTE>
 800827e:	4603      	mov	r3, r0
 8008280:	461a      	mov	r2, r3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	80da      	strh	r2, [r3, #6]
}
 8008286:	bf00      	nop
 8008288:	3710      	adds	r7, #16
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}

0800828e <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800828e:	b580      	push	{r7, lr}
 8008290:	b082      	sub	sp, #8
 8008292:	af00      	add	r7, sp, #0
 8008294:	6078      	str	r0, [r7, #4]
 8008296:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008298:	2180      	movs	r1, #128	@ 0x80
 800829a:	6878      	ldr	r0, [r7, #4]
 800829c:	f000 fc38 	bl	8008b10 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80082a0:	2100      	movs	r1, #0
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 fc34 	bl	8008b10 <USBD_LL_StallEP>
}
 80082a8:	bf00      	nop
 80082aa:	3708      	adds	r7, #8
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	b086      	sub	sp, #24
 80082b4:	af00      	add	r7, sp, #0
 80082b6:	60f8      	str	r0, [r7, #12]
 80082b8:	60b9      	str	r1, [r7, #8]
 80082ba:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80082bc:	2300      	movs	r3, #0
 80082be:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d036      	beq.n	8008334 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80082ca:	6938      	ldr	r0, [r7, #16]
 80082cc:	f000 f836 	bl	800833c <USBD_GetLen>
 80082d0:	4603      	mov	r3, r0
 80082d2:	3301      	adds	r3, #1
 80082d4:	b29b      	uxth	r3, r3
 80082d6:	005b      	lsls	r3, r3, #1
 80082d8:	b29a      	uxth	r2, r3
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80082de:	7dfb      	ldrb	r3, [r7, #23]
 80082e0:	68ba      	ldr	r2, [r7, #8]
 80082e2:	4413      	add	r3, r2
 80082e4:	687a      	ldr	r2, [r7, #4]
 80082e6:	7812      	ldrb	r2, [r2, #0]
 80082e8:	701a      	strb	r2, [r3, #0]
  idx++;
 80082ea:	7dfb      	ldrb	r3, [r7, #23]
 80082ec:	3301      	adds	r3, #1
 80082ee:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80082f0:	7dfb      	ldrb	r3, [r7, #23]
 80082f2:	68ba      	ldr	r2, [r7, #8]
 80082f4:	4413      	add	r3, r2
 80082f6:	2203      	movs	r2, #3
 80082f8:	701a      	strb	r2, [r3, #0]
  idx++;
 80082fa:	7dfb      	ldrb	r3, [r7, #23]
 80082fc:	3301      	adds	r3, #1
 80082fe:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008300:	e013      	b.n	800832a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008302:	7dfb      	ldrb	r3, [r7, #23]
 8008304:	68ba      	ldr	r2, [r7, #8]
 8008306:	4413      	add	r3, r2
 8008308:	693a      	ldr	r2, [r7, #16]
 800830a:	7812      	ldrb	r2, [r2, #0]
 800830c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800830e:	693b      	ldr	r3, [r7, #16]
 8008310:	3301      	adds	r3, #1
 8008312:	613b      	str	r3, [r7, #16]
    idx++;
 8008314:	7dfb      	ldrb	r3, [r7, #23]
 8008316:	3301      	adds	r3, #1
 8008318:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800831a:	7dfb      	ldrb	r3, [r7, #23]
 800831c:	68ba      	ldr	r2, [r7, #8]
 800831e:	4413      	add	r3, r2
 8008320:	2200      	movs	r2, #0
 8008322:	701a      	strb	r2, [r3, #0]
    idx++;
 8008324:	7dfb      	ldrb	r3, [r7, #23]
 8008326:	3301      	adds	r3, #1
 8008328:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800832a:	693b      	ldr	r3, [r7, #16]
 800832c:	781b      	ldrb	r3, [r3, #0]
 800832e:	2b00      	cmp	r3, #0
 8008330:	d1e7      	bne.n	8008302 <USBD_GetString+0x52>
 8008332:	e000      	b.n	8008336 <USBD_GetString+0x86>
    return;
 8008334:	bf00      	nop
  }
}
 8008336:	3718      	adds	r7, #24
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800833c:	b480      	push	{r7}
 800833e:	b085      	sub	sp, #20
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008344:	2300      	movs	r3, #0
 8008346:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800834c:	e005      	b.n	800835a <USBD_GetLen+0x1e>
  {
    len++;
 800834e:	7bfb      	ldrb	r3, [r7, #15]
 8008350:	3301      	adds	r3, #1
 8008352:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	3301      	adds	r3, #1
 8008358:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800835a:	68bb      	ldr	r3, [r7, #8]
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	2b00      	cmp	r3, #0
 8008360:	d1f5      	bne.n	800834e <USBD_GetLen+0x12>
  }

  return len;
 8008362:	7bfb      	ldrb	r3, [r7, #15]
}
 8008364:	4618      	mov	r0, r3
 8008366:	3714      	adds	r7, #20
 8008368:	46bd      	mov	sp, r7
 800836a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836e:	4770      	bx	lr

08008370 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b084      	sub	sp, #16
 8008374:	af00      	add	r7, sp, #0
 8008376:	60f8      	str	r0, [r7, #12]
 8008378:	60b9      	str	r1, [r7, #8]
 800837a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	2202      	movs	r2, #2
 8008380:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	687a      	ldr	r2, [r7, #4]
 8008388:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	687a      	ldr	r2, [r7, #4]
 800838e:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	68ba      	ldr	r2, [r7, #8]
 8008394:	2100      	movs	r1, #0
 8008396:	68f8      	ldr	r0, [r7, #12]
 8008398:	f000 fc43 	bl	8008c22 <USBD_LL_Transmit>

  return USBD_OK;
 800839c:	2300      	movs	r3, #0
}
 800839e:	4618      	mov	r0, r3
 80083a0:	3710      	adds	r7, #16
 80083a2:	46bd      	mov	sp, r7
 80083a4:	bd80      	pop	{r7, pc}

080083a6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80083a6:	b580      	push	{r7, lr}
 80083a8:	b084      	sub	sp, #16
 80083aa:	af00      	add	r7, sp, #0
 80083ac:	60f8      	str	r0, [r7, #12]
 80083ae:	60b9      	str	r1, [r7, #8]
 80083b0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	68ba      	ldr	r2, [r7, #8]
 80083b6:	2100      	movs	r1, #0
 80083b8:	68f8      	ldr	r0, [r7, #12]
 80083ba:	f000 fc32 	bl	8008c22 <USBD_LL_Transmit>

  return USBD_OK;
 80083be:	2300      	movs	r3, #0
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	3710      	adds	r7, #16
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd80      	pop	{r7, pc}

080083c8 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	60f8      	str	r0, [r7, #12]
 80083d0:	60b9      	str	r1, [r7, #8]
 80083d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	2203      	movs	r2, #3
 80083d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	687a      	ldr	r2, [r7, #4]
 80083e8:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	68ba      	ldr	r2, [r7, #8]
 80083f0:	2100      	movs	r1, #0
 80083f2:	68f8      	ldr	r0, [r7, #12]
 80083f4:	f000 fc36 	bl	8008c64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80083f8:	2300      	movs	r3, #0
}
 80083fa:	4618      	mov	r0, r3
 80083fc:	3710      	adds	r7, #16
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}

08008402 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008402:	b580      	push	{r7, lr}
 8008404:	b084      	sub	sp, #16
 8008406:	af00      	add	r7, sp, #0
 8008408:	60f8      	str	r0, [r7, #12]
 800840a:	60b9      	str	r1, [r7, #8]
 800840c:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	68ba      	ldr	r2, [r7, #8]
 8008412:	2100      	movs	r1, #0
 8008414:	68f8      	ldr	r0, [r7, #12]
 8008416:	f000 fc25 	bl	8008c64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800841a:	2300      	movs	r3, #0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3710      	adds	r7, #16
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008424:	b580      	push	{r7, lr}
 8008426:	b082      	sub	sp, #8
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	2204      	movs	r2, #4
 8008430:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008434:	2300      	movs	r3, #0
 8008436:	2200      	movs	r2, #0
 8008438:	2100      	movs	r1, #0
 800843a:	6878      	ldr	r0, [r7, #4]
 800843c:	f000 fbf1 	bl	8008c22 <USBD_LL_Transmit>

  return USBD_OK;
 8008440:	2300      	movs	r3, #0
}
 8008442:	4618      	mov	r0, r3
 8008444:	3708      	adds	r7, #8
 8008446:	46bd      	mov	sp, r7
 8008448:	bd80      	pop	{r7, pc}

0800844a <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800844a:	b580      	push	{r7, lr}
 800844c:	b082      	sub	sp, #8
 800844e:	af00      	add	r7, sp, #0
 8008450:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008452:	687b      	ldr	r3, [r7, #4]
 8008454:	2205      	movs	r2, #5
 8008456:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800845a:	2300      	movs	r3, #0
 800845c:	2200      	movs	r2, #0
 800845e:	2100      	movs	r1, #0
 8008460:	6878      	ldr	r0, [r7, #4]
 8008462:	f000 fbff 	bl	8008c64 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3708      	adds	r7, #8
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}

08008470 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008470:	b580      	push	{r7, lr}
 8008472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008474:	2200      	movs	r2, #0
 8008476:	4912      	ldr	r1, [pc, #72]	@ (80084c0 <MX_USB_DEVICE_Init+0x50>)
 8008478:	4812      	ldr	r0, [pc, #72]	@ (80084c4 <MX_USB_DEVICE_Init+0x54>)
 800847a:	f7fe fd09 	bl	8006e90 <USBD_Init>
 800847e:	4603      	mov	r3, r0
 8008480:	2b00      	cmp	r3, #0
 8008482:	d001      	beq.n	8008488 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008484:	f7f8 fc4c 	bl	8000d20 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8008488:	490f      	ldr	r1, [pc, #60]	@ (80084c8 <MX_USB_DEVICE_Init+0x58>)
 800848a:	480e      	ldr	r0, [pc, #56]	@ (80084c4 <MX_USB_DEVICE_Init+0x54>)
 800848c:	f7fe fd30 	bl	8006ef0 <USBD_RegisterClass>
 8008490:	4603      	mov	r3, r0
 8008492:	2b00      	cmp	r3, #0
 8008494:	d001      	beq.n	800849a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8008496:	f7f8 fc43 	bl	8000d20 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 800849a:	490c      	ldr	r1, [pc, #48]	@ (80084cc <MX_USB_DEVICE_Init+0x5c>)
 800849c:	4809      	ldr	r0, [pc, #36]	@ (80084c4 <MX_USB_DEVICE_Init+0x54>)
 800849e:	f7fe fcdd 	bl	8006e5c <USBD_CUSTOM_HID_RegisterInterface>
 80084a2:	4603      	mov	r3, r0
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d001      	beq.n	80084ac <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80084a8:	f7f8 fc3a 	bl	8000d20 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80084ac:	4805      	ldr	r0, [pc, #20]	@ (80084c4 <MX_USB_DEVICE_Init+0x54>)
 80084ae:	f7fe fd55 	bl	8006f5c <USBD_Start>
 80084b2:	4603      	mov	r3, r0
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d001      	beq.n	80084bc <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80084b8:	f7f8 fc32 	bl	8000d20 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80084bc:	bf00      	nop
 80084be:	bd80      	pop	{r7, pc}
 80084c0:	20000180 	.word	0x20000180
 80084c4:	2000079c 	.word	0x2000079c
 80084c8:	2000008c 	.word	0x2000008c
 80084cc:	20000170 	.word	0x20000170

080084d0 <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 80084d0:	b480      	push	{r7}
 80084d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80084d4:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	46bd      	mov	sp, r7
 80084da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084de:	4770      	bx	lr

080084e0 <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 80084e0:	b480      	push	{r7}
 80084e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 80084e4:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80084e6:	4618      	mov	r0, r3
 80084e8:	46bd      	mov	sp, r7
 80084ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ee:	4770      	bx	lr

080084f0 <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b082      	sub	sp, #8
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	4603      	mov	r3, r0
 80084f8:	460a      	mov	r2, r1
 80084fa:	71fb      	strb	r3, [r7, #7]
 80084fc:	4613      	mov	r3, r2
 80084fe:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8008500:	4806      	ldr	r0, [pc, #24]	@ (800851c <CUSTOM_HID_OutEvent_FS+0x2c>)
 8008502:	f7fe fc49 	bl	8006d98 <USBD_CUSTOM_HID_ReceivePacket>
 8008506:	4603      	mov	r3, r0
 8008508:	2b00      	cmp	r3, #0
 800850a:	d002      	beq.n	8008512 <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 800850c:	f04f 33ff 	mov.w	r3, #4294967295
 8008510:	e000      	b.n	8008514 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 8008512:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8008514:	4618      	mov	r0, r3
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}
 800851c:	2000079c 	.word	0x2000079c

08008520 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	4603      	mov	r3, r0
 8008528:	6039      	str	r1, [r7, #0]
 800852a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800852c:	683b      	ldr	r3, [r7, #0]
 800852e:	2212      	movs	r2, #18
 8008530:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8008532:	4b03      	ldr	r3, [pc, #12]	@ (8008540 <USBD_FS_DeviceDescriptor+0x20>)
}
 8008534:	4618      	mov	r0, r3
 8008536:	370c      	adds	r7, #12
 8008538:	46bd      	mov	sp, r7
 800853a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853e:	4770      	bx	lr
 8008540:	2000019c 	.word	0x2000019c

08008544 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	4603      	mov	r3, r0
 800854c:	6039      	str	r1, [r7, #0]
 800854e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	2204      	movs	r2, #4
 8008554:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8008556:	4b03      	ldr	r3, [pc, #12]	@ (8008564 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8008558:	4618      	mov	r0, r3
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr
 8008564:	200001b0 	.word	0x200001b0

08008568 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8008568:	b580      	push	{r7, lr}
 800856a:	b082      	sub	sp, #8
 800856c:	af00      	add	r7, sp, #0
 800856e:	4603      	mov	r3, r0
 8008570:	6039      	str	r1, [r7, #0]
 8008572:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008574:	79fb      	ldrb	r3, [r7, #7]
 8008576:	2b00      	cmp	r3, #0
 8008578:	d105      	bne.n	8008586 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	4907      	ldr	r1, [pc, #28]	@ (800859c <USBD_FS_ProductStrDescriptor+0x34>)
 800857e:	4808      	ldr	r0, [pc, #32]	@ (80085a0 <USBD_FS_ProductStrDescriptor+0x38>)
 8008580:	f7ff fe96 	bl	80082b0 <USBD_GetString>
 8008584:	e004      	b.n	8008590 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8008586:	683a      	ldr	r2, [r7, #0]
 8008588:	4904      	ldr	r1, [pc, #16]	@ (800859c <USBD_FS_ProductStrDescriptor+0x34>)
 800858a:	4805      	ldr	r0, [pc, #20]	@ (80085a0 <USBD_FS_ProductStrDescriptor+0x38>)
 800858c:	f7ff fe90 	bl	80082b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008590:	4b02      	ldr	r3, [pc, #8]	@ (800859c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8008592:	4618      	mov	r0, r3
 8008594:	3708      	adds	r7, #8
 8008596:	46bd      	mov	sp, r7
 8008598:	bd80      	pop	{r7, pc}
 800859a:	bf00      	nop
 800859c:	20000a78 	.word	0x20000a78
 80085a0:	080096e4 	.word	0x080096e4

080085a4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	b082      	sub	sp, #8
 80085a8:	af00      	add	r7, sp, #0
 80085aa:	4603      	mov	r3, r0
 80085ac:	6039      	str	r1, [r7, #0]
 80085ae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80085b0:	683a      	ldr	r2, [r7, #0]
 80085b2:	4904      	ldr	r1, [pc, #16]	@ (80085c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80085b4:	4804      	ldr	r0, [pc, #16]	@ (80085c8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80085b6:	f7ff fe7b 	bl	80082b0 <USBD_GetString>
  return USBD_StrDesc;
 80085ba:	4b02      	ldr	r3, [pc, #8]	@ (80085c4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80085bc:	4618      	mov	r0, r3
 80085be:	3708      	adds	r7, #8
 80085c0:	46bd      	mov	sp, r7
 80085c2:	bd80      	pop	{r7, pc}
 80085c4:	20000a78 	.word	0x20000a78
 80085c8:	080096f4 	.word	0x080096f4

080085cc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b082      	sub	sp, #8
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	4603      	mov	r3, r0
 80085d4:	6039      	str	r1, [r7, #0]
 80085d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	221a      	movs	r2, #26
 80085dc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80085de:	f000 f843 	bl	8008668 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80085e2:	4b02      	ldr	r3, [pc, #8]	@ (80085ec <USBD_FS_SerialStrDescriptor+0x20>)
}
 80085e4:	4618      	mov	r0, r3
 80085e6:	3708      	adds	r7, #8
 80085e8:	46bd      	mov	sp, r7
 80085ea:	bd80      	pop	{r7, pc}
 80085ec:	200001b4 	.word	0x200001b4

080085f0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b082      	sub	sp, #8
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	4603      	mov	r3, r0
 80085f8:	6039      	str	r1, [r7, #0]
 80085fa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80085fc:	79fb      	ldrb	r3, [r7, #7]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d105      	bne.n	800860e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8008602:	683a      	ldr	r2, [r7, #0]
 8008604:	4907      	ldr	r1, [pc, #28]	@ (8008624 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008606:	4808      	ldr	r0, [pc, #32]	@ (8008628 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008608:	f7ff fe52 	bl	80082b0 <USBD_GetString>
 800860c:	e004      	b.n	8008618 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800860e:	683a      	ldr	r2, [r7, #0]
 8008610:	4904      	ldr	r1, [pc, #16]	@ (8008624 <USBD_FS_ConfigStrDescriptor+0x34>)
 8008612:	4805      	ldr	r0, [pc, #20]	@ (8008628 <USBD_FS_ConfigStrDescriptor+0x38>)
 8008614:	f7ff fe4c 	bl	80082b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008618:	4b02      	ldr	r3, [pc, #8]	@ (8008624 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800861a:	4618      	mov	r0, r3
 800861c:	3708      	adds	r7, #8
 800861e:	46bd      	mov	sp, r7
 8008620:	bd80      	pop	{r7, pc}
 8008622:	bf00      	nop
 8008624:	20000a78 	.word	0x20000a78
 8008628:	08009708 	.word	0x08009708

0800862c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800862c:	b580      	push	{r7, lr}
 800862e:	b082      	sub	sp, #8
 8008630:	af00      	add	r7, sp, #0
 8008632:	4603      	mov	r3, r0
 8008634:	6039      	str	r1, [r7, #0]
 8008636:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8008638:	79fb      	ldrb	r3, [r7, #7]
 800863a:	2b00      	cmp	r3, #0
 800863c:	d105      	bne.n	800864a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800863e:	683a      	ldr	r2, [r7, #0]
 8008640:	4907      	ldr	r1, [pc, #28]	@ (8008660 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8008642:	4808      	ldr	r0, [pc, #32]	@ (8008664 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008644:	f7ff fe34 	bl	80082b0 <USBD_GetString>
 8008648:	e004      	b.n	8008654 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800864a:	683a      	ldr	r2, [r7, #0]
 800864c:	4904      	ldr	r1, [pc, #16]	@ (8008660 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800864e:	4805      	ldr	r0, [pc, #20]	@ (8008664 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8008650:	f7ff fe2e 	bl	80082b0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8008654:	4b02      	ldr	r3, [pc, #8]	@ (8008660 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8008656:	4618      	mov	r0, r3
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}
 800865e:	bf00      	nop
 8008660:	20000a78 	.word	0x20000a78
 8008664:	0800971c 	.word	0x0800971c

08008668 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8008668:	b580      	push	{r7, lr}
 800866a:	b084      	sub	sp, #16
 800866c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800866e:	4b0f      	ldr	r3, [pc, #60]	@ (80086ac <Get_SerialNum+0x44>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8008674:	4b0e      	ldr	r3, [pc, #56]	@ (80086b0 <Get_SerialNum+0x48>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800867a:	4b0e      	ldr	r3, [pc, #56]	@ (80086b4 <Get_SerialNum+0x4c>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	4413      	add	r3, r2
 8008686:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8008688:	68fb      	ldr	r3, [r7, #12]
 800868a:	2b00      	cmp	r3, #0
 800868c:	d009      	beq.n	80086a2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800868e:	2208      	movs	r2, #8
 8008690:	4909      	ldr	r1, [pc, #36]	@ (80086b8 <Get_SerialNum+0x50>)
 8008692:	68f8      	ldr	r0, [r7, #12]
 8008694:	f000 f814 	bl	80086c0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8008698:	2204      	movs	r2, #4
 800869a:	4908      	ldr	r1, [pc, #32]	@ (80086bc <Get_SerialNum+0x54>)
 800869c:	68b8      	ldr	r0, [r7, #8]
 800869e:	f000 f80f 	bl	80086c0 <IntToUnicode>
  }
}
 80086a2:	bf00      	nop
 80086a4:	3710      	adds	r7, #16
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	1fff7a10 	.word	0x1fff7a10
 80086b0:	1fff7a14 	.word	0x1fff7a14
 80086b4:	1fff7a18 	.word	0x1fff7a18
 80086b8:	200001b6 	.word	0x200001b6
 80086bc:	200001c6 	.word	0x200001c6

080086c0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80086c0:	b480      	push	{r7}
 80086c2:	b087      	sub	sp, #28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	60f8      	str	r0, [r7, #12]
 80086c8:	60b9      	str	r1, [r7, #8]
 80086ca:	4613      	mov	r3, r2
 80086cc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80086ce:	2300      	movs	r3, #0
 80086d0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80086d2:	2300      	movs	r3, #0
 80086d4:	75fb      	strb	r3, [r7, #23]
 80086d6:	e027      	b.n	8008728 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	0f1b      	lsrs	r3, r3, #28
 80086dc:	2b09      	cmp	r3, #9
 80086de:	d80b      	bhi.n	80086f8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	0f1b      	lsrs	r3, r3, #28
 80086e4:	b2da      	uxtb	r2, r3
 80086e6:	7dfb      	ldrb	r3, [r7, #23]
 80086e8:	005b      	lsls	r3, r3, #1
 80086ea:	4619      	mov	r1, r3
 80086ec:	68bb      	ldr	r3, [r7, #8]
 80086ee:	440b      	add	r3, r1
 80086f0:	3230      	adds	r2, #48	@ 0x30
 80086f2:	b2d2      	uxtb	r2, r2
 80086f4:	701a      	strb	r2, [r3, #0]
 80086f6:	e00a      	b.n	800870e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80086f8:	68fb      	ldr	r3, [r7, #12]
 80086fa:	0f1b      	lsrs	r3, r3, #28
 80086fc:	b2da      	uxtb	r2, r3
 80086fe:	7dfb      	ldrb	r3, [r7, #23]
 8008700:	005b      	lsls	r3, r3, #1
 8008702:	4619      	mov	r1, r3
 8008704:	68bb      	ldr	r3, [r7, #8]
 8008706:	440b      	add	r3, r1
 8008708:	3237      	adds	r2, #55	@ 0x37
 800870a:	b2d2      	uxtb	r2, r2
 800870c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800870e:	68fb      	ldr	r3, [r7, #12]
 8008710:	011b      	lsls	r3, r3, #4
 8008712:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8008714:	7dfb      	ldrb	r3, [r7, #23]
 8008716:	005b      	lsls	r3, r3, #1
 8008718:	3301      	adds	r3, #1
 800871a:	68ba      	ldr	r2, [r7, #8]
 800871c:	4413      	add	r3, r2
 800871e:	2200      	movs	r2, #0
 8008720:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8008722:	7dfb      	ldrb	r3, [r7, #23]
 8008724:	3301      	adds	r3, #1
 8008726:	75fb      	strb	r3, [r7, #23]
 8008728:	7dfa      	ldrb	r2, [r7, #23]
 800872a:	79fb      	ldrb	r3, [r7, #7]
 800872c:	429a      	cmp	r2, r3
 800872e:	d3d3      	bcc.n	80086d8 <IntToUnicode+0x18>
  }
}
 8008730:	bf00      	nop
 8008732:	bf00      	nop
 8008734:	371c      	adds	r7, #28
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
	...

08008740 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8008740:	b580      	push	{r7, lr}
 8008742:	b08a      	sub	sp, #40	@ 0x28
 8008744:	af00      	add	r7, sp, #0
 8008746:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008748:	f107 0314 	add.w	r3, r7, #20
 800874c:	2200      	movs	r2, #0
 800874e:	601a      	str	r2, [r3, #0]
 8008750:	605a      	str	r2, [r3, #4]
 8008752:	609a      	str	r2, [r3, #8]
 8008754:	60da      	str	r2, [r3, #12]
 8008756:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8008760:	d13a      	bne.n	80087d8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008762:	2300      	movs	r3, #0
 8008764:	613b      	str	r3, [r7, #16]
 8008766:	4b1e      	ldr	r3, [pc, #120]	@ (80087e0 <HAL_PCD_MspInit+0xa0>)
 8008768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800876a:	4a1d      	ldr	r2, [pc, #116]	@ (80087e0 <HAL_PCD_MspInit+0xa0>)
 800876c:	f043 0301 	orr.w	r3, r3, #1
 8008770:	6313      	str	r3, [r2, #48]	@ 0x30
 8008772:	4b1b      	ldr	r3, [pc, #108]	@ (80087e0 <HAL_PCD_MspInit+0xa0>)
 8008774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008776:	f003 0301 	and.w	r3, r3, #1
 800877a:	613b      	str	r3, [r7, #16]
 800877c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800877e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8008782:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008784:	2302      	movs	r3, #2
 8008786:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008788:	2300      	movs	r3, #0
 800878a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800878c:	2303      	movs	r3, #3
 800878e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008790:	230a      	movs	r3, #10
 8008792:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008794:	f107 0314 	add.w	r3, r7, #20
 8008798:	4619      	mov	r1, r3
 800879a:	4812      	ldr	r0, [pc, #72]	@ (80087e4 <HAL_PCD_MspInit+0xa4>)
 800879c:	f7f9 fc72 	bl	8002084 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80087a0:	4b0f      	ldr	r3, [pc, #60]	@ (80087e0 <HAL_PCD_MspInit+0xa0>)
 80087a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80087a4:	4a0e      	ldr	r2, [pc, #56]	@ (80087e0 <HAL_PCD_MspInit+0xa0>)
 80087a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80087aa:	6353      	str	r3, [r2, #52]	@ 0x34
 80087ac:	2300      	movs	r3, #0
 80087ae:	60fb      	str	r3, [r7, #12]
 80087b0:	4b0b      	ldr	r3, [pc, #44]	@ (80087e0 <HAL_PCD_MspInit+0xa0>)
 80087b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087b4:	4a0a      	ldr	r2, [pc, #40]	@ (80087e0 <HAL_PCD_MspInit+0xa0>)
 80087b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80087ba:	6453      	str	r3, [r2, #68]	@ 0x44
 80087bc:	4b08      	ldr	r3, [pc, #32]	@ (80087e0 <HAL_PCD_MspInit+0xa0>)
 80087be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80087c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80087c4:	60fb      	str	r3, [r7, #12]
 80087c6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80087c8:	2200      	movs	r2, #0
 80087ca:	2100      	movs	r1, #0
 80087cc:	2043      	movs	r0, #67	@ 0x43
 80087ce:	f7f9 fc22 	bl	8002016 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80087d2:	2043      	movs	r0, #67	@ 0x43
 80087d4:	f7f9 fc3b 	bl	800204e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80087d8:	bf00      	nop
 80087da:	3728      	adds	r7, #40	@ 0x28
 80087dc:	46bd      	mov	sp, r7
 80087de:	bd80      	pop	{r7, pc}
 80087e0:	40023800 	.word	0x40023800
 80087e4:	40020000 	.word	0x40020000

080087e8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80087e8:	b580      	push	{r7, lr}
 80087ea:	b082      	sub	sp, #8
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80087fc:	4619      	mov	r1, r3
 80087fe:	4610      	mov	r0, r2
 8008800:	f7fe fbf9 	bl	8006ff6 <USBD_LL_SetupStage>
}
 8008804:	bf00      	nop
 8008806:	3708      	adds	r7, #8
 8008808:	46bd      	mov	sp, r7
 800880a:	bd80      	pop	{r7, pc}

0800880c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b082      	sub	sp, #8
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
 8008814:	460b      	mov	r3, r1
 8008816:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800881e:	78fa      	ldrb	r2, [r7, #3]
 8008820:	6879      	ldr	r1, [r7, #4]
 8008822:	4613      	mov	r3, r2
 8008824:	00db      	lsls	r3, r3, #3
 8008826:	4413      	add	r3, r2
 8008828:	009b      	lsls	r3, r3, #2
 800882a:	440b      	add	r3, r1
 800882c:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	78fb      	ldrb	r3, [r7, #3]
 8008834:	4619      	mov	r1, r3
 8008836:	f7fe fc33 	bl	80070a0 <USBD_LL_DataOutStage>
}
 800883a:	bf00      	nop
 800883c:	3708      	adds	r7, #8
 800883e:	46bd      	mov	sp, r7
 8008840:	bd80      	pop	{r7, pc}

08008842 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008842:	b580      	push	{r7, lr}
 8008844:	b082      	sub	sp, #8
 8008846:	af00      	add	r7, sp, #0
 8008848:	6078      	str	r0, [r7, #4]
 800884a:	460b      	mov	r3, r1
 800884c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8008854:	78fa      	ldrb	r2, [r7, #3]
 8008856:	6879      	ldr	r1, [r7, #4]
 8008858:	4613      	mov	r3, r2
 800885a:	00db      	lsls	r3, r3, #3
 800885c:	4413      	add	r3, r2
 800885e:	009b      	lsls	r3, r3, #2
 8008860:	440b      	add	r3, r1
 8008862:	334c      	adds	r3, #76	@ 0x4c
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	78fb      	ldrb	r3, [r7, #3]
 8008868:	4619      	mov	r1, r3
 800886a:	f7fe fccc 	bl	8007206 <USBD_LL_DataInStage>
}
 800886e:	bf00      	nop
 8008870:	3708      	adds	r7, #8
 8008872:	46bd      	mov	sp, r7
 8008874:	bd80      	pop	{r7, pc}

08008876 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008876:	b580      	push	{r7, lr}
 8008878:	b082      	sub	sp, #8
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8008884:	4618      	mov	r0, r3
 8008886:	f7fe fe00 	bl	800748a <USBD_LL_SOF>
}
 800888a:	bf00      	nop
 800888c:	3708      	adds	r7, #8
 800888e:	46bd      	mov	sp, r7
 8008890:	bd80      	pop	{r7, pc}

08008892 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008892:	b580      	push	{r7, lr}
 8008894:	b084      	sub	sp, #16
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800889a:	2301      	movs	r3, #1
 800889c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	68db      	ldr	r3, [r3, #12]
 80088a2:	2b02      	cmp	r3, #2
 80088a4:	d001      	beq.n	80088aa <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80088a6:	f7f8 fa3b 	bl	8000d20 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80088b0:	7bfa      	ldrb	r2, [r7, #15]
 80088b2:	4611      	mov	r1, r2
 80088b4:	4618      	mov	r0, r3
 80088b6:	f7fe fdaa 	bl	800740e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80088c0:	4618      	mov	r0, r3
 80088c2:	f7fe fd52 	bl	800736a <USBD_LL_Reset>
}
 80088c6:	bf00      	nop
 80088c8:	3710      	adds	r7, #16
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
	...

080088d0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80088d0:	b580      	push	{r7, lr}
 80088d2:	b082      	sub	sp, #8
 80088d4:	af00      	add	r7, sp, #0
 80088d6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80088de:	4618      	mov	r0, r3
 80088e0:	f7fe fda5 	bl	800742e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	687a      	ldr	r2, [r7, #4]
 80088f0:	6812      	ldr	r2, [r2, #0]
 80088f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80088f6:	f043 0301 	orr.w	r3, r3, #1
 80088fa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	6a1b      	ldr	r3, [r3, #32]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d005      	beq.n	8008910 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8008904:	4b04      	ldr	r3, [pc, #16]	@ (8008918 <HAL_PCD_SuspendCallback+0x48>)
 8008906:	691b      	ldr	r3, [r3, #16]
 8008908:	4a03      	ldr	r2, [pc, #12]	@ (8008918 <HAL_PCD_SuspendCallback+0x48>)
 800890a:	f043 0306 	orr.w	r3, r3, #6
 800890e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008910:	bf00      	nop
 8008912:	3708      	adds	r7, #8
 8008914:	46bd      	mov	sp, r7
 8008916:	bd80      	pop	{r7, pc}
 8008918:	e000ed00 	.word	0xe000ed00

0800891c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b082      	sub	sp, #8
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800892a:	4618      	mov	r0, r3
 800892c:	f7fe fd95 	bl	800745a <USBD_LL_Resume>
}
 8008930:	bf00      	nop
 8008932:	3708      	adds	r7, #8
 8008934:	46bd      	mov	sp, r7
 8008936:	bd80      	pop	{r7, pc}

08008938 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008938:	b580      	push	{r7, lr}
 800893a:	b082      	sub	sp, #8
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
 8008940:	460b      	mov	r3, r1
 8008942:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800894a:	78fa      	ldrb	r2, [r7, #3]
 800894c:	4611      	mov	r1, r2
 800894e:	4618      	mov	r0, r3
 8008950:	f7fe fded 	bl	800752e <USBD_LL_IsoOUTIncomplete>
}
 8008954:	bf00      	nop
 8008956:	3708      	adds	r7, #8
 8008958:	46bd      	mov	sp, r7
 800895a:	bd80      	pop	{r7, pc}

0800895c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800895c:	b580      	push	{r7, lr}
 800895e:	b082      	sub	sp, #8
 8008960:	af00      	add	r7, sp, #0
 8008962:	6078      	str	r0, [r7, #4]
 8008964:	460b      	mov	r3, r1
 8008966:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800896e:	78fa      	ldrb	r2, [r7, #3]
 8008970:	4611      	mov	r1, r2
 8008972:	4618      	mov	r0, r3
 8008974:	f7fe fda9 	bl	80074ca <USBD_LL_IsoINIncomplete>
}
 8008978:	bf00      	nop
 800897a:	3708      	adds	r7, #8
 800897c:	46bd      	mov	sp, r7
 800897e:	bd80      	pop	{r7, pc}

08008980 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b082      	sub	sp, #8
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800898e:	4618      	mov	r0, r3
 8008990:	f7fe fdff 	bl	8007592 <USBD_LL_DevConnected>
}
 8008994:	bf00      	nop
 8008996:	3708      	adds	r7, #8
 8008998:	46bd      	mov	sp, r7
 800899a:	bd80      	pop	{r7, pc}

0800899c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b082      	sub	sp, #8
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80089aa:	4618      	mov	r0, r3
 80089ac:	f7fe fdfc 	bl	80075a8 <USBD_LL_DevDisconnected>
}
 80089b0:	bf00      	nop
 80089b2:	3708      	adds	r7, #8
 80089b4:	46bd      	mov	sp, r7
 80089b6:	bd80      	pop	{r7, pc}

080089b8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	781b      	ldrb	r3, [r3, #0]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d13c      	bne.n	8008a42 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80089c8:	4a20      	ldr	r2, [pc, #128]	@ (8008a4c <USBD_LL_Init+0x94>)
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	4a1e      	ldr	r2, [pc, #120]	@ (8008a4c <USBD_LL_Init+0x94>)
 80089d4:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80089d8:	4b1c      	ldr	r3, [pc, #112]	@ (8008a4c <USBD_LL_Init+0x94>)
 80089da:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80089de:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80089e0:	4b1a      	ldr	r3, [pc, #104]	@ (8008a4c <USBD_LL_Init+0x94>)
 80089e2:	2204      	movs	r2, #4
 80089e4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80089e6:	4b19      	ldr	r3, [pc, #100]	@ (8008a4c <USBD_LL_Init+0x94>)
 80089e8:	2202      	movs	r2, #2
 80089ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80089ec:	4b17      	ldr	r3, [pc, #92]	@ (8008a4c <USBD_LL_Init+0x94>)
 80089ee:	2200      	movs	r2, #0
 80089f0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80089f2:	4b16      	ldr	r3, [pc, #88]	@ (8008a4c <USBD_LL_Init+0x94>)
 80089f4:	2202      	movs	r2, #2
 80089f6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80089f8:	4b14      	ldr	r3, [pc, #80]	@ (8008a4c <USBD_LL_Init+0x94>)
 80089fa:	2200      	movs	r2, #0
 80089fc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80089fe:	4b13      	ldr	r3, [pc, #76]	@ (8008a4c <USBD_LL_Init+0x94>)
 8008a00:	2200      	movs	r2, #0
 8008a02:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8008a04:	4b11      	ldr	r3, [pc, #68]	@ (8008a4c <USBD_LL_Init+0x94>)
 8008a06:	2200      	movs	r2, #0
 8008a08:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008a0a:	4b10      	ldr	r3, [pc, #64]	@ (8008a4c <USBD_LL_Init+0x94>)
 8008a0c:	2200      	movs	r2, #0
 8008a0e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008a10:	4b0e      	ldr	r3, [pc, #56]	@ (8008a4c <USBD_LL_Init+0x94>)
 8008a12:	2200      	movs	r2, #0
 8008a14:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8008a16:	480d      	ldr	r0, [pc, #52]	@ (8008a4c <USBD_LL_Init+0x94>)
 8008a18:	f7fa f92b 	bl	8002c72 <HAL_PCD_Init>
 8008a1c:	4603      	mov	r3, r0
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d001      	beq.n	8008a26 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8008a22:	f7f8 f97d 	bl	8000d20 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8008a26:	2180      	movs	r1, #128	@ 0x80
 8008a28:	4808      	ldr	r0, [pc, #32]	@ (8008a4c <USBD_LL_Init+0x94>)
 8008a2a:	f7fb fb6a 	bl	8004102 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008a2e:	2240      	movs	r2, #64	@ 0x40
 8008a30:	2100      	movs	r1, #0
 8008a32:	4806      	ldr	r0, [pc, #24]	@ (8008a4c <USBD_LL_Init+0x94>)
 8008a34:	f7fb fb1e 	bl	8004074 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008a38:	2280      	movs	r2, #128	@ 0x80
 8008a3a:	2101      	movs	r1, #1
 8008a3c:	4803      	ldr	r0, [pc, #12]	@ (8008a4c <USBD_LL_Init+0x94>)
 8008a3e:	f7fb fb19 	bl	8004074 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8008a42:	2300      	movs	r3, #0
}
 8008a44:	4618      	mov	r0, r3
 8008a46:	3708      	adds	r7, #8
 8008a48:	46bd      	mov	sp, r7
 8008a4a:	bd80      	pop	{r7, pc}
 8008a4c:	20000c78 	.word	0x20000c78

08008a50 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8008a50:	b580      	push	{r7, lr}
 8008a52:	b084      	sub	sp, #16
 8008a54:	af00      	add	r7, sp, #0
 8008a56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008a58:	2300      	movs	r3, #0
 8008a5a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008a66:	4618      	mov	r0, r3
 8008a68:	f7fa fa20 	bl	8002eac <HAL_PCD_Start>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008a70:	7bfb      	ldrb	r3, [r7, #15]
 8008a72:	4618      	mov	r0, r3
 8008a74:	f000 f930 	bl	8008cd8 <USBD_Get_USB_Status>
 8008a78:	4603      	mov	r3, r0
 8008a7a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008a7c:	7bbb      	ldrb	r3, [r7, #14]
}
 8008a7e:	4618      	mov	r0, r3
 8008a80:	3710      	adds	r7, #16
 8008a82:	46bd      	mov	sp, r7
 8008a84:	bd80      	pop	{r7, pc}

08008a86 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8008a86:	b580      	push	{r7, lr}
 8008a88:	b084      	sub	sp, #16
 8008a8a:	af00      	add	r7, sp, #0
 8008a8c:	6078      	str	r0, [r7, #4]
 8008a8e:	4608      	mov	r0, r1
 8008a90:	4611      	mov	r1, r2
 8008a92:	461a      	mov	r2, r3
 8008a94:	4603      	mov	r3, r0
 8008a96:	70fb      	strb	r3, [r7, #3]
 8008a98:	460b      	mov	r3, r1
 8008a9a:	70bb      	strb	r3, [r7, #2]
 8008a9c:	4613      	mov	r3, r2
 8008a9e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008aa0:	2300      	movs	r3, #0
 8008aa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008aae:	78bb      	ldrb	r3, [r7, #2]
 8008ab0:	883a      	ldrh	r2, [r7, #0]
 8008ab2:	78f9      	ldrb	r1, [r7, #3]
 8008ab4:	f7fa fef1 	bl	800389a <HAL_PCD_EP_Open>
 8008ab8:	4603      	mov	r3, r0
 8008aba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008abc:	7bfb      	ldrb	r3, [r7, #15]
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f000 f90a 	bl	8008cd8 <USBD_Get_USB_Status>
 8008ac4:	4603      	mov	r3, r0
 8008ac6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008ac8:	7bbb      	ldrb	r3, [r7, #14]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}

08008ad2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008ad2:	b580      	push	{r7, lr}
 8008ad4:	b084      	sub	sp, #16
 8008ad6:	af00      	add	r7, sp, #0
 8008ad8:	6078      	str	r0, [r7, #4]
 8008ada:	460b      	mov	r3, r1
 8008adc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ae2:	2300      	movs	r3, #0
 8008ae4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008aec:	78fa      	ldrb	r2, [r7, #3]
 8008aee:	4611      	mov	r1, r2
 8008af0:	4618      	mov	r0, r3
 8008af2:	f7fa ff3a 	bl	800396a <HAL_PCD_EP_Close>
 8008af6:	4603      	mov	r3, r0
 8008af8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008afa:	7bfb      	ldrb	r3, [r7, #15]
 8008afc:	4618      	mov	r0, r3
 8008afe:	f000 f8eb 	bl	8008cd8 <USBD_Get_USB_Status>
 8008b02:	4603      	mov	r3, r0
 8008b04:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b06:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b08:	4618      	mov	r0, r3
 8008b0a:	3710      	adds	r7, #16
 8008b0c:	46bd      	mov	sp, r7
 8008b0e:	bd80      	pop	{r7, pc}

08008b10 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
 8008b18:	460b      	mov	r3, r1
 8008b1a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b20:	2300      	movs	r3, #0
 8008b22:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b2a:	78fa      	ldrb	r2, [r7, #3]
 8008b2c:	4611      	mov	r1, r2
 8008b2e:	4618      	mov	r0, r3
 8008b30:	f7fa fffa 	bl	8003b28 <HAL_PCD_EP_SetStall>
 8008b34:	4603      	mov	r3, r0
 8008b36:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b38:	7bfb      	ldrb	r3, [r7, #15]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f000 f8cc 	bl	8008cd8 <USBD_Get_USB_Status>
 8008b40:	4603      	mov	r3, r0
 8008b42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b44:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b46:	4618      	mov	r0, r3
 8008b48:	3710      	adds	r7, #16
 8008b4a:	46bd      	mov	sp, r7
 8008b4c:	bd80      	pop	{r7, pc}

08008b4e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b4e:	b580      	push	{r7, lr}
 8008b50:	b084      	sub	sp, #16
 8008b52:	af00      	add	r7, sp, #0
 8008b54:	6078      	str	r0, [r7, #4]
 8008b56:	460b      	mov	r3, r1
 8008b58:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008b5e:	2300      	movs	r3, #0
 8008b60:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b68:	78fa      	ldrb	r2, [r7, #3]
 8008b6a:	4611      	mov	r1, r2
 8008b6c:	4618      	mov	r0, r3
 8008b6e:	f7fb f83f 	bl	8003bf0 <HAL_PCD_EP_ClrStall>
 8008b72:	4603      	mov	r3, r0
 8008b74:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008b76:	7bfb      	ldrb	r3, [r7, #15]
 8008b78:	4618      	mov	r0, r3
 8008b7a:	f000 f8ad 	bl	8008cd8 <USBD_Get_USB_Status>
 8008b7e:	4603      	mov	r3, r0
 8008b80:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008b82:	7bbb      	ldrb	r3, [r7, #14]
}
 8008b84:	4618      	mov	r0, r3
 8008b86:	3710      	adds	r7, #16
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b085      	sub	sp, #20
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	6078      	str	r0, [r7, #4]
 8008b94:	460b      	mov	r3, r1
 8008b96:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008b9e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8008ba0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	da0b      	bge.n	8008bc0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008ba8:	78fb      	ldrb	r3, [r7, #3]
 8008baa:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bae:	68f9      	ldr	r1, [r7, #12]
 8008bb0:	4613      	mov	r3, r2
 8008bb2:	00db      	lsls	r3, r3, #3
 8008bb4:	4413      	add	r3, r2
 8008bb6:	009b      	lsls	r3, r3, #2
 8008bb8:	440b      	add	r3, r1
 8008bba:	333e      	adds	r3, #62	@ 0x3e
 8008bbc:	781b      	ldrb	r3, [r3, #0]
 8008bbe:	e00b      	b.n	8008bd8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008bc0:	78fb      	ldrb	r3, [r7, #3]
 8008bc2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008bc6:	68f9      	ldr	r1, [r7, #12]
 8008bc8:	4613      	mov	r3, r2
 8008bca:	00db      	lsls	r3, r3, #3
 8008bcc:	4413      	add	r3, r2
 8008bce:	009b      	lsls	r3, r3, #2
 8008bd0:	440b      	add	r3, r1
 8008bd2:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 8008bd6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008bd8:	4618      	mov	r0, r3
 8008bda:	3714      	adds	r7, #20
 8008bdc:	46bd      	mov	sp, r7
 8008bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008be2:	4770      	bx	lr

08008be4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8008be4:	b580      	push	{r7, lr}
 8008be6:	b084      	sub	sp, #16
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
 8008bec:	460b      	mov	r3, r1
 8008bee:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008bfe:	78fa      	ldrb	r2, [r7, #3]
 8008c00:	4611      	mov	r1, r2
 8008c02:	4618      	mov	r0, r3
 8008c04:	f7fa fe24 	bl	8003850 <HAL_PCD_SetAddress>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c0c:	7bfb      	ldrb	r3, [r7, #15]
 8008c0e:	4618      	mov	r0, r3
 8008c10:	f000 f862 	bl	8008cd8 <USBD_Get_USB_Status>
 8008c14:	4603      	mov	r3, r0
 8008c16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008c18:	7bbb      	ldrb	r3, [r7, #14]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}

08008c22 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c22:	b580      	push	{r7, lr}
 8008c24:	b086      	sub	sp, #24
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	60f8      	str	r0, [r7, #12]
 8008c2a:	607a      	str	r2, [r7, #4]
 8008c2c:	603b      	str	r3, [r7, #0]
 8008c2e:	460b      	mov	r3, r1
 8008c30:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c32:	2300      	movs	r3, #0
 8008c34:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c36:	2300      	movs	r3, #0
 8008c38:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008c40:	7af9      	ldrb	r1, [r7, #11]
 8008c42:	683b      	ldr	r3, [r7, #0]
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	f7fa ff25 	bl	8003a94 <HAL_PCD_EP_Transmit>
 8008c4a:	4603      	mov	r3, r0
 8008c4c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c4e:	7dfb      	ldrb	r3, [r7, #23]
 8008c50:	4618      	mov	r0, r3
 8008c52:	f000 f841 	bl	8008cd8 <USBD_Get_USB_Status>
 8008c56:	4603      	mov	r3, r0
 8008c58:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c5a:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	3718      	adds	r7, #24
 8008c60:	46bd      	mov	sp, r7
 8008c62:	bd80      	pop	{r7, pc}

08008c64 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b086      	sub	sp, #24
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	60f8      	str	r0, [r7, #12]
 8008c6c:	607a      	str	r2, [r7, #4]
 8008c6e:	603b      	str	r3, [r7, #0]
 8008c70:	460b      	mov	r3, r1
 8008c72:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008c74:	2300      	movs	r3, #0
 8008c76:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008c78:	2300      	movs	r3, #0
 8008c7a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008c7c:	68fb      	ldr	r3, [r7, #12]
 8008c7e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008c82:	7af9      	ldrb	r1, [r7, #11]
 8008c84:	683b      	ldr	r3, [r7, #0]
 8008c86:	687a      	ldr	r2, [r7, #4]
 8008c88:	f7fa feb9 	bl	80039fe <HAL_PCD_EP_Receive>
 8008c8c:	4603      	mov	r3, r0
 8008c8e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008c90:	7dfb      	ldrb	r3, [r7, #23]
 8008c92:	4618      	mov	r0, r3
 8008c94:	f000 f820 	bl	8008cd8 <USBD_Get_USB_Status>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008c9c:	7dbb      	ldrb	r3, [r7, #22]
}
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	3718      	adds	r7, #24
 8008ca2:	46bd      	mov	sp, r7
 8008ca4:	bd80      	pop	{r7, pc}
	...

08008ca8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 8008cb0:	4b03      	ldr	r3, [pc, #12]	@ (8008cc0 <USBD_static_malloc+0x18>)
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	370c      	adds	r7, #12
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbc:	4770      	bx	lr
 8008cbe:	bf00      	nop
 8008cc0:	20001184 	.word	0x20001184

08008cc4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]

}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b085      	sub	sp, #20
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	4603      	mov	r3, r0
 8008ce0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008ce2:	2300      	movs	r3, #0
 8008ce4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008ce6:	79fb      	ldrb	r3, [r7, #7]
 8008ce8:	2b03      	cmp	r3, #3
 8008cea:	d817      	bhi.n	8008d1c <USBD_Get_USB_Status+0x44>
 8008cec:	a201      	add	r2, pc, #4	@ (adr r2, 8008cf4 <USBD_Get_USB_Status+0x1c>)
 8008cee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cf2:	bf00      	nop
 8008cf4:	08008d05 	.word	0x08008d05
 8008cf8:	08008d0b 	.word	0x08008d0b
 8008cfc:	08008d11 	.word	0x08008d11
 8008d00:	08008d17 	.word	0x08008d17
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008d04:	2300      	movs	r3, #0
 8008d06:	73fb      	strb	r3, [r7, #15]
    break;
 8008d08:	e00b      	b.n	8008d22 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008d0a:	2303      	movs	r3, #3
 8008d0c:	73fb      	strb	r3, [r7, #15]
    break;
 8008d0e:	e008      	b.n	8008d22 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8008d10:	2301      	movs	r3, #1
 8008d12:	73fb      	strb	r3, [r7, #15]
    break;
 8008d14:	e005      	b.n	8008d22 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008d16:	2303      	movs	r3, #3
 8008d18:	73fb      	strb	r3, [r7, #15]
    break;
 8008d1a:	e002      	b.n	8008d22 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	73fb      	strb	r3, [r7, #15]
    break;
 8008d20:	bf00      	nop
  }
  return usb_status;
 8008d22:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d24:	4618      	mov	r0, r3
 8008d26:	3714      	adds	r7, #20
 8008d28:	46bd      	mov	sp, r7
 8008d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d2e:	4770      	bx	lr

08008d30 <siprintf>:
 8008d30:	b40e      	push	{r1, r2, r3}
 8008d32:	b500      	push	{lr}
 8008d34:	b09c      	sub	sp, #112	@ 0x70
 8008d36:	ab1d      	add	r3, sp, #116	@ 0x74
 8008d38:	9002      	str	r0, [sp, #8]
 8008d3a:	9006      	str	r0, [sp, #24]
 8008d3c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8008d40:	4809      	ldr	r0, [pc, #36]	@ (8008d68 <siprintf+0x38>)
 8008d42:	9107      	str	r1, [sp, #28]
 8008d44:	9104      	str	r1, [sp, #16]
 8008d46:	4909      	ldr	r1, [pc, #36]	@ (8008d6c <siprintf+0x3c>)
 8008d48:	f853 2b04 	ldr.w	r2, [r3], #4
 8008d4c:	9105      	str	r1, [sp, #20]
 8008d4e:	6800      	ldr	r0, [r0, #0]
 8008d50:	9301      	str	r3, [sp, #4]
 8008d52:	a902      	add	r1, sp, #8
 8008d54:	f000 f9bc 	bl	80090d0 <_svfiprintf_r>
 8008d58:	9b02      	ldr	r3, [sp, #8]
 8008d5a:	2200      	movs	r2, #0
 8008d5c:	701a      	strb	r2, [r3, #0]
 8008d5e:	b01c      	add	sp, #112	@ 0x70
 8008d60:	f85d eb04 	ldr.w	lr, [sp], #4
 8008d64:	b003      	add	sp, #12
 8008d66:	4770      	bx	lr
 8008d68:	200001d0 	.word	0x200001d0
 8008d6c:	ffff0208 	.word	0xffff0208

08008d70 <memmove>:
 8008d70:	4288      	cmp	r0, r1
 8008d72:	b510      	push	{r4, lr}
 8008d74:	eb01 0402 	add.w	r4, r1, r2
 8008d78:	d902      	bls.n	8008d80 <memmove+0x10>
 8008d7a:	4284      	cmp	r4, r0
 8008d7c:	4623      	mov	r3, r4
 8008d7e:	d807      	bhi.n	8008d90 <memmove+0x20>
 8008d80:	1e43      	subs	r3, r0, #1
 8008d82:	42a1      	cmp	r1, r4
 8008d84:	d008      	beq.n	8008d98 <memmove+0x28>
 8008d86:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008d8a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008d8e:	e7f8      	b.n	8008d82 <memmove+0x12>
 8008d90:	4402      	add	r2, r0
 8008d92:	4601      	mov	r1, r0
 8008d94:	428a      	cmp	r2, r1
 8008d96:	d100      	bne.n	8008d9a <memmove+0x2a>
 8008d98:	bd10      	pop	{r4, pc}
 8008d9a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008d9e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008da2:	e7f7      	b.n	8008d94 <memmove+0x24>

08008da4 <memset>:
 8008da4:	4402      	add	r2, r0
 8008da6:	4603      	mov	r3, r0
 8008da8:	4293      	cmp	r3, r2
 8008daa:	d100      	bne.n	8008dae <memset+0xa>
 8008dac:	4770      	bx	lr
 8008dae:	f803 1b01 	strb.w	r1, [r3], #1
 8008db2:	e7f9      	b.n	8008da8 <memset+0x4>

08008db4 <__errno>:
 8008db4:	4b01      	ldr	r3, [pc, #4]	@ (8008dbc <__errno+0x8>)
 8008db6:	6818      	ldr	r0, [r3, #0]
 8008db8:	4770      	bx	lr
 8008dba:	bf00      	nop
 8008dbc:	200001d0 	.word	0x200001d0

08008dc0 <__libc_init_array>:
 8008dc0:	b570      	push	{r4, r5, r6, lr}
 8008dc2:	4d0d      	ldr	r5, [pc, #52]	@ (8008df8 <__libc_init_array+0x38>)
 8008dc4:	4c0d      	ldr	r4, [pc, #52]	@ (8008dfc <__libc_init_array+0x3c>)
 8008dc6:	1b64      	subs	r4, r4, r5
 8008dc8:	10a4      	asrs	r4, r4, #2
 8008dca:	2600      	movs	r6, #0
 8008dcc:	42a6      	cmp	r6, r4
 8008dce:	d109      	bne.n	8008de4 <__libc_init_array+0x24>
 8008dd0:	4d0b      	ldr	r5, [pc, #44]	@ (8008e00 <__libc_init_array+0x40>)
 8008dd2:	4c0c      	ldr	r4, [pc, #48]	@ (8008e04 <__libc_init_array+0x44>)
 8008dd4:	f000 fc4c 	bl	8009670 <_init>
 8008dd8:	1b64      	subs	r4, r4, r5
 8008dda:	10a4      	asrs	r4, r4, #2
 8008ddc:	2600      	movs	r6, #0
 8008dde:	42a6      	cmp	r6, r4
 8008de0:	d105      	bne.n	8008dee <__libc_init_array+0x2e>
 8008de2:	bd70      	pop	{r4, r5, r6, pc}
 8008de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8008de8:	4798      	blx	r3
 8008dea:	3601      	adds	r6, #1
 8008dec:	e7ee      	b.n	8008dcc <__libc_init_array+0xc>
 8008dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8008df2:	4798      	blx	r3
 8008df4:	3601      	adds	r6, #1
 8008df6:	e7f2      	b.n	8008dde <__libc_init_array+0x1e>
 8008df8:	08009d78 	.word	0x08009d78
 8008dfc:	08009d78 	.word	0x08009d78
 8008e00:	08009d78 	.word	0x08009d78
 8008e04:	08009d7c 	.word	0x08009d7c

08008e08 <__retarget_lock_acquire_recursive>:
 8008e08:	4770      	bx	lr

08008e0a <__retarget_lock_release_recursive>:
 8008e0a:	4770      	bx	lr

08008e0c <memcpy>:
 8008e0c:	440a      	add	r2, r1
 8008e0e:	4291      	cmp	r1, r2
 8008e10:	f100 33ff 	add.w	r3, r0, #4294967295
 8008e14:	d100      	bne.n	8008e18 <memcpy+0xc>
 8008e16:	4770      	bx	lr
 8008e18:	b510      	push	{r4, lr}
 8008e1a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008e1e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008e22:	4291      	cmp	r1, r2
 8008e24:	d1f9      	bne.n	8008e1a <memcpy+0xe>
 8008e26:	bd10      	pop	{r4, pc}

08008e28 <_free_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	4605      	mov	r5, r0
 8008e2c:	2900      	cmp	r1, #0
 8008e2e:	d041      	beq.n	8008eb4 <_free_r+0x8c>
 8008e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e34:	1f0c      	subs	r4, r1, #4
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	bfb8      	it	lt
 8008e3a:	18e4      	addlt	r4, r4, r3
 8008e3c:	f000 f8e0 	bl	8009000 <__malloc_lock>
 8008e40:	4a1d      	ldr	r2, [pc, #116]	@ (8008eb8 <_free_r+0x90>)
 8008e42:	6813      	ldr	r3, [r2, #0]
 8008e44:	b933      	cbnz	r3, 8008e54 <_free_r+0x2c>
 8008e46:	6063      	str	r3, [r4, #4]
 8008e48:	6014      	str	r4, [r2, #0]
 8008e4a:	4628      	mov	r0, r5
 8008e4c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e50:	f000 b8dc 	b.w	800900c <__malloc_unlock>
 8008e54:	42a3      	cmp	r3, r4
 8008e56:	d908      	bls.n	8008e6a <_free_r+0x42>
 8008e58:	6820      	ldr	r0, [r4, #0]
 8008e5a:	1821      	adds	r1, r4, r0
 8008e5c:	428b      	cmp	r3, r1
 8008e5e:	bf01      	itttt	eq
 8008e60:	6819      	ldreq	r1, [r3, #0]
 8008e62:	685b      	ldreq	r3, [r3, #4]
 8008e64:	1809      	addeq	r1, r1, r0
 8008e66:	6021      	streq	r1, [r4, #0]
 8008e68:	e7ed      	b.n	8008e46 <_free_r+0x1e>
 8008e6a:	461a      	mov	r2, r3
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	b10b      	cbz	r3, 8008e74 <_free_r+0x4c>
 8008e70:	42a3      	cmp	r3, r4
 8008e72:	d9fa      	bls.n	8008e6a <_free_r+0x42>
 8008e74:	6811      	ldr	r1, [r2, #0]
 8008e76:	1850      	adds	r0, r2, r1
 8008e78:	42a0      	cmp	r0, r4
 8008e7a:	d10b      	bne.n	8008e94 <_free_r+0x6c>
 8008e7c:	6820      	ldr	r0, [r4, #0]
 8008e7e:	4401      	add	r1, r0
 8008e80:	1850      	adds	r0, r2, r1
 8008e82:	4283      	cmp	r3, r0
 8008e84:	6011      	str	r1, [r2, #0]
 8008e86:	d1e0      	bne.n	8008e4a <_free_r+0x22>
 8008e88:	6818      	ldr	r0, [r3, #0]
 8008e8a:	685b      	ldr	r3, [r3, #4]
 8008e8c:	6053      	str	r3, [r2, #4]
 8008e8e:	4408      	add	r0, r1
 8008e90:	6010      	str	r0, [r2, #0]
 8008e92:	e7da      	b.n	8008e4a <_free_r+0x22>
 8008e94:	d902      	bls.n	8008e9c <_free_r+0x74>
 8008e96:	230c      	movs	r3, #12
 8008e98:	602b      	str	r3, [r5, #0]
 8008e9a:	e7d6      	b.n	8008e4a <_free_r+0x22>
 8008e9c:	6820      	ldr	r0, [r4, #0]
 8008e9e:	1821      	adds	r1, r4, r0
 8008ea0:	428b      	cmp	r3, r1
 8008ea2:	bf04      	itt	eq
 8008ea4:	6819      	ldreq	r1, [r3, #0]
 8008ea6:	685b      	ldreq	r3, [r3, #4]
 8008ea8:	6063      	str	r3, [r4, #4]
 8008eaa:	bf04      	itt	eq
 8008eac:	1809      	addeq	r1, r1, r0
 8008eae:	6021      	streq	r1, [r4, #0]
 8008eb0:	6054      	str	r4, [r2, #4]
 8008eb2:	e7ca      	b.n	8008e4a <_free_r+0x22>
 8008eb4:	bd38      	pop	{r3, r4, r5, pc}
 8008eb6:	bf00      	nop
 8008eb8:	20001310 	.word	0x20001310

08008ebc <sbrk_aligned>:
 8008ebc:	b570      	push	{r4, r5, r6, lr}
 8008ebe:	4e0f      	ldr	r6, [pc, #60]	@ (8008efc <sbrk_aligned+0x40>)
 8008ec0:	460c      	mov	r4, r1
 8008ec2:	6831      	ldr	r1, [r6, #0]
 8008ec4:	4605      	mov	r5, r0
 8008ec6:	b911      	cbnz	r1, 8008ece <sbrk_aligned+0x12>
 8008ec8:	f000 fb8c 	bl	80095e4 <_sbrk_r>
 8008ecc:	6030      	str	r0, [r6, #0]
 8008ece:	4621      	mov	r1, r4
 8008ed0:	4628      	mov	r0, r5
 8008ed2:	f000 fb87 	bl	80095e4 <_sbrk_r>
 8008ed6:	1c43      	adds	r3, r0, #1
 8008ed8:	d103      	bne.n	8008ee2 <sbrk_aligned+0x26>
 8008eda:	f04f 34ff 	mov.w	r4, #4294967295
 8008ede:	4620      	mov	r0, r4
 8008ee0:	bd70      	pop	{r4, r5, r6, pc}
 8008ee2:	1cc4      	adds	r4, r0, #3
 8008ee4:	f024 0403 	bic.w	r4, r4, #3
 8008ee8:	42a0      	cmp	r0, r4
 8008eea:	d0f8      	beq.n	8008ede <sbrk_aligned+0x22>
 8008eec:	1a21      	subs	r1, r4, r0
 8008eee:	4628      	mov	r0, r5
 8008ef0:	f000 fb78 	bl	80095e4 <_sbrk_r>
 8008ef4:	3001      	adds	r0, #1
 8008ef6:	d1f2      	bne.n	8008ede <sbrk_aligned+0x22>
 8008ef8:	e7ef      	b.n	8008eda <sbrk_aligned+0x1e>
 8008efa:	bf00      	nop
 8008efc:	2000130c 	.word	0x2000130c

08008f00 <_malloc_r>:
 8008f00:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f04:	1ccd      	adds	r5, r1, #3
 8008f06:	f025 0503 	bic.w	r5, r5, #3
 8008f0a:	3508      	adds	r5, #8
 8008f0c:	2d0c      	cmp	r5, #12
 8008f0e:	bf38      	it	cc
 8008f10:	250c      	movcc	r5, #12
 8008f12:	2d00      	cmp	r5, #0
 8008f14:	4606      	mov	r6, r0
 8008f16:	db01      	blt.n	8008f1c <_malloc_r+0x1c>
 8008f18:	42a9      	cmp	r1, r5
 8008f1a:	d904      	bls.n	8008f26 <_malloc_r+0x26>
 8008f1c:	230c      	movs	r3, #12
 8008f1e:	6033      	str	r3, [r6, #0]
 8008f20:	2000      	movs	r0, #0
 8008f22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f26:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008ffc <_malloc_r+0xfc>
 8008f2a:	f000 f869 	bl	8009000 <__malloc_lock>
 8008f2e:	f8d8 3000 	ldr.w	r3, [r8]
 8008f32:	461c      	mov	r4, r3
 8008f34:	bb44      	cbnz	r4, 8008f88 <_malloc_r+0x88>
 8008f36:	4629      	mov	r1, r5
 8008f38:	4630      	mov	r0, r6
 8008f3a:	f7ff ffbf 	bl	8008ebc <sbrk_aligned>
 8008f3e:	1c43      	adds	r3, r0, #1
 8008f40:	4604      	mov	r4, r0
 8008f42:	d158      	bne.n	8008ff6 <_malloc_r+0xf6>
 8008f44:	f8d8 4000 	ldr.w	r4, [r8]
 8008f48:	4627      	mov	r7, r4
 8008f4a:	2f00      	cmp	r7, #0
 8008f4c:	d143      	bne.n	8008fd6 <_malloc_r+0xd6>
 8008f4e:	2c00      	cmp	r4, #0
 8008f50:	d04b      	beq.n	8008fea <_malloc_r+0xea>
 8008f52:	6823      	ldr	r3, [r4, #0]
 8008f54:	4639      	mov	r1, r7
 8008f56:	4630      	mov	r0, r6
 8008f58:	eb04 0903 	add.w	r9, r4, r3
 8008f5c:	f000 fb42 	bl	80095e4 <_sbrk_r>
 8008f60:	4581      	cmp	r9, r0
 8008f62:	d142      	bne.n	8008fea <_malloc_r+0xea>
 8008f64:	6821      	ldr	r1, [r4, #0]
 8008f66:	1a6d      	subs	r5, r5, r1
 8008f68:	4629      	mov	r1, r5
 8008f6a:	4630      	mov	r0, r6
 8008f6c:	f7ff ffa6 	bl	8008ebc <sbrk_aligned>
 8008f70:	3001      	adds	r0, #1
 8008f72:	d03a      	beq.n	8008fea <_malloc_r+0xea>
 8008f74:	6823      	ldr	r3, [r4, #0]
 8008f76:	442b      	add	r3, r5
 8008f78:	6023      	str	r3, [r4, #0]
 8008f7a:	f8d8 3000 	ldr.w	r3, [r8]
 8008f7e:	685a      	ldr	r2, [r3, #4]
 8008f80:	bb62      	cbnz	r2, 8008fdc <_malloc_r+0xdc>
 8008f82:	f8c8 7000 	str.w	r7, [r8]
 8008f86:	e00f      	b.n	8008fa8 <_malloc_r+0xa8>
 8008f88:	6822      	ldr	r2, [r4, #0]
 8008f8a:	1b52      	subs	r2, r2, r5
 8008f8c:	d420      	bmi.n	8008fd0 <_malloc_r+0xd0>
 8008f8e:	2a0b      	cmp	r2, #11
 8008f90:	d917      	bls.n	8008fc2 <_malloc_r+0xc2>
 8008f92:	1961      	adds	r1, r4, r5
 8008f94:	42a3      	cmp	r3, r4
 8008f96:	6025      	str	r5, [r4, #0]
 8008f98:	bf18      	it	ne
 8008f9a:	6059      	strne	r1, [r3, #4]
 8008f9c:	6863      	ldr	r3, [r4, #4]
 8008f9e:	bf08      	it	eq
 8008fa0:	f8c8 1000 	streq.w	r1, [r8]
 8008fa4:	5162      	str	r2, [r4, r5]
 8008fa6:	604b      	str	r3, [r1, #4]
 8008fa8:	4630      	mov	r0, r6
 8008faa:	f000 f82f 	bl	800900c <__malloc_unlock>
 8008fae:	f104 000b 	add.w	r0, r4, #11
 8008fb2:	1d23      	adds	r3, r4, #4
 8008fb4:	f020 0007 	bic.w	r0, r0, #7
 8008fb8:	1ac2      	subs	r2, r0, r3
 8008fba:	bf1c      	itt	ne
 8008fbc:	1a1b      	subne	r3, r3, r0
 8008fbe:	50a3      	strne	r3, [r4, r2]
 8008fc0:	e7af      	b.n	8008f22 <_malloc_r+0x22>
 8008fc2:	6862      	ldr	r2, [r4, #4]
 8008fc4:	42a3      	cmp	r3, r4
 8008fc6:	bf0c      	ite	eq
 8008fc8:	f8c8 2000 	streq.w	r2, [r8]
 8008fcc:	605a      	strne	r2, [r3, #4]
 8008fce:	e7eb      	b.n	8008fa8 <_malloc_r+0xa8>
 8008fd0:	4623      	mov	r3, r4
 8008fd2:	6864      	ldr	r4, [r4, #4]
 8008fd4:	e7ae      	b.n	8008f34 <_malloc_r+0x34>
 8008fd6:	463c      	mov	r4, r7
 8008fd8:	687f      	ldr	r7, [r7, #4]
 8008fda:	e7b6      	b.n	8008f4a <_malloc_r+0x4a>
 8008fdc:	461a      	mov	r2, r3
 8008fde:	685b      	ldr	r3, [r3, #4]
 8008fe0:	42a3      	cmp	r3, r4
 8008fe2:	d1fb      	bne.n	8008fdc <_malloc_r+0xdc>
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	6053      	str	r3, [r2, #4]
 8008fe8:	e7de      	b.n	8008fa8 <_malloc_r+0xa8>
 8008fea:	230c      	movs	r3, #12
 8008fec:	6033      	str	r3, [r6, #0]
 8008fee:	4630      	mov	r0, r6
 8008ff0:	f000 f80c 	bl	800900c <__malloc_unlock>
 8008ff4:	e794      	b.n	8008f20 <_malloc_r+0x20>
 8008ff6:	6005      	str	r5, [r0, #0]
 8008ff8:	e7d6      	b.n	8008fa8 <_malloc_r+0xa8>
 8008ffa:	bf00      	nop
 8008ffc:	20001310 	.word	0x20001310

08009000 <__malloc_lock>:
 8009000:	4801      	ldr	r0, [pc, #4]	@ (8009008 <__malloc_lock+0x8>)
 8009002:	f7ff bf01 	b.w	8008e08 <__retarget_lock_acquire_recursive>
 8009006:	bf00      	nop
 8009008:	20001308 	.word	0x20001308

0800900c <__malloc_unlock>:
 800900c:	4801      	ldr	r0, [pc, #4]	@ (8009014 <__malloc_unlock+0x8>)
 800900e:	f7ff befc 	b.w	8008e0a <__retarget_lock_release_recursive>
 8009012:	bf00      	nop
 8009014:	20001308 	.word	0x20001308

08009018 <__ssputs_r>:
 8009018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800901c:	688e      	ldr	r6, [r1, #8]
 800901e:	461f      	mov	r7, r3
 8009020:	42be      	cmp	r6, r7
 8009022:	680b      	ldr	r3, [r1, #0]
 8009024:	4682      	mov	sl, r0
 8009026:	460c      	mov	r4, r1
 8009028:	4690      	mov	r8, r2
 800902a:	d82d      	bhi.n	8009088 <__ssputs_r+0x70>
 800902c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009030:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009034:	d026      	beq.n	8009084 <__ssputs_r+0x6c>
 8009036:	6965      	ldr	r5, [r4, #20]
 8009038:	6909      	ldr	r1, [r1, #16]
 800903a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800903e:	eba3 0901 	sub.w	r9, r3, r1
 8009042:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009046:	1c7b      	adds	r3, r7, #1
 8009048:	444b      	add	r3, r9
 800904a:	106d      	asrs	r5, r5, #1
 800904c:	429d      	cmp	r5, r3
 800904e:	bf38      	it	cc
 8009050:	461d      	movcc	r5, r3
 8009052:	0553      	lsls	r3, r2, #21
 8009054:	d527      	bpl.n	80090a6 <__ssputs_r+0x8e>
 8009056:	4629      	mov	r1, r5
 8009058:	f7ff ff52 	bl	8008f00 <_malloc_r>
 800905c:	4606      	mov	r6, r0
 800905e:	b360      	cbz	r0, 80090ba <__ssputs_r+0xa2>
 8009060:	6921      	ldr	r1, [r4, #16]
 8009062:	464a      	mov	r2, r9
 8009064:	f7ff fed2 	bl	8008e0c <memcpy>
 8009068:	89a3      	ldrh	r3, [r4, #12]
 800906a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800906e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009072:	81a3      	strh	r3, [r4, #12]
 8009074:	6126      	str	r6, [r4, #16]
 8009076:	6165      	str	r5, [r4, #20]
 8009078:	444e      	add	r6, r9
 800907a:	eba5 0509 	sub.w	r5, r5, r9
 800907e:	6026      	str	r6, [r4, #0]
 8009080:	60a5      	str	r5, [r4, #8]
 8009082:	463e      	mov	r6, r7
 8009084:	42be      	cmp	r6, r7
 8009086:	d900      	bls.n	800908a <__ssputs_r+0x72>
 8009088:	463e      	mov	r6, r7
 800908a:	6820      	ldr	r0, [r4, #0]
 800908c:	4632      	mov	r2, r6
 800908e:	4641      	mov	r1, r8
 8009090:	f7ff fe6e 	bl	8008d70 <memmove>
 8009094:	68a3      	ldr	r3, [r4, #8]
 8009096:	1b9b      	subs	r3, r3, r6
 8009098:	60a3      	str	r3, [r4, #8]
 800909a:	6823      	ldr	r3, [r4, #0]
 800909c:	4433      	add	r3, r6
 800909e:	6023      	str	r3, [r4, #0]
 80090a0:	2000      	movs	r0, #0
 80090a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090a6:	462a      	mov	r2, r5
 80090a8:	f000 faac 	bl	8009604 <_realloc_r>
 80090ac:	4606      	mov	r6, r0
 80090ae:	2800      	cmp	r0, #0
 80090b0:	d1e0      	bne.n	8009074 <__ssputs_r+0x5c>
 80090b2:	6921      	ldr	r1, [r4, #16]
 80090b4:	4650      	mov	r0, sl
 80090b6:	f7ff feb7 	bl	8008e28 <_free_r>
 80090ba:	230c      	movs	r3, #12
 80090bc:	f8ca 3000 	str.w	r3, [sl]
 80090c0:	89a3      	ldrh	r3, [r4, #12]
 80090c2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80090c6:	81a3      	strh	r3, [r4, #12]
 80090c8:	f04f 30ff 	mov.w	r0, #4294967295
 80090cc:	e7e9      	b.n	80090a2 <__ssputs_r+0x8a>
	...

080090d0 <_svfiprintf_r>:
 80090d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090d4:	4698      	mov	r8, r3
 80090d6:	898b      	ldrh	r3, [r1, #12]
 80090d8:	061b      	lsls	r3, r3, #24
 80090da:	b09d      	sub	sp, #116	@ 0x74
 80090dc:	4607      	mov	r7, r0
 80090de:	460d      	mov	r5, r1
 80090e0:	4614      	mov	r4, r2
 80090e2:	d510      	bpl.n	8009106 <_svfiprintf_r+0x36>
 80090e4:	690b      	ldr	r3, [r1, #16]
 80090e6:	b973      	cbnz	r3, 8009106 <_svfiprintf_r+0x36>
 80090e8:	2140      	movs	r1, #64	@ 0x40
 80090ea:	f7ff ff09 	bl	8008f00 <_malloc_r>
 80090ee:	6028      	str	r0, [r5, #0]
 80090f0:	6128      	str	r0, [r5, #16]
 80090f2:	b930      	cbnz	r0, 8009102 <_svfiprintf_r+0x32>
 80090f4:	230c      	movs	r3, #12
 80090f6:	603b      	str	r3, [r7, #0]
 80090f8:	f04f 30ff 	mov.w	r0, #4294967295
 80090fc:	b01d      	add	sp, #116	@ 0x74
 80090fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009102:	2340      	movs	r3, #64	@ 0x40
 8009104:	616b      	str	r3, [r5, #20]
 8009106:	2300      	movs	r3, #0
 8009108:	9309      	str	r3, [sp, #36]	@ 0x24
 800910a:	2320      	movs	r3, #32
 800910c:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009110:	f8cd 800c 	str.w	r8, [sp, #12]
 8009114:	2330      	movs	r3, #48	@ 0x30
 8009116:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80092b4 <_svfiprintf_r+0x1e4>
 800911a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800911e:	f04f 0901 	mov.w	r9, #1
 8009122:	4623      	mov	r3, r4
 8009124:	469a      	mov	sl, r3
 8009126:	f813 2b01 	ldrb.w	r2, [r3], #1
 800912a:	b10a      	cbz	r2, 8009130 <_svfiprintf_r+0x60>
 800912c:	2a25      	cmp	r2, #37	@ 0x25
 800912e:	d1f9      	bne.n	8009124 <_svfiprintf_r+0x54>
 8009130:	ebba 0b04 	subs.w	fp, sl, r4
 8009134:	d00b      	beq.n	800914e <_svfiprintf_r+0x7e>
 8009136:	465b      	mov	r3, fp
 8009138:	4622      	mov	r2, r4
 800913a:	4629      	mov	r1, r5
 800913c:	4638      	mov	r0, r7
 800913e:	f7ff ff6b 	bl	8009018 <__ssputs_r>
 8009142:	3001      	adds	r0, #1
 8009144:	f000 80a7 	beq.w	8009296 <_svfiprintf_r+0x1c6>
 8009148:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800914a:	445a      	add	r2, fp
 800914c:	9209      	str	r2, [sp, #36]	@ 0x24
 800914e:	f89a 3000 	ldrb.w	r3, [sl]
 8009152:	2b00      	cmp	r3, #0
 8009154:	f000 809f 	beq.w	8009296 <_svfiprintf_r+0x1c6>
 8009158:	2300      	movs	r3, #0
 800915a:	f04f 32ff 	mov.w	r2, #4294967295
 800915e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009162:	f10a 0a01 	add.w	sl, sl, #1
 8009166:	9304      	str	r3, [sp, #16]
 8009168:	9307      	str	r3, [sp, #28]
 800916a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800916e:	931a      	str	r3, [sp, #104]	@ 0x68
 8009170:	4654      	mov	r4, sl
 8009172:	2205      	movs	r2, #5
 8009174:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009178:	484e      	ldr	r0, [pc, #312]	@ (80092b4 <_svfiprintf_r+0x1e4>)
 800917a:	f7f7 f831 	bl	80001e0 <memchr>
 800917e:	9a04      	ldr	r2, [sp, #16]
 8009180:	b9d8      	cbnz	r0, 80091ba <_svfiprintf_r+0xea>
 8009182:	06d0      	lsls	r0, r2, #27
 8009184:	bf44      	itt	mi
 8009186:	2320      	movmi	r3, #32
 8009188:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800918c:	0711      	lsls	r1, r2, #28
 800918e:	bf44      	itt	mi
 8009190:	232b      	movmi	r3, #43	@ 0x2b
 8009192:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009196:	f89a 3000 	ldrb.w	r3, [sl]
 800919a:	2b2a      	cmp	r3, #42	@ 0x2a
 800919c:	d015      	beq.n	80091ca <_svfiprintf_r+0xfa>
 800919e:	9a07      	ldr	r2, [sp, #28]
 80091a0:	4654      	mov	r4, sl
 80091a2:	2000      	movs	r0, #0
 80091a4:	f04f 0c0a 	mov.w	ip, #10
 80091a8:	4621      	mov	r1, r4
 80091aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091ae:	3b30      	subs	r3, #48	@ 0x30
 80091b0:	2b09      	cmp	r3, #9
 80091b2:	d94b      	bls.n	800924c <_svfiprintf_r+0x17c>
 80091b4:	b1b0      	cbz	r0, 80091e4 <_svfiprintf_r+0x114>
 80091b6:	9207      	str	r2, [sp, #28]
 80091b8:	e014      	b.n	80091e4 <_svfiprintf_r+0x114>
 80091ba:	eba0 0308 	sub.w	r3, r0, r8
 80091be:	fa09 f303 	lsl.w	r3, r9, r3
 80091c2:	4313      	orrs	r3, r2
 80091c4:	9304      	str	r3, [sp, #16]
 80091c6:	46a2      	mov	sl, r4
 80091c8:	e7d2      	b.n	8009170 <_svfiprintf_r+0xa0>
 80091ca:	9b03      	ldr	r3, [sp, #12]
 80091cc:	1d19      	adds	r1, r3, #4
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	9103      	str	r1, [sp, #12]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	bfbb      	ittet	lt
 80091d6:	425b      	neglt	r3, r3
 80091d8:	f042 0202 	orrlt.w	r2, r2, #2
 80091dc:	9307      	strge	r3, [sp, #28]
 80091de:	9307      	strlt	r3, [sp, #28]
 80091e0:	bfb8      	it	lt
 80091e2:	9204      	strlt	r2, [sp, #16]
 80091e4:	7823      	ldrb	r3, [r4, #0]
 80091e6:	2b2e      	cmp	r3, #46	@ 0x2e
 80091e8:	d10a      	bne.n	8009200 <_svfiprintf_r+0x130>
 80091ea:	7863      	ldrb	r3, [r4, #1]
 80091ec:	2b2a      	cmp	r3, #42	@ 0x2a
 80091ee:	d132      	bne.n	8009256 <_svfiprintf_r+0x186>
 80091f0:	9b03      	ldr	r3, [sp, #12]
 80091f2:	1d1a      	adds	r2, r3, #4
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	9203      	str	r2, [sp, #12]
 80091f8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80091fc:	3402      	adds	r4, #2
 80091fe:	9305      	str	r3, [sp, #20]
 8009200:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80092c4 <_svfiprintf_r+0x1f4>
 8009204:	7821      	ldrb	r1, [r4, #0]
 8009206:	2203      	movs	r2, #3
 8009208:	4650      	mov	r0, sl
 800920a:	f7f6 ffe9 	bl	80001e0 <memchr>
 800920e:	b138      	cbz	r0, 8009220 <_svfiprintf_r+0x150>
 8009210:	9b04      	ldr	r3, [sp, #16]
 8009212:	eba0 000a 	sub.w	r0, r0, sl
 8009216:	2240      	movs	r2, #64	@ 0x40
 8009218:	4082      	lsls	r2, r0
 800921a:	4313      	orrs	r3, r2
 800921c:	3401      	adds	r4, #1
 800921e:	9304      	str	r3, [sp, #16]
 8009220:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009224:	4824      	ldr	r0, [pc, #144]	@ (80092b8 <_svfiprintf_r+0x1e8>)
 8009226:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800922a:	2206      	movs	r2, #6
 800922c:	f7f6 ffd8 	bl	80001e0 <memchr>
 8009230:	2800      	cmp	r0, #0
 8009232:	d036      	beq.n	80092a2 <_svfiprintf_r+0x1d2>
 8009234:	4b21      	ldr	r3, [pc, #132]	@ (80092bc <_svfiprintf_r+0x1ec>)
 8009236:	bb1b      	cbnz	r3, 8009280 <_svfiprintf_r+0x1b0>
 8009238:	9b03      	ldr	r3, [sp, #12]
 800923a:	3307      	adds	r3, #7
 800923c:	f023 0307 	bic.w	r3, r3, #7
 8009240:	3308      	adds	r3, #8
 8009242:	9303      	str	r3, [sp, #12]
 8009244:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009246:	4433      	add	r3, r6
 8009248:	9309      	str	r3, [sp, #36]	@ 0x24
 800924a:	e76a      	b.n	8009122 <_svfiprintf_r+0x52>
 800924c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009250:	460c      	mov	r4, r1
 8009252:	2001      	movs	r0, #1
 8009254:	e7a8      	b.n	80091a8 <_svfiprintf_r+0xd8>
 8009256:	2300      	movs	r3, #0
 8009258:	3401      	adds	r4, #1
 800925a:	9305      	str	r3, [sp, #20]
 800925c:	4619      	mov	r1, r3
 800925e:	f04f 0c0a 	mov.w	ip, #10
 8009262:	4620      	mov	r0, r4
 8009264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009268:	3a30      	subs	r2, #48	@ 0x30
 800926a:	2a09      	cmp	r2, #9
 800926c:	d903      	bls.n	8009276 <_svfiprintf_r+0x1a6>
 800926e:	2b00      	cmp	r3, #0
 8009270:	d0c6      	beq.n	8009200 <_svfiprintf_r+0x130>
 8009272:	9105      	str	r1, [sp, #20]
 8009274:	e7c4      	b.n	8009200 <_svfiprintf_r+0x130>
 8009276:	fb0c 2101 	mla	r1, ip, r1, r2
 800927a:	4604      	mov	r4, r0
 800927c:	2301      	movs	r3, #1
 800927e:	e7f0      	b.n	8009262 <_svfiprintf_r+0x192>
 8009280:	ab03      	add	r3, sp, #12
 8009282:	9300      	str	r3, [sp, #0]
 8009284:	462a      	mov	r2, r5
 8009286:	4b0e      	ldr	r3, [pc, #56]	@ (80092c0 <_svfiprintf_r+0x1f0>)
 8009288:	a904      	add	r1, sp, #16
 800928a:	4638      	mov	r0, r7
 800928c:	f3af 8000 	nop.w
 8009290:	1c42      	adds	r2, r0, #1
 8009292:	4606      	mov	r6, r0
 8009294:	d1d6      	bne.n	8009244 <_svfiprintf_r+0x174>
 8009296:	89ab      	ldrh	r3, [r5, #12]
 8009298:	065b      	lsls	r3, r3, #25
 800929a:	f53f af2d 	bmi.w	80090f8 <_svfiprintf_r+0x28>
 800929e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80092a0:	e72c      	b.n	80090fc <_svfiprintf_r+0x2c>
 80092a2:	ab03      	add	r3, sp, #12
 80092a4:	9300      	str	r3, [sp, #0]
 80092a6:	462a      	mov	r2, r5
 80092a8:	4b05      	ldr	r3, [pc, #20]	@ (80092c0 <_svfiprintf_r+0x1f0>)
 80092aa:	a904      	add	r1, sp, #16
 80092ac:	4638      	mov	r0, r7
 80092ae:	f000 f879 	bl	80093a4 <_printf_i>
 80092b2:	e7ed      	b.n	8009290 <_svfiprintf_r+0x1c0>
 80092b4:	08009d3c 	.word	0x08009d3c
 80092b8:	08009d46 	.word	0x08009d46
 80092bc:	00000000 	.word	0x00000000
 80092c0:	08009019 	.word	0x08009019
 80092c4:	08009d42 	.word	0x08009d42

080092c8 <_printf_common>:
 80092c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80092cc:	4616      	mov	r6, r2
 80092ce:	4698      	mov	r8, r3
 80092d0:	688a      	ldr	r2, [r1, #8]
 80092d2:	690b      	ldr	r3, [r1, #16]
 80092d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80092d8:	4293      	cmp	r3, r2
 80092da:	bfb8      	it	lt
 80092dc:	4613      	movlt	r3, r2
 80092de:	6033      	str	r3, [r6, #0]
 80092e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80092e4:	4607      	mov	r7, r0
 80092e6:	460c      	mov	r4, r1
 80092e8:	b10a      	cbz	r2, 80092ee <_printf_common+0x26>
 80092ea:	3301      	adds	r3, #1
 80092ec:	6033      	str	r3, [r6, #0]
 80092ee:	6823      	ldr	r3, [r4, #0]
 80092f0:	0699      	lsls	r1, r3, #26
 80092f2:	bf42      	ittt	mi
 80092f4:	6833      	ldrmi	r3, [r6, #0]
 80092f6:	3302      	addmi	r3, #2
 80092f8:	6033      	strmi	r3, [r6, #0]
 80092fa:	6825      	ldr	r5, [r4, #0]
 80092fc:	f015 0506 	ands.w	r5, r5, #6
 8009300:	d106      	bne.n	8009310 <_printf_common+0x48>
 8009302:	f104 0a19 	add.w	sl, r4, #25
 8009306:	68e3      	ldr	r3, [r4, #12]
 8009308:	6832      	ldr	r2, [r6, #0]
 800930a:	1a9b      	subs	r3, r3, r2
 800930c:	42ab      	cmp	r3, r5
 800930e:	dc26      	bgt.n	800935e <_printf_common+0x96>
 8009310:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009314:	6822      	ldr	r2, [r4, #0]
 8009316:	3b00      	subs	r3, #0
 8009318:	bf18      	it	ne
 800931a:	2301      	movne	r3, #1
 800931c:	0692      	lsls	r2, r2, #26
 800931e:	d42b      	bmi.n	8009378 <_printf_common+0xb0>
 8009320:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009324:	4641      	mov	r1, r8
 8009326:	4638      	mov	r0, r7
 8009328:	47c8      	blx	r9
 800932a:	3001      	adds	r0, #1
 800932c:	d01e      	beq.n	800936c <_printf_common+0xa4>
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	6922      	ldr	r2, [r4, #16]
 8009332:	f003 0306 	and.w	r3, r3, #6
 8009336:	2b04      	cmp	r3, #4
 8009338:	bf02      	ittt	eq
 800933a:	68e5      	ldreq	r5, [r4, #12]
 800933c:	6833      	ldreq	r3, [r6, #0]
 800933e:	1aed      	subeq	r5, r5, r3
 8009340:	68a3      	ldr	r3, [r4, #8]
 8009342:	bf0c      	ite	eq
 8009344:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009348:	2500      	movne	r5, #0
 800934a:	4293      	cmp	r3, r2
 800934c:	bfc4      	itt	gt
 800934e:	1a9b      	subgt	r3, r3, r2
 8009350:	18ed      	addgt	r5, r5, r3
 8009352:	2600      	movs	r6, #0
 8009354:	341a      	adds	r4, #26
 8009356:	42b5      	cmp	r5, r6
 8009358:	d11a      	bne.n	8009390 <_printf_common+0xc8>
 800935a:	2000      	movs	r0, #0
 800935c:	e008      	b.n	8009370 <_printf_common+0xa8>
 800935e:	2301      	movs	r3, #1
 8009360:	4652      	mov	r2, sl
 8009362:	4641      	mov	r1, r8
 8009364:	4638      	mov	r0, r7
 8009366:	47c8      	blx	r9
 8009368:	3001      	adds	r0, #1
 800936a:	d103      	bne.n	8009374 <_printf_common+0xac>
 800936c:	f04f 30ff 	mov.w	r0, #4294967295
 8009370:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009374:	3501      	adds	r5, #1
 8009376:	e7c6      	b.n	8009306 <_printf_common+0x3e>
 8009378:	18e1      	adds	r1, r4, r3
 800937a:	1c5a      	adds	r2, r3, #1
 800937c:	2030      	movs	r0, #48	@ 0x30
 800937e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009382:	4422      	add	r2, r4
 8009384:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009388:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800938c:	3302      	adds	r3, #2
 800938e:	e7c7      	b.n	8009320 <_printf_common+0x58>
 8009390:	2301      	movs	r3, #1
 8009392:	4622      	mov	r2, r4
 8009394:	4641      	mov	r1, r8
 8009396:	4638      	mov	r0, r7
 8009398:	47c8      	blx	r9
 800939a:	3001      	adds	r0, #1
 800939c:	d0e6      	beq.n	800936c <_printf_common+0xa4>
 800939e:	3601      	adds	r6, #1
 80093a0:	e7d9      	b.n	8009356 <_printf_common+0x8e>
	...

080093a4 <_printf_i>:
 80093a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093a8:	7e0f      	ldrb	r7, [r1, #24]
 80093aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80093ac:	2f78      	cmp	r7, #120	@ 0x78
 80093ae:	4691      	mov	r9, r2
 80093b0:	4680      	mov	r8, r0
 80093b2:	460c      	mov	r4, r1
 80093b4:	469a      	mov	sl, r3
 80093b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80093ba:	d807      	bhi.n	80093cc <_printf_i+0x28>
 80093bc:	2f62      	cmp	r7, #98	@ 0x62
 80093be:	d80a      	bhi.n	80093d6 <_printf_i+0x32>
 80093c0:	2f00      	cmp	r7, #0
 80093c2:	f000 80d2 	beq.w	800956a <_printf_i+0x1c6>
 80093c6:	2f58      	cmp	r7, #88	@ 0x58
 80093c8:	f000 80b9 	beq.w	800953e <_printf_i+0x19a>
 80093cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80093d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80093d4:	e03a      	b.n	800944c <_printf_i+0xa8>
 80093d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80093da:	2b15      	cmp	r3, #21
 80093dc:	d8f6      	bhi.n	80093cc <_printf_i+0x28>
 80093de:	a101      	add	r1, pc, #4	@ (adr r1, 80093e4 <_printf_i+0x40>)
 80093e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80093e4:	0800943d 	.word	0x0800943d
 80093e8:	08009451 	.word	0x08009451
 80093ec:	080093cd 	.word	0x080093cd
 80093f0:	080093cd 	.word	0x080093cd
 80093f4:	080093cd 	.word	0x080093cd
 80093f8:	080093cd 	.word	0x080093cd
 80093fc:	08009451 	.word	0x08009451
 8009400:	080093cd 	.word	0x080093cd
 8009404:	080093cd 	.word	0x080093cd
 8009408:	080093cd 	.word	0x080093cd
 800940c:	080093cd 	.word	0x080093cd
 8009410:	08009551 	.word	0x08009551
 8009414:	0800947b 	.word	0x0800947b
 8009418:	0800950b 	.word	0x0800950b
 800941c:	080093cd 	.word	0x080093cd
 8009420:	080093cd 	.word	0x080093cd
 8009424:	08009573 	.word	0x08009573
 8009428:	080093cd 	.word	0x080093cd
 800942c:	0800947b 	.word	0x0800947b
 8009430:	080093cd 	.word	0x080093cd
 8009434:	080093cd 	.word	0x080093cd
 8009438:	08009513 	.word	0x08009513
 800943c:	6833      	ldr	r3, [r6, #0]
 800943e:	1d1a      	adds	r2, r3, #4
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	6032      	str	r2, [r6, #0]
 8009444:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009448:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800944c:	2301      	movs	r3, #1
 800944e:	e09d      	b.n	800958c <_printf_i+0x1e8>
 8009450:	6833      	ldr	r3, [r6, #0]
 8009452:	6820      	ldr	r0, [r4, #0]
 8009454:	1d19      	adds	r1, r3, #4
 8009456:	6031      	str	r1, [r6, #0]
 8009458:	0606      	lsls	r6, r0, #24
 800945a:	d501      	bpl.n	8009460 <_printf_i+0xbc>
 800945c:	681d      	ldr	r5, [r3, #0]
 800945e:	e003      	b.n	8009468 <_printf_i+0xc4>
 8009460:	0645      	lsls	r5, r0, #25
 8009462:	d5fb      	bpl.n	800945c <_printf_i+0xb8>
 8009464:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009468:	2d00      	cmp	r5, #0
 800946a:	da03      	bge.n	8009474 <_printf_i+0xd0>
 800946c:	232d      	movs	r3, #45	@ 0x2d
 800946e:	426d      	negs	r5, r5
 8009470:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009474:	4859      	ldr	r0, [pc, #356]	@ (80095dc <_printf_i+0x238>)
 8009476:	230a      	movs	r3, #10
 8009478:	e011      	b.n	800949e <_printf_i+0xfa>
 800947a:	6821      	ldr	r1, [r4, #0]
 800947c:	6833      	ldr	r3, [r6, #0]
 800947e:	0608      	lsls	r0, r1, #24
 8009480:	f853 5b04 	ldr.w	r5, [r3], #4
 8009484:	d402      	bmi.n	800948c <_printf_i+0xe8>
 8009486:	0649      	lsls	r1, r1, #25
 8009488:	bf48      	it	mi
 800948a:	b2ad      	uxthmi	r5, r5
 800948c:	2f6f      	cmp	r7, #111	@ 0x6f
 800948e:	4853      	ldr	r0, [pc, #332]	@ (80095dc <_printf_i+0x238>)
 8009490:	6033      	str	r3, [r6, #0]
 8009492:	bf14      	ite	ne
 8009494:	230a      	movne	r3, #10
 8009496:	2308      	moveq	r3, #8
 8009498:	2100      	movs	r1, #0
 800949a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800949e:	6866      	ldr	r6, [r4, #4]
 80094a0:	60a6      	str	r6, [r4, #8]
 80094a2:	2e00      	cmp	r6, #0
 80094a4:	bfa2      	ittt	ge
 80094a6:	6821      	ldrge	r1, [r4, #0]
 80094a8:	f021 0104 	bicge.w	r1, r1, #4
 80094ac:	6021      	strge	r1, [r4, #0]
 80094ae:	b90d      	cbnz	r5, 80094b4 <_printf_i+0x110>
 80094b0:	2e00      	cmp	r6, #0
 80094b2:	d04b      	beq.n	800954c <_printf_i+0x1a8>
 80094b4:	4616      	mov	r6, r2
 80094b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80094ba:	fb03 5711 	mls	r7, r3, r1, r5
 80094be:	5dc7      	ldrb	r7, [r0, r7]
 80094c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80094c4:	462f      	mov	r7, r5
 80094c6:	42bb      	cmp	r3, r7
 80094c8:	460d      	mov	r5, r1
 80094ca:	d9f4      	bls.n	80094b6 <_printf_i+0x112>
 80094cc:	2b08      	cmp	r3, #8
 80094ce:	d10b      	bne.n	80094e8 <_printf_i+0x144>
 80094d0:	6823      	ldr	r3, [r4, #0]
 80094d2:	07df      	lsls	r7, r3, #31
 80094d4:	d508      	bpl.n	80094e8 <_printf_i+0x144>
 80094d6:	6923      	ldr	r3, [r4, #16]
 80094d8:	6861      	ldr	r1, [r4, #4]
 80094da:	4299      	cmp	r1, r3
 80094dc:	bfde      	ittt	le
 80094de:	2330      	movle	r3, #48	@ 0x30
 80094e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80094e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80094e8:	1b92      	subs	r2, r2, r6
 80094ea:	6122      	str	r2, [r4, #16]
 80094ec:	f8cd a000 	str.w	sl, [sp]
 80094f0:	464b      	mov	r3, r9
 80094f2:	aa03      	add	r2, sp, #12
 80094f4:	4621      	mov	r1, r4
 80094f6:	4640      	mov	r0, r8
 80094f8:	f7ff fee6 	bl	80092c8 <_printf_common>
 80094fc:	3001      	adds	r0, #1
 80094fe:	d14a      	bne.n	8009596 <_printf_i+0x1f2>
 8009500:	f04f 30ff 	mov.w	r0, #4294967295
 8009504:	b004      	add	sp, #16
 8009506:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800950a:	6823      	ldr	r3, [r4, #0]
 800950c:	f043 0320 	orr.w	r3, r3, #32
 8009510:	6023      	str	r3, [r4, #0]
 8009512:	4833      	ldr	r0, [pc, #204]	@ (80095e0 <_printf_i+0x23c>)
 8009514:	2778      	movs	r7, #120	@ 0x78
 8009516:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800951a:	6823      	ldr	r3, [r4, #0]
 800951c:	6831      	ldr	r1, [r6, #0]
 800951e:	061f      	lsls	r7, r3, #24
 8009520:	f851 5b04 	ldr.w	r5, [r1], #4
 8009524:	d402      	bmi.n	800952c <_printf_i+0x188>
 8009526:	065f      	lsls	r7, r3, #25
 8009528:	bf48      	it	mi
 800952a:	b2ad      	uxthmi	r5, r5
 800952c:	6031      	str	r1, [r6, #0]
 800952e:	07d9      	lsls	r1, r3, #31
 8009530:	bf44      	itt	mi
 8009532:	f043 0320 	orrmi.w	r3, r3, #32
 8009536:	6023      	strmi	r3, [r4, #0]
 8009538:	b11d      	cbz	r5, 8009542 <_printf_i+0x19e>
 800953a:	2310      	movs	r3, #16
 800953c:	e7ac      	b.n	8009498 <_printf_i+0xf4>
 800953e:	4827      	ldr	r0, [pc, #156]	@ (80095dc <_printf_i+0x238>)
 8009540:	e7e9      	b.n	8009516 <_printf_i+0x172>
 8009542:	6823      	ldr	r3, [r4, #0]
 8009544:	f023 0320 	bic.w	r3, r3, #32
 8009548:	6023      	str	r3, [r4, #0]
 800954a:	e7f6      	b.n	800953a <_printf_i+0x196>
 800954c:	4616      	mov	r6, r2
 800954e:	e7bd      	b.n	80094cc <_printf_i+0x128>
 8009550:	6833      	ldr	r3, [r6, #0]
 8009552:	6825      	ldr	r5, [r4, #0]
 8009554:	6961      	ldr	r1, [r4, #20]
 8009556:	1d18      	adds	r0, r3, #4
 8009558:	6030      	str	r0, [r6, #0]
 800955a:	062e      	lsls	r6, r5, #24
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	d501      	bpl.n	8009564 <_printf_i+0x1c0>
 8009560:	6019      	str	r1, [r3, #0]
 8009562:	e002      	b.n	800956a <_printf_i+0x1c6>
 8009564:	0668      	lsls	r0, r5, #25
 8009566:	d5fb      	bpl.n	8009560 <_printf_i+0x1bc>
 8009568:	8019      	strh	r1, [r3, #0]
 800956a:	2300      	movs	r3, #0
 800956c:	6123      	str	r3, [r4, #16]
 800956e:	4616      	mov	r6, r2
 8009570:	e7bc      	b.n	80094ec <_printf_i+0x148>
 8009572:	6833      	ldr	r3, [r6, #0]
 8009574:	1d1a      	adds	r2, r3, #4
 8009576:	6032      	str	r2, [r6, #0]
 8009578:	681e      	ldr	r6, [r3, #0]
 800957a:	6862      	ldr	r2, [r4, #4]
 800957c:	2100      	movs	r1, #0
 800957e:	4630      	mov	r0, r6
 8009580:	f7f6 fe2e 	bl	80001e0 <memchr>
 8009584:	b108      	cbz	r0, 800958a <_printf_i+0x1e6>
 8009586:	1b80      	subs	r0, r0, r6
 8009588:	6060      	str	r0, [r4, #4]
 800958a:	6863      	ldr	r3, [r4, #4]
 800958c:	6123      	str	r3, [r4, #16]
 800958e:	2300      	movs	r3, #0
 8009590:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009594:	e7aa      	b.n	80094ec <_printf_i+0x148>
 8009596:	6923      	ldr	r3, [r4, #16]
 8009598:	4632      	mov	r2, r6
 800959a:	4649      	mov	r1, r9
 800959c:	4640      	mov	r0, r8
 800959e:	47d0      	blx	sl
 80095a0:	3001      	adds	r0, #1
 80095a2:	d0ad      	beq.n	8009500 <_printf_i+0x15c>
 80095a4:	6823      	ldr	r3, [r4, #0]
 80095a6:	079b      	lsls	r3, r3, #30
 80095a8:	d413      	bmi.n	80095d2 <_printf_i+0x22e>
 80095aa:	68e0      	ldr	r0, [r4, #12]
 80095ac:	9b03      	ldr	r3, [sp, #12]
 80095ae:	4298      	cmp	r0, r3
 80095b0:	bfb8      	it	lt
 80095b2:	4618      	movlt	r0, r3
 80095b4:	e7a6      	b.n	8009504 <_printf_i+0x160>
 80095b6:	2301      	movs	r3, #1
 80095b8:	4632      	mov	r2, r6
 80095ba:	4649      	mov	r1, r9
 80095bc:	4640      	mov	r0, r8
 80095be:	47d0      	blx	sl
 80095c0:	3001      	adds	r0, #1
 80095c2:	d09d      	beq.n	8009500 <_printf_i+0x15c>
 80095c4:	3501      	adds	r5, #1
 80095c6:	68e3      	ldr	r3, [r4, #12]
 80095c8:	9903      	ldr	r1, [sp, #12]
 80095ca:	1a5b      	subs	r3, r3, r1
 80095cc:	42ab      	cmp	r3, r5
 80095ce:	dcf2      	bgt.n	80095b6 <_printf_i+0x212>
 80095d0:	e7eb      	b.n	80095aa <_printf_i+0x206>
 80095d2:	2500      	movs	r5, #0
 80095d4:	f104 0619 	add.w	r6, r4, #25
 80095d8:	e7f5      	b.n	80095c6 <_printf_i+0x222>
 80095da:	bf00      	nop
 80095dc:	08009d4d 	.word	0x08009d4d
 80095e0:	08009d5e 	.word	0x08009d5e

080095e4 <_sbrk_r>:
 80095e4:	b538      	push	{r3, r4, r5, lr}
 80095e6:	4d06      	ldr	r5, [pc, #24]	@ (8009600 <_sbrk_r+0x1c>)
 80095e8:	2300      	movs	r3, #0
 80095ea:	4604      	mov	r4, r0
 80095ec:	4608      	mov	r0, r1
 80095ee:	602b      	str	r3, [r5, #0]
 80095f0:	f7f7 ff4c 	bl	800148c <_sbrk>
 80095f4:	1c43      	adds	r3, r0, #1
 80095f6:	d102      	bne.n	80095fe <_sbrk_r+0x1a>
 80095f8:	682b      	ldr	r3, [r5, #0]
 80095fa:	b103      	cbz	r3, 80095fe <_sbrk_r+0x1a>
 80095fc:	6023      	str	r3, [r4, #0]
 80095fe:	bd38      	pop	{r3, r4, r5, pc}
 8009600:	20001304 	.word	0x20001304

08009604 <_realloc_r>:
 8009604:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009608:	4680      	mov	r8, r0
 800960a:	4615      	mov	r5, r2
 800960c:	460c      	mov	r4, r1
 800960e:	b921      	cbnz	r1, 800961a <_realloc_r+0x16>
 8009610:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009614:	4611      	mov	r1, r2
 8009616:	f7ff bc73 	b.w	8008f00 <_malloc_r>
 800961a:	b92a      	cbnz	r2, 8009628 <_realloc_r+0x24>
 800961c:	f7ff fc04 	bl	8008e28 <_free_r>
 8009620:	2400      	movs	r4, #0
 8009622:	4620      	mov	r0, r4
 8009624:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009628:	f000 f81a 	bl	8009660 <_malloc_usable_size_r>
 800962c:	4285      	cmp	r5, r0
 800962e:	4606      	mov	r6, r0
 8009630:	d802      	bhi.n	8009638 <_realloc_r+0x34>
 8009632:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8009636:	d8f4      	bhi.n	8009622 <_realloc_r+0x1e>
 8009638:	4629      	mov	r1, r5
 800963a:	4640      	mov	r0, r8
 800963c:	f7ff fc60 	bl	8008f00 <_malloc_r>
 8009640:	4607      	mov	r7, r0
 8009642:	2800      	cmp	r0, #0
 8009644:	d0ec      	beq.n	8009620 <_realloc_r+0x1c>
 8009646:	42b5      	cmp	r5, r6
 8009648:	462a      	mov	r2, r5
 800964a:	4621      	mov	r1, r4
 800964c:	bf28      	it	cs
 800964e:	4632      	movcs	r2, r6
 8009650:	f7ff fbdc 	bl	8008e0c <memcpy>
 8009654:	4621      	mov	r1, r4
 8009656:	4640      	mov	r0, r8
 8009658:	f7ff fbe6 	bl	8008e28 <_free_r>
 800965c:	463c      	mov	r4, r7
 800965e:	e7e0      	b.n	8009622 <_realloc_r+0x1e>

08009660 <_malloc_usable_size_r>:
 8009660:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009664:	1f18      	subs	r0, r3, #4
 8009666:	2b00      	cmp	r3, #0
 8009668:	bfbc      	itt	lt
 800966a:	580b      	ldrlt	r3, [r1, r0]
 800966c:	18c0      	addlt	r0, r0, r3
 800966e:	4770      	bx	lr

08009670 <_init>:
 8009670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009672:	bf00      	nop
 8009674:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009676:	bc08      	pop	{r3}
 8009678:	469e      	mov	lr, r3
 800967a:	4770      	bx	lr

0800967c <_fini>:
 800967c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800967e:	bf00      	nop
 8009680:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009682:	bc08      	pop	{r3}
 8009684:	469e      	mov	lr, r3
 8009686:	4770      	bx	lr
