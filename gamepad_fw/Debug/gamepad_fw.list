
gamepad_fw.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007608  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  0800779c  0800779c  0000879c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077fc  080077fc  000091c8  2**0
                  CONTENTS
  4 .ARM          00000008  080077fc  080077fc  000087fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007804  08007804  000091c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007804  08007804  00008804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007808  08007808  00008808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001c8  20000000  0800780c  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa8  200001c8  080079d4  000091c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c70  080079d4  00009c70  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000091c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f25c  00000000  00000000  000091f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d7d  00000000  00000000  00018454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c58  00000000  00000000  0001b1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000928  00000000  00000000  0001be30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d8f  00000000  00000000  0001c758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114f1  00000000  00000000  000364e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ac1d  00000000  00000000  000479d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e25f5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003148  00000000  00000000  000e2638  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000050  00000000  00000000  000e5780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200001c8 	.word	0x200001c8
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007784 	.word	0x08007784

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200001cc 	.word	0x200001cc
 80001d0:	08007784 	.word	0x08007784

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b96a 	b.w	80004c0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	460c      	mov	r4, r1
 800020c:	2b00      	cmp	r3, #0
 800020e:	d14e      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000210:	4694      	mov	ip, r2
 8000212:	458c      	cmp	ip, r1
 8000214:	4686      	mov	lr, r0
 8000216:	fab2 f282 	clz	r2, r2
 800021a:	d962      	bls.n	80002e2 <__udivmoddi4+0xde>
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0320 	rsb	r3, r2, #32
 8000222:	4091      	lsls	r1, r2
 8000224:	fa20 f303 	lsr.w	r3, r0, r3
 8000228:	fa0c fc02 	lsl.w	ip, ip, r2
 800022c:	4319      	orrs	r1, r3
 800022e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000232:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000236:	fa1f f68c 	uxth.w	r6, ip
 800023a:	fbb1 f4f7 	udiv	r4, r1, r7
 800023e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000242:	fb07 1114 	mls	r1, r7, r4, r1
 8000246:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024a:	fb04 f106 	mul.w	r1, r4, r6
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f104 30ff 	add.w	r0, r4, #4294967295
 800025a:	f080 8112 	bcs.w	8000482 <__udivmoddi4+0x27e>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 810f 	bls.w	8000482 <__udivmoddi4+0x27e>
 8000264:	3c02      	subs	r4, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a59      	subs	r1, r3, r1
 800026a:	fa1f f38e 	uxth.w	r3, lr
 800026e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000272:	fb07 1110 	mls	r1, r7, r0, r1
 8000276:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027a:	fb00 f606 	mul.w	r6, r0, r6
 800027e:	429e      	cmp	r6, r3
 8000280:	d90a      	bls.n	8000298 <__udivmoddi4+0x94>
 8000282:	eb1c 0303 	adds.w	r3, ip, r3
 8000286:	f100 31ff 	add.w	r1, r0, #4294967295
 800028a:	f080 80fc 	bcs.w	8000486 <__udivmoddi4+0x282>
 800028e:	429e      	cmp	r6, r3
 8000290:	f240 80f9 	bls.w	8000486 <__udivmoddi4+0x282>
 8000294:	4463      	add	r3, ip
 8000296:	3802      	subs	r0, #2
 8000298:	1b9b      	subs	r3, r3, r6
 800029a:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800029e:	2100      	movs	r1, #0
 80002a0:	b11d      	cbz	r5, 80002aa <__udivmoddi4+0xa6>
 80002a2:	40d3      	lsrs	r3, r2
 80002a4:	2200      	movs	r2, #0
 80002a6:	e9c5 3200 	strd	r3, r2, [r5]
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d905      	bls.n	80002be <__udivmoddi4+0xba>
 80002b2:	b10d      	cbz	r5, 80002b8 <__udivmoddi4+0xb4>
 80002b4:	e9c5 0100 	strd	r0, r1, [r5]
 80002b8:	2100      	movs	r1, #0
 80002ba:	4608      	mov	r0, r1
 80002bc:	e7f5      	b.n	80002aa <__udivmoddi4+0xa6>
 80002be:	fab3 f183 	clz	r1, r3
 80002c2:	2900      	cmp	r1, #0
 80002c4:	d146      	bne.n	8000354 <__udivmoddi4+0x150>
 80002c6:	42a3      	cmp	r3, r4
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xcc>
 80002ca:	4290      	cmp	r0, r2
 80002cc:	f0c0 80f0 	bcc.w	80004b0 <__udivmoddi4+0x2ac>
 80002d0:	1a86      	subs	r6, r0, r2
 80002d2:	eb64 0303 	sbc.w	r3, r4, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	2d00      	cmp	r5, #0
 80002da:	d0e6      	beq.n	80002aa <__udivmoddi4+0xa6>
 80002dc:	e9c5 6300 	strd	r6, r3, [r5]
 80002e0:	e7e3      	b.n	80002aa <__udivmoddi4+0xa6>
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x204>
 80002e8:	eba1 040c 	sub.w	r4, r1, ip
 80002ec:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f0:	fa1f f78c 	uxth.w	r7, ip
 80002f4:	2101      	movs	r1, #1
 80002f6:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb08 4416 	mls	r4, r8, r6, r4
 8000302:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000306:	fb07 f006 	mul.w	r0, r7, r6
 800030a:	4298      	cmp	r0, r3
 800030c:	d908      	bls.n	8000320 <__udivmoddi4+0x11c>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 34ff 	add.w	r4, r6, #4294967295
 8000316:	d202      	bcs.n	800031e <__udivmoddi4+0x11a>
 8000318:	4298      	cmp	r0, r3
 800031a:	f200 80cd 	bhi.w	80004b8 <__udivmoddi4+0x2b4>
 800031e:	4626      	mov	r6, r4
 8000320:	1a1c      	subs	r4, r3, r0
 8000322:	fa1f f38e 	uxth.w	r3, lr
 8000326:	fbb4 f0f8 	udiv	r0, r4, r8
 800032a:	fb08 4410 	mls	r4, r8, r0, r4
 800032e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000332:	fb00 f707 	mul.w	r7, r0, r7
 8000336:	429f      	cmp	r7, r3
 8000338:	d908      	bls.n	800034c <__udivmoddi4+0x148>
 800033a:	eb1c 0303 	adds.w	r3, ip, r3
 800033e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x146>
 8000344:	429f      	cmp	r7, r3
 8000346:	f200 80b0 	bhi.w	80004aa <__udivmoddi4+0x2a6>
 800034a:	4620      	mov	r0, r4
 800034c:	1bdb      	subs	r3, r3, r7
 800034e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000352:	e7a5      	b.n	80002a0 <__udivmoddi4+0x9c>
 8000354:	f1c1 0620 	rsb	r6, r1, #32
 8000358:	408b      	lsls	r3, r1
 800035a:	fa22 f706 	lsr.w	r7, r2, r6
 800035e:	431f      	orrs	r7, r3
 8000360:	fa20 fc06 	lsr.w	ip, r0, r6
 8000364:	fa04 f301 	lsl.w	r3, r4, r1
 8000368:	ea43 030c 	orr.w	r3, r3, ip
 800036c:	40f4      	lsrs	r4, r6
 800036e:	fa00 f801 	lsl.w	r8, r0, r1
 8000372:	0c38      	lsrs	r0, r7, #16
 8000374:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000378:	fbb4 fef0 	udiv	lr, r4, r0
 800037c:	fa1f fc87 	uxth.w	ip, r7
 8000380:	fb00 441e 	mls	r4, r0, lr, r4
 8000384:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000388:	fb0e f90c 	mul.w	r9, lr, ip
 800038c:	45a1      	cmp	r9, r4
 800038e:	fa02 f201 	lsl.w	r2, r2, r1
 8000392:	d90a      	bls.n	80003aa <__udivmoddi4+0x1a6>
 8000394:	193c      	adds	r4, r7, r4
 8000396:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039a:	f080 8084 	bcs.w	80004a6 <__udivmoddi4+0x2a2>
 800039e:	45a1      	cmp	r9, r4
 80003a0:	f240 8081 	bls.w	80004a6 <__udivmoddi4+0x2a2>
 80003a4:	f1ae 0e02 	sub.w	lr, lr, #2
 80003a8:	443c      	add	r4, r7
 80003aa:	eba4 0409 	sub.w	r4, r4, r9
 80003ae:	fa1f f983 	uxth.w	r9, r3
 80003b2:	fbb4 f3f0 	udiv	r3, r4, r0
 80003b6:	fb00 4413 	mls	r4, r0, r3, r4
 80003ba:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003be:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d907      	bls.n	80003d6 <__udivmoddi4+0x1d2>
 80003c6:	193c      	adds	r4, r7, r4
 80003c8:	f103 30ff 	add.w	r0, r3, #4294967295
 80003cc:	d267      	bcs.n	800049e <__udivmoddi4+0x29a>
 80003ce:	45a4      	cmp	ip, r4
 80003d0:	d965      	bls.n	800049e <__udivmoddi4+0x29a>
 80003d2:	3b02      	subs	r3, #2
 80003d4:	443c      	add	r4, r7
 80003d6:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003da:	fba0 9302 	umull	r9, r3, r0, r2
 80003de:	eba4 040c 	sub.w	r4, r4, ip
 80003e2:	429c      	cmp	r4, r3
 80003e4:	46ce      	mov	lr, r9
 80003e6:	469c      	mov	ip, r3
 80003e8:	d351      	bcc.n	800048e <__udivmoddi4+0x28a>
 80003ea:	d04e      	beq.n	800048a <__udivmoddi4+0x286>
 80003ec:	b155      	cbz	r5, 8000404 <__udivmoddi4+0x200>
 80003ee:	ebb8 030e 	subs.w	r3, r8, lr
 80003f2:	eb64 040c 	sbc.w	r4, r4, ip
 80003f6:	fa04 f606 	lsl.w	r6, r4, r6
 80003fa:	40cb      	lsrs	r3, r1
 80003fc:	431e      	orrs	r6, r3
 80003fe:	40cc      	lsrs	r4, r1
 8000400:	e9c5 6400 	strd	r6, r4, [r5]
 8000404:	2100      	movs	r1, #0
 8000406:	e750      	b.n	80002aa <__udivmoddi4+0xa6>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f103 	lsr.w	r1, r0, r3
 8000410:	fa0c fc02 	lsl.w	ip, ip, r2
 8000414:	fa24 f303 	lsr.w	r3, r4, r3
 8000418:	4094      	lsls	r4, r2
 800041a:	430c      	orrs	r4, r1
 800041c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000420:	fa00 fe02 	lsl.w	lr, r0, r2
 8000424:	fa1f f78c 	uxth.w	r7, ip
 8000428:	fbb3 f0f8 	udiv	r0, r3, r8
 800042c:	fb08 3110 	mls	r1, r8, r0, r3
 8000430:	0c23      	lsrs	r3, r4, #16
 8000432:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000436:	fb00 f107 	mul.w	r1, r0, r7
 800043a:	4299      	cmp	r1, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x24c>
 800043e:	eb1c 0303 	adds.w	r3, ip, r3
 8000442:	f100 36ff 	add.w	r6, r0, #4294967295
 8000446:	d22c      	bcs.n	80004a2 <__udivmoddi4+0x29e>
 8000448:	4299      	cmp	r1, r3
 800044a:	d92a      	bls.n	80004a2 <__udivmoddi4+0x29e>
 800044c:	3802      	subs	r0, #2
 800044e:	4463      	add	r3, ip
 8000450:	1a5b      	subs	r3, r3, r1
 8000452:	b2a4      	uxth	r4, r4
 8000454:	fbb3 f1f8 	udiv	r1, r3, r8
 8000458:	fb08 3311 	mls	r3, r8, r1, r3
 800045c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000460:	fb01 f307 	mul.w	r3, r1, r7
 8000464:	42a3      	cmp	r3, r4
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x276>
 8000468:	eb1c 0404 	adds.w	r4, ip, r4
 800046c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000470:	d213      	bcs.n	800049a <__udivmoddi4+0x296>
 8000472:	42a3      	cmp	r3, r4
 8000474:	d911      	bls.n	800049a <__udivmoddi4+0x296>
 8000476:	3902      	subs	r1, #2
 8000478:	4464      	add	r4, ip
 800047a:	1ae4      	subs	r4, r4, r3
 800047c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000480:	e739      	b.n	80002f6 <__udivmoddi4+0xf2>
 8000482:	4604      	mov	r4, r0
 8000484:	e6f0      	b.n	8000268 <__udivmoddi4+0x64>
 8000486:	4608      	mov	r0, r1
 8000488:	e706      	b.n	8000298 <__udivmoddi4+0x94>
 800048a:	45c8      	cmp	r8, r9
 800048c:	d2ae      	bcs.n	80003ec <__udivmoddi4+0x1e8>
 800048e:	ebb9 0e02 	subs.w	lr, r9, r2
 8000492:	eb63 0c07 	sbc.w	ip, r3, r7
 8000496:	3801      	subs	r0, #1
 8000498:	e7a8      	b.n	80003ec <__udivmoddi4+0x1e8>
 800049a:	4631      	mov	r1, r6
 800049c:	e7ed      	b.n	800047a <__udivmoddi4+0x276>
 800049e:	4603      	mov	r3, r0
 80004a0:	e799      	b.n	80003d6 <__udivmoddi4+0x1d2>
 80004a2:	4630      	mov	r0, r6
 80004a4:	e7d4      	b.n	8000450 <__udivmoddi4+0x24c>
 80004a6:	46d6      	mov	lr, sl
 80004a8:	e77f      	b.n	80003aa <__udivmoddi4+0x1a6>
 80004aa:	4463      	add	r3, ip
 80004ac:	3802      	subs	r0, #2
 80004ae:	e74d      	b.n	800034c <__udivmoddi4+0x148>
 80004b0:	4606      	mov	r6, r0
 80004b2:	4623      	mov	r3, r4
 80004b4:	4608      	mov	r0, r1
 80004b6:	e70f      	b.n	80002d8 <__udivmoddi4+0xd4>
 80004b8:	3e02      	subs	r6, #2
 80004ba:	4463      	add	r3, ip
 80004bc:	e730      	b.n	8000320 <__udivmoddi4+0x11c>
 80004be:	bf00      	nop

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b082      	sub	sp, #8
 80004c8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ca:	f000 fbd3 	bl	8000c74 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ce:	f000 f977 	bl	80007c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d2:	f000 fa5b 	bl	800098c <MX_GPIO_Init>
  MX_ADC1_Init();
 80004d6:	f000 f9dd 	bl	8000894 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80004da:	f006 fcc7 	bl	8006e6c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  mouseReport.reportId = 2;
 80004de:	4b1a      	ldr	r3, [pc, #104]	@ (8000548 <main+0x84>)
 80004e0:	2202      	movs	r2, #2
 80004e2:	701a      	strb	r2, [r3, #0]
  gamepadReport.reportId = 1;
 80004e4:	4b19      	ldr	r3, [pc, #100]	@ (800054c <main+0x88>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  getAllADCValue();
 80004ea:	f000 f871 	bl	80005d0 <getAllADCValue>
	  if(switchMode())
 80004ee:	f000 f835 	bl	800055c <switchMode>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d01e      	beq.n	8000536 <main+0x72>
	  {
		  for(int i = 0; i < 5; i++)
 80004f8:	2300      	movs	r3, #0
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	e00b      	b.n	8000516 <main+0x52>
		  {
			  HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);
 80004fe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000502:	4813      	ldr	r0, [pc, #76]	@ (8000550 <main+0x8c>)
 8000504:	f001 faf5 	bl	8001af2 <HAL_GPIO_TogglePin>
			  HAL_Delay(1000);
 8000508:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800050c:	f000 fc24 	bl	8000d58 <HAL_Delay>
		  for(int i = 0; i < 5; i++)
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3301      	adds	r3, #1
 8000514:	607b      	str	r3, [r7, #4]
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	2b04      	cmp	r3, #4
 800051a:	ddf0      	ble.n	80004fe <main+0x3a>
		  }
		  modeState++;
 800051c:	4b0d      	ldr	r3, [pc, #52]	@ (8000554 <main+0x90>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	3301      	adds	r3, #1
 8000522:	b2da      	uxtb	r2, r3
 8000524:	4b0b      	ldr	r3, [pc, #44]	@ (8000554 <main+0x90>)
 8000526:	701a      	strb	r2, [r3, #0]
		  if(modeState >= MODE_COUNT)
 8000528:	4b0a      	ldr	r3, [pc, #40]	@ (8000554 <main+0x90>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d902      	bls.n	8000536 <main+0x72>
			  modeState = MODE_GAMEPAD;
 8000530:	4b08      	ldr	r3, [pc, #32]	@ (8000554 <main+0x90>)
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]
	  }
	  modeHandlers[modeState]();
 8000536:	4b07      	ldr	r3, [pc, #28]	@ (8000554 <main+0x90>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	461a      	mov	r2, r3
 800053c:	4b06      	ldr	r3, [pc, #24]	@ (8000558 <main+0x94>)
 800053e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000542:	4798      	blx	r3
	  getAllADCValue();
 8000544:	e7d1      	b.n	80004ea <main+0x26>
 8000546:	bf00      	nop
 8000548:	20000060 	.word	0x20000060
 800054c:	20000068 	.word	0x20000068
 8000550:	40020800 	.word	0x40020800
 8000554:	20000234 	.word	0x20000234
 8000558:	20000070 	.word	0x20000070

0800055c <switchMode>:
}

/** my functions declaration **/

uint8_t switchMode(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
	return (!(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7) || HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5)));
 8000560:	2180      	movs	r1, #128	@ 0x80
 8000562:	4809      	ldr	r0, [pc, #36]	@ (8000588 <switchMode+0x2c>)
 8000564:	f001 fa94 	bl	8001a90 <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	2b00      	cmp	r3, #0
 800056c:	d108      	bne.n	8000580 <switchMode+0x24>
 800056e:	2120      	movs	r1, #32
 8000570:	4805      	ldr	r0, [pc, #20]	@ (8000588 <switchMode+0x2c>)
 8000572:	f001 fa8d 	bl	8001a90 <HAL_GPIO_ReadPin>
 8000576:	4603      	mov	r3, r0
 8000578:	2b00      	cmp	r3, #0
 800057a:	d101      	bne.n	8000580 <switchMode+0x24>
 800057c:	2301      	movs	r3, #1
 800057e:	e000      	b.n	8000582 <switchMode+0x26>
 8000580:	2300      	movs	r3, #0
 8000582:	b2db      	uxtb	r3, r3
}
 8000584:	4618      	mov	r0, r3
 8000586:	bd80      	pop	{r7, pc}
 8000588:	40020400 	.word	0x40020400

0800058c <configureADCChannel>:

void configureADCChannel(uint32_t channel)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
    ADC_ChannelConfTypeDef sConfig = {0};
 8000594:	f107 0308 	add.w	r3, r7, #8
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
 800059c:	605a      	str	r2, [r3, #4]
 800059e:	609a      	str	r2, [r3, #8]
 80005a0:	60da      	str	r2, [r3, #12]
    sConfig.Channel = channel;
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	60bb      	str	r3, [r7, #8]
    sConfig.Rank = 1;  // Rank is irrelevant in single-channel mode
 80005a6:	2301      	movs	r3, #1
 80005a8:	60fb      	str	r3, [r7, #12]
    sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80005aa:	2300      	movs	r3, #0
 80005ac:	613b      	str	r3, [r7, #16]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80005ae:	f107 0308 	add.w	r3, r7, #8
 80005b2:	4619      	mov	r1, r3
 80005b4:	4805      	ldr	r0, [pc, #20]	@ (80005cc <configureADCChannel+0x40>)
 80005b6:	f000 fdb7 	bl	8001128 <HAL_ADC_ConfigChannel>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <configureADCChannel+0x38>
    {
        Error_Handler();
 80005c0:	f000 fa70 	bl	8000aa4 <Error_Handler>
    }
}
 80005c4:	bf00      	nop
 80005c6:	3718      	adds	r7, #24
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}
 80005cc:	200001e4 	.word	0x200001e4

080005d0 <getAllADCValue>:

void getAllADCValue(void)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b082      	sub	sp, #8
 80005d4:	af00      	add	r7, sp, #0
    for (int i = 0; i < ADC_CHANNELS; i++)
 80005d6:	2300      	movs	r3, #0
 80005d8:	607b      	str	r3, [r7, #4]
 80005da:	e019      	b.n	8000610 <getAllADCValue+0x40>
    {
        // Configure each channel
        configureADCChannel(ADC_CHANNEL_0 + i);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	4618      	mov	r0, r3
 80005e0:	f7ff ffd4 	bl	800058c <configureADCChannel>

        // Start ADC conversion
        HAL_ADC_Start(&hadc1);
 80005e4:	480f      	ldr	r0, [pc, #60]	@ (8000624 <getAllADCValue+0x54>)
 80005e6:	f000 fc1f 	bl	8000e28 <HAL_ADC_Start>

        // Poll for conversion and store value
        if (HAL_ADC_PollForConversion(&hadc1, 10) == HAL_OK)
 80005ea:	210a      	movs	r1, #10
 80005ec:	480d      	ldr	r0, [pc, #52]	@ (8000624 <getAllADCValue+0x54>)
 80005ee:	f000 fd02 	bl	8000ff6 <HAL_ADC_PollForConversion>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d108      	bne.n	800060a <getAllADCValue+0x3a>
        {
            adcValues[i] = HAL_ADC_GetValue(&hadc1);
 80005f8:	480a      	ldr	r0, [pc, #40]	@ (8000624 <getAllADCValue+0x54>)
 80005fa:	f000 fd87 	bl	800110c <HAL_ADC_GetValue>
 80005fe:	4603      	mov	r3, r0
 8000600:	b299      	uxth	r1, r3
 8000602:	4a09      	ldr	r2, [pc, #36]	@ (8000628 <getAllADCValue+0x58>)
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < ADC_CHANNELS; i++)
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	3301      	adds	r3, #1
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	2b03      	cmp	r3, #3
 8000614:	dde2      	ble.n	80005dc <getAllADCValue+0xc>
        }
    }

    // Stop ADC once after reading all channels
    HAL_ADC_Stop(&hadc1);
 8000616:	4803      	ldr	r0, [pc, #12]	@ (8000624 <getAllADCValue+0x54>)
 8000618:	f000 fcba 	bl	8000f90 <HAL_ADC_Stop>
}
 800061c:	bf00      	nop
 800061e:	3708      	adds	r7, #8
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200001e4 	.word	0x200001e4
 8000628:	2000022c 	.word	0x2000022c

0800062c <gamepadProcess>:
//        Error_Handler();
//    }
//}

void gamepadProcess(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
//    gamepadReport.leftX = (2047 - adcValues[0]) * 255 / 4095;		// -127 - 127
//    gamepadReport.leftY = (2047 - adcValues[1]) * 255 / 4095;
//    gamepadReport.rightX = (2047 - adcValues[2]) * 255 / 4095;
//    gamepadReport.rightY = (2047 - adcValues[3]) * 255 / 4095;

	    gamepadReport.leftX = (127 - adcValues[0]);		// -127 - 127
 8000632:	4b2d      	ldr	r3, [pc, #180]	@ (80006e8 <gamepadProcess+0xbc>)
 8000634:	881b      	ldrh	r3, [r3, #0]
 8000636:	b2db      	uxtb	r3, r3
 8000638:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800063c:	b2db      	uxtb	r3, r3
 800063e:	b25a      	sxtb	r2, r3
 8000640:	4b2a      	ldr	r3, [pc, #168]	@ (80006ec <gamepadProcess+0xc0>)
 8000642:	70da      	strb	r2, [r3, #3]
	    gamepadReport.leftY = (127 - adcValues[1]);
 8000644:	4b28      	ldr	r3, [pc, #160]	@ (80006e8 <gamepadProcess+0xbc>)
 8000646:	885b      	ldrh	r3, [r3, #2]
 8000648:	b2db      	uxtb	r3, r3
 800064a:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 800064e:	b2db      	uxtb	r3, r3
 8000650:	b25a      	sxtb	r2, r3
 8000652:	4b26      	ldr	r3, [pc, #152]	@ (80006ec <gamepadProcess+0xc0>)
 8000654:	711a      	strb	r2, [r3, #4]
	    gamepadReport.rightX = (127 - adcValues[2]);
 8000656:	4b24      	ldr	r3, [pc, #144]	@ (80006e8 <gamepadProcess+0xbc>)
 8000658:	889b      	ldrh	r3, [r3, #4]
 800065a:	b2db      	uxtb	r3, r3
 800065c:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000660:	b2db      	uxtb	r3, r3
 8000662:	b25a      	sxtb	r2, r3
 8000664:	4b21      	ldr	r3, [pc, #132]	@ (80006ec <gamepadProcess+0xc0>)
 8000666:	715a      	strb	r2, [r3, #5]
	    gamepadReport.rightY = (127 - adcValues[3]);
 8000668:	4b1f      	ldr	r3, [pc, #124]	@ (80006e8 <gamepadProcess+0xbc>)
 800066a:	88db      	ldrh	r3, [r3, #6]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000672:	b2db      	uxtb	r3, r3
 8000674:	b25a      	sxtb	r2, r3
 8000676:	4b1d      	ldr	r3, [pc, #116]	@ (80006ec <gamepadProcess+0xc0>)
 8000678:	719a      	strb	r2, [r3, #6]

    // Reset buttons
    gamepadReport.buttons = 0;
 800067a:	4b1c      	ldr	r3, [pc, #112]	@ (80006ec <gamepadProcess+0xc0>)
 800067c:	2200      	movs	r2, #0
 800067e:	705a      	strb	r2, [r3, #1]
 8000680:	2200      	movs	r2, #0
 8000682:	709a      	strb	r2, [r3, #2]

    // Get buttons state
    for (int i = 0; i < 16; i++)
 8000684:	2300      	movs	r3, #0
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	e021      	b.n	80006ce <gamepadProcess+0xa2>
    {
        if (HAL_GPIO_ReadPin(port[i], pin[i]) == GPIO_PIN_RESET)
 800068a:	4a19      	ldr	r2, [pc, #100]	@ (80006f0 <gamepadProcess+0xc4>)
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000692:	4918      	ldr	r1, [pc, #96]	@ (80006f4 <gamepadProcess+0xc8>)
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800069a:	4619      	mov	r1, r3
 800069c:	4610      	mov	r0, r2
 800069e:	f001 f9f7 	bl	8001a90 <HAL_GPIO_ReadPin>
 80006a2:	4603      	mov	r3, r0
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d10f      	bne.n	80006c8 <gamepadProcess+0x9c>
        {
            gamepadReport.buttons |= (1 << i);
 80006a8:	4b10      	ldr	r3, [pc, #64]	@ (80006ec <gamepadProcess+0xc0>)
 80006aa:	f8b3 3001 	ldrh.w	r3, [r3, #1]
 80006ae:	b29b      	uxth	r3, r3
 80006b0:	b21a      	sxth	r2, r3
 80006b2:	2101      	movs	r1, #1
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	fa01 f303 	lsl.w	r3, r1, r3
 80006ba:	b21b      	sxth	r3, r3
 80006bc:	4313      	orrs	r3, r2
 80006be:	b21b      	sxth	r3, r3
 80006c0:	b29a      	uxth	r2, r3
 80006c2:	4b0a      	ldr	r3, [pc, #40]	@ (80006ec <gamepadProcess+0xc0>)
 80006c4:	f8a3 2001 	strh.w	r2, [r3, #1]
    for (int i = 0; i < 16; i++)
 80006c8:	687b      	ldr	r3, [r7, #4]
 80006ca:	3301      	adds	r3, #1
 80006cc:	607b      	str	r3, [r7, #4]
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2b0f      	cmp	r3, #15
 80006d2:	ddda      	ble.n	800068a <gamepadProcess+0x5e>
        }
    }

    // Send report to the host
    USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &gamepadReport, sizeof(gamepadReport));
 80006d4:	2207      	movs	r2, #7
 80006d6:	4905      	ldr	r1, [pc, #20]	@ (80006ec <gamepadProcess+0xc0>)
 80006d8:	4807      	ldr	r0, [pc, #28]	@ (80006f8 <gamepadProcess+0xcc>)
 80006da:	f004 ff47 	bl	800556c <USBD_CUSTOM_HID_SendReport>
}
 80006de:	bf00      	nop
 80006e0:	3708      	adds	r7, #8
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000022c 	.word	0x2000022c
 80006ec:	20000068 	.word	0x20000068
 80006f0:	20000000 	.word	0x20000000
 80006f4:	20000040 	.word	0x20000040
 80006f8:	20000240 	.word	0x20000240

080006fc <mouseProcess>:

void mouseProcess(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	// Get axes values
//    mouseReport.pointerX = (2047 - adcValues[0]) * 150 / 4095;		// -127 - 127
//    mouseReport.pointerY = (2047 - adcValues[1]) * 150 / 4095;
	mouseReport.pointerX = (127 - adcValues[0]) * 32 / 255;	// -127 - 127
 8000700:	4b29      	ldr	r3, [pc, #164]	@ (80007a8 <mouseProcess+0xac>)
 8000702:	881b      	ldrh	r3, [r3, #0]
 8000704:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000708:	015b      	lsls	r3, r3, #5
 800070a:	4a28      	ldr	r2, [pc, #160]	@ (80007ac <mouseProcess+0xb0>)
 800070c:	fb82 1203 	smull	r1, r2, r2, r3
 8000710:	441a      	add	r2, r3
 8000712:	11d2      	asrs	r2, r2, #7
 8000714:	17db      	asrs	r3, r3, #31
 8000716:	1ad3      	subs	r3, r2, r3
 8000718:	b25a      	sxtb	r2, r3
 800071a:	4b25      	ldr	r3, [pc, #148]	@ (80007b0 <mouseProcess+0xb4>)
 800071c:	709a      	strb	r2, [r3, #2]
	mouseReport.pointerY = (127 - adcValues[1]) * 32 / 255;
 800071e:	4b22      	ldr	r3, [pc, #136]	@ (80007a8 <mouseProcess+0xac>)
 8000720:	885b      	ldrh	r3, [r3, #2]
 8000722:	f1c3 037f 	rsb	r3, r3, #127	@ 0x7f
 8000726:	015b      	lsls	r3, r3, #5
 8000728:	4a20      	ldr	r2, [pc, #128]	@ (80007ac <mouseProcess+0xb0>)
 800072a:	fb82 1203 	smull	r1, r2, r2, r3
 800072e:	441a      	add	r2, r3
 8000730:	11d2      	asrs	r2, r2, #7
 8000732:	17db      	asrs	r3, r3, #31
 8000734:	1ad3      	subs	r3, r2, r3
 8000736:	b25a      	sxtb	r2, r3
 8000738:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <mouseProcess+0xb4>)
 800073a:	70da      	strb	r2, [r3, #3]

    // Get buttons state
    mouseReport.leftClick = (HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10) == GPIO_PIN_RESET);
 800073c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000740:	481c      	ldr	r0, [pc, #112]	@ (80007b4 <mouseProcess+0xb8>)
 8000742:	f001 f9a5 	bl	8001a90 <HAL_GPIO_ReadPin>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	bf0c      	ite	eq
 800074c:	2301      	moveq	r3, #1
 800074e:	2300      	movne	r3, #0
 8000750:	b2d9      	uxtb	r1, r3
 8000752:	4a17      	ldr	r2, [pc, #92]	@ (80007b0 <mouseProcess+0xb4>)
 8000754:	7853      	ldrb	r3, [r2, #1]
 8000756:	f361 0300 	bfi	r3, r1, #0, #1
 800075a:	7053      	strb	r3, [r2, #1]
    mouseReport.rightClick = (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET);
 800075c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000760:	4815      	ldr	r0, [pc, #84]	@ (80007b8 <mouseProcess+0xbc>)
 8000762:	f001 f995 	bl	8001a90 <HAL_GPIO_ReadPin>
 8000766:	4603      	mov	r3, r0
 8000768:	2b00      	cmp	r3, #0
 800076a:	bf0c      	ite	eq
 800076c:	2301      	moveq	r3, #1
 800076e:	2300      	movne	r3, #0
 8000770:	b2d9      	uxtb	r1, r3
 8000772:	4a0f      	ldr	r2, [pc, #60]	@ (80007b0 <mouseProcess+0xb4>)
 8000774:	7853      	ldrb	r3, [r2, #1]
 8000776:	f361 0341 	bfi	r3, r1, #1, #1
 800077a:	7053      	strb	r3, [r2, #1]
    mouseReport.midClick = (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7) == GPIO_PIN_RESET);
 800077c:	2180      	movs	r1, #128	@ 0x80
 800077e:	480e      	ldr	r0, [pc, #56]	@ (80007b8 <mouseProcess+0xbc>)
 8000780:	f001 f986 	bl	8001a90 <HAL_GPIO_ReadPin>
 8000784:	4603      	mov	r3, r0
 8000786:	2b00      	cmp	r3, #0
 8000788:	bf0c      	ite	eq
 800078a:	2301      	moveq	r3, #1
 800078c:	2300      	movne	r3, #0
 800078e:	b2d9      	uxtb	r1, r3
 8000790:	4a07      	ldr	r2, [pc, #28]	@ (80007b0 <mouseProcess+0xb4>)
 8000792:	7853      	ldrb	r3, [r2, #1]
 8000794:	f361 0382 	bfi	r3, r1, #2, #1
 8000798:	7053      	strb	r3, [r2, #1]

    // Get wheel values
    //mouseReport.wheel = __HAL_TIM_GET_COUNTER(&htim2) - 127;

    // Send report to the host
    USBD_CUSTOM_HID_SendReport(&hUsbDeviceFS, &mouseReport, sizeof(mouseReport));
 800079a:	2205      	movs	r2, #5
 800079c:	4904      	ldr	r1, [pc, #16]	@ (80007b0 <mouseProcess+0xb4>)
 800079e:	4807      	ldr	r0, [pc, #28]	@ (80007bc <mouseProcess+0xc0>)
 80007a0:	f004 fee4 	bl	800556c <USBD_CUSTOM_HID_SendReport>
}
 80007a4:	bf00      	nop
 80007a6:	bd80      	pop	{r7, pc}
 80007a8:	2000022c 	.word	0x2000022c
 80007ac:	80808081 	.word	0x80808081
 80007b0:	20000060 	.word	0x20000060
 80007b4:	40020400 	.word	0x40020400
 80007b8:	40020000 	.word	0x40020000
 80007bc:	20000240 	.word	0x20000240

080007c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b094      	sub	sp, #80	@ 0x50
 80007c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c6:	f107 0320 	add.w	r3, r7, #32
 80007ca:	2230      	movs	r2, #48	@ 0x30
 80007cc:	2100      	movs	r1, #0
 80007ce:	4618      	mov	r0, r3
 80007d0:	f006 ffac 	bl	800772c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d4:	f107 030c 	add.w	r3, r7, #12
 80007d8:	2200      	movs	r2, #0
 80007da:	601a      	str	r2, [r3, #0]
 80007dc:	605a      	str	r2, [r3, #4]
 80007de:	609a      	str	r2, [r3, #8]
 80007e0:	60da      	str	r2, [r3, #12]
 80007e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007e4:	2300      	movs	r3, #0
 80007e6:	60bb      	str	r3, [r7, #8]
 80007e8:	4b28      	ldr	r3, [pc, #160]	@ (800088c <SystemClock_Config+0xcc>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ec:	4a27      	ldr	r2, [pc, #156]	@ (800088c <SystemClock_Config+0xcc>)
 80007ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80007f4:	4b25      	ldr	r3, [pc, #148]	@ (800088c <SystemClock_Config+0xcc>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007fc:	60bb      	str	r3, [r7, #8]
 80007fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000800:	2300      	movs	r3, #0
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	4b22      	ldr	r3, [pc, #136]	@ (8000890 <SystemClock_Config+0xd0>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800080c:	4a20      	ldr	r2, [pc, #128]	@ (8000890 <SystemClock_Config+0xd0>)
 800080e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000812:	6013      	str	r3, [r2, #0]
 8000814:	4b1e      	ldr	r3, [pc, #120]	@ (8000890 <SystemClock_Config+0xd0>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000820:	2301      	movs	r3, #1
 8000822:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000824:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000828:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800082a:	2302      	movs	r3, #2
 800082c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800082e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000832:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000834:	2319      	movs	r3, #25
 8000836:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000838:	2390      	movs	r3, #144	@ 0x90
 800083a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800083c:	2302      	movs	r3, #2
 800083e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000840:	2303      	movs	r3, #3
 8000842:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000844:	f107 0320 	add.w	r3, r7, #32
 8000848:	4618      	mov	r0, r3
 800084a:	f002 fbd1 	bl	8002ff0 <HAL_RCC_OscConfig>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000854:	f000 f926 	bl	8000aa4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000858:	230f      	movs	r3, #15
 800085a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800085c:	2302      	movs	r3, #2
 800085e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000860:	2300      	movs	r3, #0
 8000862:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000864:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000868:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800086e:	f107 030c 	add.w	r3, r7, #12
 8000872:	2102      	movs	r1, #2
 8000874:	4618      	mov	r0, r3
 8000876:	f002 fe33 	bl	80034e0 <HAL_RCC_ClockConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000880:	f000 f910 	bl	8000aa4 <Error_Handler>
  }
}
 8000884:	bf00      	nop
 8000886:	3750      	adds	r7, #80	@ 0x50
 8000888:	46bd      	mov	sp, r7
 800088a:	bd80      	pop	{r7, pc}
 800088c:	40023800 	.word	0x40023800
 8000890:	40007000 	.word	0x40007000

08000894 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b084      	sub	sp, #16
 8000898:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800089a:	463b      	mov	r3, r7
 800089c:	2200      	movs	r2, #0
 800089e:	601a      	str	r2, [r3, #0]
 80008a0:	605a      	str	r2, [r3, #4]
 80008a2:	609a      	str	r2, [r3, #8]
 80008a4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008a6:	4b36      	ldr	r3, [pc, #216]	@ (8000980 <MX_ADC1_Init+0xec>)
 80008a8:	4a36      	ldr	r2, [pc, #216]	@ (8000984 <MX_ADC1_Init+0xf0>)
 80008aa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008ac:	4b34      	ldr	r3, [pc, #208]	@ (8000980 <MX_ADC1_Init+0xec>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_8B;
 80008b2:	4b33      	ldr	r3, [pc, #204]	@ (8000980 <MX_ADC1_Init+0xec>)
 80008b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80008b8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008ba:	4b31      	ldr	r3, [pc, #196]	@ (8000980 <MX_ADC1_Init+0xec>)
 80008bc:	2200      	movs	r2, #0
 80008be:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80008c0:	4b2f      	ldr	r3, [pc, #188]	@ (8000980 <MX_ADC1_Init+0xec>)
 80008c2:	2201      	movs	r2, #1
 80008c4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008c6:	4b2e      	ldr	r3, [pc, #184]	@ (8000980 <MX_ADC1_Init+0xec>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008ce:	4b2c      	ldr	r3, [pc, #176]	@ (8000980 <MX_ADC1_Init+0xec>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008d4:	4b2a      	ldr	r3, [pc, #168]	@ (8000980 <MX_ADC1_Init+0xec>)
 80008d6:	4a2c      	ldr	r2, [pc, #176]	@ (8000988 <MX_ADC1_Init+0xf4>)
 80008d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008da:	4b29      	ldr	r3, [pc, #164]	@ (8000980 <MX_ADC1_Init+0xec>)
 80008dc:	2200      	movs	r2, #0
 80008de:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 80008e0:	4b27      	ldr	r3, [pc, #156]	@ (8000980 <MX_ADC1_Init+0xec>)
 80008e2:	2204      	movs	r2, #4
 80008e4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008e6:	4b26      	ldr	r3, [pc, #152]	@ (8000980 <MX_ADC1_Init+0xec>)
 80008e8:	2200      	movs	r2, #0
 80008ea:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008ee:	4b24      	ldr	r3, [pc, #144]	@ (8000980 <MX_ADC1_Init+0xec>)
 80008f0:	2201      	movs	r2, #1
 80008f2:	615a      	str	r2, [r3, #20]
  //hadc1.Init.EOCSelection = EOC_SEQ_CONV;
  //hadc1.Init.EOCSelection = DISABLE;
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80008f4:	4822      	ldr	r0, [pc, #136]	@ (8000980 <MX_ADC1_Init+0xec>)
 80008f6:	f000 fa53 	bl	8000da0 <HAL_ADC_Init>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000900:	f000 f8d0 	bl	8000aa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000904:	2300      	movs	r3, #0
 8000906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000908:	2301      	movs	r3, #1
 800090a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800090c:	2300      	movs	r3, #0
 800090e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000910:	463b      	mov	r3, r7
 8000912:	4619      	mov	r1, r3
 8000914:	481a      	ldr	r0, [pc, #104]	@ (8000980 <MX_ADC1_Init+0xec>)
 8000916:	f000 fc07 	bl	8001128 <HAL_ADC_ConfigChannel>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000920:	f000 f8c0 	bl	8000aa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000924:	2301      	movs	r3, #1
 8000926:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000928:	2302      	movs	r3, #2
 800092a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800092c:	463b      	mov	r3, r7
 800092e:	4619      	mov	r1, r3
 8000930:	4813      	ldr	r0, [pc, #76]	@ (8000980 <MX_ADC1_Init+0xec>)
 8000932:	f000 fbf9 	bl	8001128 <HAL_ADC_ConfigChannel>
 8000936:	4603      	mov	r3, r0
 8000938:	2b00      	cmp	r3, #0
 800093a:	d001      	beq.n	8000940 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 800093c:	f000 f8b2 	bl	8000aa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000940:	2302      	movs	r3, #2
 8000942:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000944:	2303      	movs	r3, #3
 8000946:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000948:	463b      	mov	r3, r7
 800094a:	4619      	mov	r1, r3
 800094c:	480c      	ldr	r0, [pc, #48]	@ (8000980 <MX_ADC1_Init+0xec>)
 800094e:	f000 fbeb 	bl	8001128 <HAL_ADC_ConfigChannel>
 8000952:	4603      	mov	r3, r0
 8000954:	2b00      	cmp	r3, #0
 8000956:	d001      	beq.n	800095c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000958:	f000 f8a4 	bl	8000aa4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 800095c:	2303      	movs	r3, #3
 800095e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000960:	2304      	movs	r3, #4
 8000962:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000964:	463b      	mov	r3, r7
 8000966:	4619      	mov	r1, r3
 8000968:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_ADC1_Init+0xec>)
 800096a:	f000 fbdd 	bl	8001128 <HAL_ADC_ConfigChannel>
 800096e:	4603      	mov	r3, r0
 8000970:	2b00      	cmp	r3, #0
 8000972:	d001      	beq.n	8000978 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000974:	f000 f896 	bl	8000aa4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000978:	bf00      	nop
 800097a:	3710      	adds	r7, #16
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	200001e4 	.word	0x200001e4
 8000984:	40012000 	.word	0x40012000
 8000988:	0f000001 	.word	0x0f000001

0800098c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08a      	sub	sp, #40	@ 0x28
 8000990:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000992:	f107 0314 	add.w	r3, r7, #20
 8000996:	2200      	movs	r2, #0
 8000998:	601a      	str	r2, [r3, #0]
 800099a:	605a      	str	r2, [r3, #4]
 800099c:	609a      	str	r2, [r3, #8]
 800099e:	60da      	str	r2, [r3, #12]
 80009a0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009a2:	2300      	movs	r3, #0
 80009a4:	613b      	str	r3, [r7, #16]
 80009a6:	4b3b      	ldr	r3, [pc, #236]	@ (8000a94 <MX_GPIO_Init+0x108>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009aa:	4a3a      	ldr	r2, [pc, #232]	@ (8000a94 <MX_GPIO_Init+0x108>)
 80009ac:	f043 0304 	orr.w	r3, r3, #4
 80009b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b2:	4b38      	ldr	r3, [pc, #224]	@ (8000a94 <MX_GPIO_Init+0x108>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b6:	f003 0304 	and.w	r3, r3, #4
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	4b34      	ldr	r3, [pc, #208]	@ (8000a94 <MX_GPIO_Init+0x108>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c6:	4a33      	ldr	r2, [pc, #204]	@ (8000a94 <MX_GPIO_Init+0x108>)
 80009c8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009cc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ce:	4b31      	ldr	r3, [pc, #196]	@ (8000a94 <MX_GPIO_Init+0x108>)
 80009d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009d6:	60fb      	str	r3, [r7, #12]
 80009d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009da:	2300      	movs	r3, #0
 80009dc:	60bb      	str	r3, [r7, #8]
 80009de:	4b2d      	ldr	r3, [pc, #180]	@ (8000a94 <MX_GPIO_Init+0x108>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000a94 <MX_GPIO_Init+0x108>)
 80009e4:	f043 0301 	orr.w	r3, r3, #1
 80009e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ea:	4b2a      	ldr	r3, [pc, #168]	@ (8000a94 <MX_GPIO_Init+0x108>)
 80009ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ee:	f003 0301 	and.w	r3, r3, #1
 80009f2:	60bb      	str	r3, [r7, #8]
 80009f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009f6:	2300      	movs	r3, #0
 80009f8:	607b      	str	r3, [r7, #4]
 80009fa:	4b26      	ldr	r3, [pc, #152]	@ (8000a94 <MX_GPIO_Init+0x108>)
 80009fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009fe:	4a25      	ldr	r2, [pc, #148]	@ (8000a94 <MX_GPIO_Init+0x108>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a06:	4b23      	ldr	r3, [pc, #140]	@ (8000a94 <MX_GPIO_Init+0x108>)
 8000a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000a12:	2200      	movs	r2, #0
 8000a14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000a18:	481f      	ldr	r0, [pc, #124]	@ (8000a98 <MX_GPIO_Init+0x10c>)
 8000a1a:	f001 f851 	bl	8001ac0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a1e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a24:	2301      	movs	r3, #1
 8000a26:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a28:	2300      	movs	r3, #0
 8000a2a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a30:	f107 0314 	add.w	r3, r7, #20
 8000a34:	4619      	mov	r1, r3
 8000a36:	4818      	ldr	r0, [pc, #96]	@ (8000a98 <MX_GPIO_Init+0x10c>)
 8000a38:	f000 fea6 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a3c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000a40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a42:	2300      	movs	r3, #0
 8000a44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a46:	2301      	movs	r3, #1
 8000a48:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a4a:	f107 0314 	add.w	r3, r7, #20
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4811      	ldr	r0, [pc, #68]	@ (8000a98 <MX_GPIO_Init+0x10c>)
 8000a52:	f000 fe99 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA6 PA7 PA9 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_15|GPIO_PIN_4;
 8000a56:	f248 03d0 	movw	r3, #32976	@ 0x80d0
 8000a5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480c      	ldr	r0, [pc, #48]	@ (8000a9c <MX_GPIO_Init+0x110>)
 8000a6c:	f000 fe8c 	bl	8001788 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB10 PB12
                           PB13 PB14 PB5 PB6
                           PB7 PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_10|GPIO_PIN_12
 8000a70:	f24f 73e3 	movw	r3, #63459	@ 0xf7e3
 8000a74:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_5|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_15|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a76:	2300      	movs	r3, #0
 8000a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	4619      	mov	r1, r3
 8000a84:	4806      	ldr	r0, [pc, #24]	@ (8000aa0 <MX_GPIO_Init+0x114>)
 8000a86:	f000 fe7f 	bl	8001788 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3728      	adds	r7, #40	@ 0x28
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40023800 	.word	0x40023800
 8000a98:	40020800 	.word	0x40020800
 8000a9c:	40020000 	.word	0x40020000
 8000aa0:	40020400 	.word	0x40020400

08000aa4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000aa8:	b672      	cpsid	i
}
 8000aaa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000aac:	bf00      	nop
 8000aae:	e7fd      	b.n	8000aac <Error_Handler+0x8>

08000ab0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b083      	sub	sp, #12
 8000ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	607b      	str	r3, [r7, #4]
 8000aba:	4b10      	ldr	r3, [pc, #64]	@ (8000afc <HAL_MspInit+0x4c>)
 8000abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000abe:	4a0f      	ldr	r2, [pc, #60]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ac0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ac4:	6453      	str	r3, [r2, #68]	@ 0x44
 8000ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ac8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ace:	607b      	str	r3, [r7, #4]
 8000ad0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	603b      	str	r3, [r7, #0]
 8000ad6:	4b09      	ldr	r3, [pc, #36]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ada:	4a08      	ldr	r2, [pc, #32]	@ (8000afc <HAL_MspInit+0x4c>)
 8000adc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ae0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ae2:	4b06      	ldr	r3, [pc, #24]	@ (8000afc <HAL_MspInit+0x4c>)
 8000ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ae6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aee:	bf00      	nop
 8000af0:	370c      	adds	r7, #12
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	@ 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a17      	ldr	r2, [pc, #92]	@ (8000b7c <HAL_ADC_MspInit+0x7c>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d127      	bne.n	8000b72 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b16      	ldr	r3, [pc, #88]	@ (8000b80 <HAL_ADC_MspInit+0x80>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2a:	4a15      	ldr	r2, [pc, #84]	@ (8000b80 <HAL_ADC_MspInit+0x80>)
 8000b2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b32:	4b13      	ldr	r3, [pc, #76]	@ (8000b80 <HAL_ADC_MspInit+0x80>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b0f      	ldr	r3, [pc, #60]	@ (8000b80 <HAL_ADC_MspInit+0x80>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a0e      	ldr	r2, [pc, #56]	@ (8000b80 <HAL_ADC_MspInit+0x80>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8000b80 <HAL_ADC_MspInit+0x80>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b5a:	230f      	movs	r3, #15
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b5e:	2303      	movs	r3, #3
 8000b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4805      	ldr	r0, [pc, #20]	@ (8000b84 <HAL_ADC_MspInit+0x84>)
 8000b6e:	f000 fe0b 	bl	8001788 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b72:	bf00      	nop
 8000b74:	3728      	adds	r7, #40	@ 0x28
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40012000 	.word	0x40012000
 8000b80:	40023800 	.word	0x40023800
 8000b84:	40020000 	.word	0x40020000

08000b88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b88:	b480      	push	{r7}
 8000b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b8c:	bf00      	nop
 8000b8e:	e7fd      	b.n	8000b8c <NMI_Handler+0x4>

08000b90 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b94:	bf00      	nop
 8000b96:	e7fd      	b.n	8000b94 <HardFault_Handler+0x4>

08000b98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b9c:	bf00      	nop
 8000b9e:	e7fd      	b.n	8000b9c <MemManage_Handler+0x4>

08000ba0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ba4:	bf00      	nop
 8000ba6:	e7fd      	b.n	8000ba4 <BusFault_Handler+0x4>

08000ba8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bac:	bf00      	nop
 8000bae:	e7fd      	b.n	8000bac <UsageFault_Handler+0x4>

08000bb0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bbe:	b480      	push	{r7}
 8000bc0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc2:	bf00      	nop
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr

08000bcc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd0:	bf00      	nop
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr

08000bda <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bda:	b580      	push	{r7, lr}
 8000bdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bde:	f000 f89b 	bl	8000d18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	bd80      	pop	{r7, pc}
	...

08000be8 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bec:	4802      	ldr	r0, [pc, #8]	@ (8000bf8 <OTG_FS_IRQHandler+0x10>)
 8000bee:	f001 f8ea 	bl	8001dc6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bf2:	bf00      	nop
 8000bf4:	bd80      	pop	{r7, pc}
 8000bf6:	bf00      	nop
 8000bf8:	2000071c 	.word	0x2000071c

08000bfc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c00:	4b06      	ldr	r3, [pc, #24]	@ (8000c1c <SystemInit+0x20>)
 8000c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000c06:	4a05      	ldr	r2, [pc, #20]	@ (8000c1c <SystemInit+0x20>)
 8000c08:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000c0c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c10:	bf00      	nop
 8000c12:	46bd      	mov	sp, r7
 8000c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop
 8000c1c:	e000ed00 	.word	0xe000ed00

08000c20 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c58 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c24:	480d      	ldr	r0, [pc, #52]	@ (8000c5c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c26:	490e      	ldr	r1, [pc, #56]	@ (8000c60 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c28:	4a0e      	ldr	r2, [pc, #56]	@ (8000c64 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c2c:	e002      	b.n	8000c34 <LoopCopyDataInit>

08000c2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c32:	3304      	adds	r3, #4

08000c34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c38:	d3f9      	bcc.n	8000c2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000c68 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c3c:	4c0b      	ldr	r4, [pc, #44]	@ (8000c6c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c40:	e001      	b.n	8000c46 <LoopFillZerobss>

08000c42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c44:	3204      	adds	r2, #4

08000c46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c48:	d3fb      	bcc.n	8000c42 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c4a:	f7ff ffd7 	bl	8000bfc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f006 fd75 	bl	800773c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c52:	f7ff fc37 	bl	80004c4 <main>
  bx  lr    
 8000c56:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c58:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	200001c8 	.word	0x200001c8
  ldr r2, =_sidata
 8000c64:	0800780c 	.word	0x0800780c
  ldr r2, =_sbss
 8000c68:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8000c6c:	20000c70 	.word	0x20000c70

08000c70 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC_IRQHandler>
	...

08000c74 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c78:	4b0e      	ldr	r3, [pc, #56]	@ (8000cb4 <HAL_Init+0x40>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	4a0d      	ldr	r2, [pc, #52]	@ (8000cb4 <HAL_Init+0x40>)
 8000c7e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c82:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c84:	4b0b      	ldr	r3, [pc, #44]	@ (8000cb4 <HAL_Init+0x40>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4a0a      	ldr	r2, [pc, #40]	@ (8000cb4 <HAL_Init+0x40>)
 8000c8a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c8e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c90:	4b08      	ldr	r3, [pc, #32]	@ (8000cb4 <HAL_Init+0x40>)
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a07      	ldr	r2, [pc, #28]	@ (8000cb4 <HAL_Init+0x40>)
 8000c96:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c9a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c9c:	2003      	movs	r0, #3
 8000c9e:	f000 fd31 	bl	8001704 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ca2:	200f      	movs	r0, #15
 8000ca4:	f000 f808 	bl	8000cb8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ca8:	f7ff ff02 	bl	8000ab0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cac:	2300      	movs	r3, #0
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	40023c00 	.word	0x40023c00

08000cb8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cc0:	4b12      	ldr	r3, [pc, #72]	@ (8000d0c <HAL_InitTick+0x54>)
 8000cc2:	681a      	ldr	r2, [r3, #0]
 8000cc4:	4b12      	ldr	r3, [pc, #72]	@ (8000d10 <HAL_InitTick+0x58>)
 8000cc6:	781b      	ldrb	r3, [r3, #0]
 8000cc8:	4619      	mov	r1, r3
 8000cca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cce:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd6:	4618      	mov	r0, r3
 8000cd8:	f000 fd49 	bl	800176e <HAL_SYSTICK_Config>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
 8000ce4:	e00e      	b.n	8000d04 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	2b0f      	cmp	r3, #15
 8000cea:	d80a      	bhi.n	8000d02 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cec:	2200      	movs	r2, #0
 8000cee:	6879      	ldr	r1, [r7, #4]
 8000cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8000cf4:	f000 fd11 	bl	800171a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cf8:	4a06      	ldr	r2, [pc, #24]	@ (8000d14 <HAL_InitTick+0x5c>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	e000      	b.n	8000d04 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d02:	2301      	movs	r3, #1
}
 8000d04:	4618      	mov	r0, r3
 8000d06:	3708      	adds	r7, #8
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	bd80      	pop	{r7, pc}
 8000d0c:	20000078 	.word	0x20000078
 8000d10:	20000080 	.word	0x20000080
 8000d14:	2000007c 	.word	0x2000007c

08000d18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d1c:	4b06      	ldr	r3, [pc, #24]	@ (8000d38 <HAL_IncTick+0x20>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	461a      	mov	r2, r3
 8000d22:	4b06      	ldr	r3, [pc, #24]	@ (8000d3c <HAL_IncTick+0x24>)
 8000d24:	681b      	ldr	r3, [r3, #0]
 8000d26:	4413      	add	r3, r2
 8000d28:	4a04      	ldr	r2, [pc, #16]	@ (8000d3c <HAL_IncTick+0x24>)
 8000d2a:	6013      	str	r3, [r2, #0]
}
 8000d2c:	bf00      	nop
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000080 	.word	0x20000080
 8000d3c:	20000238 	.word	0x20000238

08000d40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  return uwTick;
 8000d44:	4b03      	ldr	r3, [pc, #12]	@ (8000d54 <HAL_GetTick+0x14>)
 8000d46:	681b      	ldr	r3, [r3, #0]
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	20000238 	.word	0x20000238

08000d58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b084      	sub	sp, #16
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d60:	f7ff ffee 	bl	8000d40 <HAL_GetTick>
 8000d64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d70:	d005      	beq.n	8000d7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d72:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <HAL_Delay+0x44>)
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	461a      	mov	r2, r3
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	4413      	add	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d7e:	bf00      	nop
 8000d80:	f7ff ffde 	bl	8000d40 <HAL_GetTick>
 8000d84:	4602      	mov	r2, r0
 8000d86:	68bb      	ldr	r3, [r7, #8]
 8000d88:	1ad3      	subs	r3, r2, r3
 8000d8a:	68fa      	ldr	r2, [r7, #12]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d8f7      	bhi.n	8000d80 <HAL_Delay+0x28>
  {
  }
}
 8000d90:	bf00      	nop
 8000d92:	bf00      	nop
 8000d94:	3710      	adds	r7, #16
 8000d96:	46bd      	mov	sp, r7
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000080 	.word	0x20000080

08000da0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000da8:	2300      	movs	r3, #0
 8000daa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d101      	bne.n	8000db6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000db2:	2301      	movs	r3, #1
 8000db4:	e033      	b.n	8000e1e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d109      	bne.n	8000dd2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f7ff fe9e 	bl	8000b00 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	2200      	movs	r2, #0
 8000dce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd6:	f003 0310 	and.w	r3, r3, #16
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d118      	bne.n	8000e10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000de6:	f023 0302 	bic.w	r3, r3, #2
 8000dea:	f043 0202 	orr.w	r2, r3, #2
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000df2:	6878      	ldr	r0, [r7, #4]
 8000df4:	f000 faba 	bl	800136c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e02:	f023 0303 	bic.w	r3, r3, #3
 8000e06:	f043 0201 	orr.w	r2, r3, #1
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e0e:	e001      	b.n	8000e14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e10:	2301      	movs	r3, #1
 8000e12:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	2200      	movs	r2, #0
 8000e18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e1e:	4618      	mov	r0, r3
 8000e20:	3710      	adds	r7, #16
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b085      	sub	sp, #20
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d101      	bne.n	8000e42 <HAL_ADC_Start+0x1a>
 8000e3e:	2302      	movs	r3, #2
 8000e40:	e097      	b.n	8000f72 <HAL_ADC_Start+0x14a>
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2201      	movs	r2, #1
 8000e46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	689b      	ldr	r3, [r3, #8]
 8000e50:	f003 0301 	and.w	r3, r3, #1
 8000e54:	2b01      	cmp	r3, #1
 8000e56:	d018      	beq.n	8000e8a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	689a      	ldr	r2, [r3, #8]
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	f042 0201 	orr.w	r2, r2, #1
 8000e66:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e68:	4b45      	ldr	r3, [pc, #276]	@ (8000f80 <HAL_ADC_Start+0x158>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	4a45      	ldr	r2, [pc, #276]	@ (8000f84 <HAL_ADC_Start+0x15c>)
 8000e6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000e72:	0c9a      	lsrs	r2, r3, #18
 8000e74:	4613      	mov	r3, r2
 8000e76:	005b      	lsls	r3, r3, #1
 8000e78:	4413      	add	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000e7c:	e002      	b.n	8000e84 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000e7e:	68bb      	ldr	r3, [r7, #8]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1f9      	bne.n	8000e7e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d15f      	bne.n	8000f58 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e9c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8000ea0:	f023 0301 	bic.w	r3, r3, #1
 8000ea4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d007      	beq.n	8000eca <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ebe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000ec2:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ece:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000ed6:	d106      	bne.n	8000ee6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000edc:	f023 0206 	bic.w	r2, r3, #6
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	645a      	str	r2, [r3, #68]	@ 0x44
 8000ee4:	e002      	b.n	8000eec <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	645a      	str	r2, [r3, #68]	@ 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ef4:	4b24      	ldr	r3, [pc, #144]	@ (8000f88 <HAL_ADC_Start+0x160>)
 8000ef6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8000f00:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f02:	68fb      	ldr	r3, [r7, #12]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	f003 031f 	and.w	r3, r3, #31
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d10f      	bne.n	8000f2e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	689b      	ldr	r3, [r3, #8]
 8000f14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d129      	bne.n	8000f70 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	689a      	ldr	r2, [r3, #8]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	e020      	b.n	8000f70 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a16      	ldr	r2, [pc, #88]	@ (8000f8c <HAL_ADC_Start+0x164>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d11b      	bne.n	8000f70 <HAL_ADC_Start+0x148>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d114      	bne.n	8000f70 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	689a      	ldr	r2, [r3, #8]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	e00b      	b.n	8000f70 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f5c:	f043 0210 	orr.w	r2, r3, #16
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f68:	f043 0201 	orr.w	r2, r3, #1
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	645a      	str	r2, [r3, #68]	@ 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000f70:	2300      	movs	r3, #0
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	3714      	adds	r7, #20
 8000f76:	46bd      	mov	sp, r7
 8000f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7c:	4770      	bx	lr
 8000f7e:	bf00      	nop
 8000f80:	20000078 	.word	0x20000078
 8000f84:	431bde83 	.word	0x431bde83
 8000f88:	40012300 	.word	0x40012300
 8000f8c:	40012000 	.word	0x40012000

08000f90 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8000f9e:	2b01      	cmp	r3, #1
 8000fa0:	d101      	bne.n	8000fa6 <HAL_ADC_Stop+0x16>
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	e021      	b.n	8000fea <HAL_ADC_Stop+0x5a>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	689a      	ldr	r2, [r3, #8]
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	f022 0201 	bic.w	r2, r2, #1
 8000fbc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	689b      	ldr	r3, [r3, #8]
 8000fc4:	f003 0301 	and.w	r3, r3, #1
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d109      	bne.n	8000fe0 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fd0:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000fd4:	f023 0301 	bic.w	r3, r3, #1
 8000fd8:	f043 0201 	orr.w	r2, r3, #1
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	4618      	mov	r0, r3
 8000fec:	370c      	adds	r7, #12
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff4:	4770      	bx	lr

08000ff6 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000ff6:	b580      	push	{r7, lr}
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	af00      	add	r7, sp, #0
 8000ffc:	6078      	str	r0, [r7, #4]
 8000ffe:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800100e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001012:	d113      	bne.n	800103c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800101e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001022:	d10b      	bne.n	800103c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001028:	f043 0220 	orr.w	r2, r3, #32
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	2200      	movs	r2, #0
 8001034:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    return HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	e063      	b.n	8001104 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800103c:	f7ff fe80 	bl	8000d40 <HAL_GetTick>
 8001040:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001042:	e021      	b.n	8001088 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800104a:	d01d      	beq.n	8001088 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	2b00      	cmp	r3, #0
 8001050:	d007      	beq.n	8001062 <HAL_ADC_PollForConversion+0x6c>
 8001052:	f7ff fe75 	bl	8000d40 <HAL_GetTick>
 8001056:	4602      	mov	r2, r0
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	1ad3      	subs	r3, r2, r3
 800105c:	683a      	ldr	r2, [r7, #0]
 800105e:	429a      	cmp	r2, r3
 8001060:	d212      	bcs.n	8001088 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f003 0302 	and.w	r3, r3, #2
 800106c:	2b02      	cmp	r3, #2
 800106e:	d00b      	beq.n	8001088 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001074:	f043 0204 	orr.w	r2, r3, #4
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	641a      	str	r2, [r3, #64]	@ 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
          
          return HAL_TIMEOUT;
 8001084:	2303      	movs	r3, #3
 8001086:	e03d      	b.n	8001104 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f003 0302 	and.w	r3, r3, #2
 8001092:	2b02      	cmp	r3, #2
 8001094:	d1d6      	bne.n	8001044 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f06f 0212 	mvn.w	r2, #18
 800109e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d123      	bne.n	8001102 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d11f      	bne.n	8001102 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80010c8:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d006      	beq.n	80010de <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d111      	bne.n	8001102 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d105      	bne.n	8001102 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010fa:	f043 0201 	orr.w	r2, r3, #1
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001102:	2300      	movs	r3, #0
}
 8001104:	4618      	mov	r0, r3
 8001106:	3710      	adds	r7, #16
 8001108:	46bd      	mov	sp, r7
 800110a:	bd80      	pop	{r7, pc}

0800110c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800111a:	4618      	mov	r0, r3
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001128:	b480      	push	{r7}
 800112a:	b085      	sub	sp, #20
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
 8001130:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001132:	2300      	movs	r3, #0
 8001134:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800113c:	2b01      	cmp	r3, #1
 800113e:	d101      	bne.n	8001144 <HAL_ADC_ConfigChannel+0x1c>
 8001140:	2302      	movs	r3, #2
 8001142:	e105      	b.n	8001350 <HAL_ADC_ConfigChannel+0x228>
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b09      	cmp	r3, #9
 8001152:	d925      	bls.n	80011a0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	68d9      	ldr	r1, [r3, #12]
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	b29b      	uxth	r3, r3
 8001160:	461a      	mov	r2, r3
 8001162:	4613      	mov	r3, r2
 8001164:	005b      	lsls	r3, r3, #1
 8001166:	4413      	add	r3, r2
 8001168:	3b1e      	subs	r3, #30
 800116a:	2207      	movs	r2, #7
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43da      	mvns	r2, r3
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	400a      	ands	r2, r1
 8001178:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	68d9      	ldr	r1, [r3, #12]
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	689a      	ldr	r2, [r3, #8]
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	b29b      	uxth	r3, r3
 800118a:	4618      	mov	r0, r3
 800118c:	4603      	mov	r3, r0
 800118e:	005b      	lsls	r3, r3, #1
 8001190:	4403      	add	r3, r0
 8001192:	3b1e      	subs	r3, #30
 8001194:	409a      	lsls	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	430a      	orrs	r2, r1
 800119c:	60da      	str	r2, [r3, #12]
 800119e:	e022      	b.n	80011e6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	6919      	ldr	r1, [r3, #16]
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	b29b      	uxth	r3, r3
 80011ac:	461a      	mov	r2, r3
 80011ae:	4613      	mov	r3, r2
 80011b0:	005b      	lsls	r3, r3, #1
 80011b2:	4413      	add	r3, r2
 80011b4:	2207      	movs	r2, #7
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43da      	mvns	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	400a      	ands	r2, r1
 80011c2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	6919      	ldr	r1, [r3, #16]
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	b29b      	uxth	r3, r3
 80011d4:	4618      	mov	r0, r3
 80011d6:	4603      	mov	r3, r0
 80011d8:	005b      	lsls	r3, r3, #1
 80011da:	4403      	add	r3, r0
 80011dc:	409a      	lsls	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	430a      	orrs	r2, r1
 80011e4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	685b      	ldr	r3, [r3, #4]
 80011ea:	2b06      	cmp	r3, #6
 80011ec:	d824      	bhi.n	8001238 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685a      	ldr	r2, [r3, #4]
 80011f8:	4613      	mov	r3, r2
 80011fa:	009b      	lsls	r3, r3, #2
 80011fc:	4413      	add	r3, r2
 80011fe:	3b05      	subs	r3, #5
 8001200:	221f      	movs	r2, #31
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43da      	mvns	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	400a      	ands	r2, r1
 800120e:	635a      	str	r2, [r3, #52]	@ 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	b29b      	uxth	r3, r3
 800121c:	4618      	mov	r0, r3
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	685a      	ldr	r2, [r3, #4]
 8001222:	4613      	mov	r3, r2
 8001224:	009b      	lsls	r3, r3, #2
 8001226:	4413      	add	r3, r2
 8001228:	3b05      	subs	r3, #5
 800122a:	fa00 f203 	lsl.w	r2, r0, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	430a      	orrs	r2, r1
 8001234:	635a      	str	r2, [r3, #52]	@ 0x34
 8001236:	e04c      	b.n	80012d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001238:	683b      	ldr	r3, [r7, #0]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b0c      	cmp	r3, #12
 800123e:	d824      	bhi.n	800128a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	4613      	mov	r3, r2
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	4413      	add	r3, r2
 8001250:	3b23      	subs	r3, #35	@ 0x23
 8001252:	221f      	movs	r2, #31
 8001254:	fa02 f303 	lsl.w	r3, r2, r3
 8001258:	43da      	mvns	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	400a      	ands	r2, r1
 8001260:	631a      	str	r2, [r3, #48]	@ 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	b29b      	uxth	r3, r3
 800126e:	4618      	mov	r0, r3
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	4613      	mov	r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4413      	add	r3, r2
 800127a:	3b23      	subs	r3, #35	@ 0x23
 800127c:	fa00 f203 	lsl.w	r2, r0, r3
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	430a      	orrs	r2, r1
 8001286:	631a      	str	r2, [r3, #48]	@ 0x30
 8001288:	e023      	b.n	80012d2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	685a      	ldr	r2, [r3, #4]
 8001294:	4613      	mov	r3, r2
 8001296:	009b      	lsls	r3, r3, #2
 8001298:	4413      	add	r3, r2
 800129a:	3b41      	subs	r3, #65	@ 0x41
 800129c:	221f      	movs	r2, #31
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	43da      	mvns	r2, r3
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	400a      	ands	r2, r1
 80012aa:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4618      	mov	r0, r3
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685a      	ldr	r2, [r3, #4]
 80012be:	4613      	mov	r3, r2
 80012c0:	009b      	lsls	r3, r3, #2
 80012c2:	4413      	add	r3, r2
 80012c4:	3b41      	subs	r3, #65	@ 0x41
 80012c6:	fa00 f203 	lsl.w	r2, r0, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	430a      	orrs	r2, r1
 80012d0:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80012d2:	4b22      	ldr	r3, [pc, #136]	@ (800135c <HAL_ADC_ConfigChannel+0x234>)
 80012d4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a21      	ldr	r2, [pc, #132]	@ (8001360 <HAL_ADC_ConfigChannel+0x238>)
 80012dc:	4293      	cmp	r3, r2
 80012de:	d109      	bne.n	80012f4 <HAL_ADC_ConfigChannel+0x1cc>
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	2b12      	cmp	r3, #18
 80012e6:	d105      	bne.n	80012f4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a19      	ldr	r2, [pc, #100]	@ (8001360 <HAL_ADC_ConfigChannel+0x238>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d123      	bne.n	8001346 <HAL_ADC_ConfigChannel+0x21e>
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b10      	cmp	r3, #16
 8001304:	d003      	beq.n	800130e <HAL_ADC_ConfigChannel+0x1e6>
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	2b11      	cmp	r3, #17
 800130c:	d11b      	bne.n	8001346 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001316:	68fb      	ldr	r3, [r7, #12]
 8001318:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	2b10      	cmp	r3, #16
 8001320:	d111      	bne.n	8001346 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001322:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <HAL_ADC_ConfigChannel+0x23c>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a10      	ldr	r2, [pc, #64]	@ (8001368 <HAL_ADC_ConfigChannel+0x240>)
 8001328:	fba2 2303 	umull	r2, r3, r2, r3
 800132c:	0c9a      	lsrs	r2, r3, #18
 800132e:	4613      	mov	r3, r2
 8001330:	009b      	lsls	r3, r3, #2
 8001332:	4413      	add	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001338:	e002      	b.n	8001340 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	3b01      	subs	r3, #1
 800133e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d1f9      	bne.n	800133a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return HAL_OK;
 800134e:	2300      	movs	r3, #0
}
 8001350:	4618      	mov	r0, r3
 8001352:	3714      	adds	r7, #20
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	40012300 	.word	0x40012300
 8001360:	40012000 	.word	0x40012000
 8001364:	20000078 	.word	0x20000078
 8001368:	431bde83 	.word	0x431bde83

0800136c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800136c:	b480      	push	{r7}
 800136e:	b085      	sub	sp, #20
 8001370:	af00      	add	r7, sp, #0
 8001372:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001374:	4b79      	ldr	r3, [pc, #484]	@ (800155c <ADC_Init+0x1f0>)
 8001376:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	685a      	ldr	r2, [r3, #4]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	431a      	orrs	r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	685a      	ldr	r2, [r3, #4]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80013a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6859      	ldr	r1, [r3, #4]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	691b      	ldr	r3, [r3, #16]
 80013ac:	021a      	lsls	r2, r3, #8
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 80013c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	6859      	ldr	r1, [r3, #4]
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	689a      	ldr	r2, [r3, #8]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	430a      	orrs	r2, r1
 80013d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	689a      	ldr	r2, [r3, #8]
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80013e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	6899      	ldr	r1, [r3, #8]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	68da      	ldr	r2, [r3, #12]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	430a      	orrs	r2, r1
 80013f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013fe:	4a58      	ldr	r2, [pc, #352]	@ (8001560 <ADC_Init+0x1f4>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d022      	beq.n	800144a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	689a      	ldr	r2, [r3, #8]
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001412:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6899      	ldr	r1, [r3, #8]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	689a      	ldr	r2, [r3, #8]
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001434:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	6899      	ldr	r1, [r3, #8]
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	609a      	str	r2, [r3, #8]
 8001448:	e00f      	b.n	800146a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	689a      	ldr	r2, [r3, #8]
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001458:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	689a      	ldr	r2, [r3, #8]
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001468:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	689a      	ldr	r2, [r3, #8]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f022 0202 	bic.w	r2, r2, #2
 8001478:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	6899      	ldr	r1, [r3, #8]
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	7e1b      	ldrb	r3, [r3, #24]
 8001484:	005a      	lsls	r2, r3, #1
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	430a      	orrs	r2, r1
 800148c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d01b      	beq.n	80014d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	685a      	ldr	r2, [r3, #4]
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80014a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 80014b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6859      	ldr	r1, [r3, #4]
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014c2:	3b01      	subs	r3, #1
 80014c4:	035a      	lsls	r2, r3, #13
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	605a      	str	r2, [r3, #4]
 80014ce:	e007      	b.n	80014e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	685a      	ldr	r2, [r3, #4]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80014de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 80014ee:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	69db      	ldr	r3, [r3, #28]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	051a      	lsls	r2, r3, #20
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	430a      	orrs	r2, r1
 8001504:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	689a      	ldr	r2, [r3, #8]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8001514:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	6899      	ldr	r1, [r3, #8]
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8001522:	025a      	lsls	r2, r3, #9
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	430a      	orrs	r2, r1
 800152a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800153a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	6899      	ldr	r1, [r3, #8]
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	029a      	lsls	r2, r3, #10
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	430a      	orrs	r2, r1
 800154e:	609a      	str	r2, [r3, #8]
}
 8001550:	bf00      	nop
 8001552:	3714      	adds	r7, #20
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	40012300 	.word	0x40012300
 8001560:	0f000001 	.word	0x0f000001

08001564 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001564:	b480      	push	{r7}
 8001566:	b085      	sub	sp, #20
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	f003 0307 	and.w	r3, r3, #7
 8001572:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001574:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001576:	68db      	ldr	r3, [r3, #12]
 8001578:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800157a:	68ba      	ldr	r2, [r7, #8]
 800157c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001580:	4013      	ands	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800158c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001590:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001594:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001596:	4a04      	ldr	r2, [pc, #16]	@ (80015a8 <__NVIC_SetPriorityGrouping+0x44>)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	60d3      	str	r3, [r2, #12]
}
 800159c:	bf00      	nop
 800159e:	3714      	adds	r7, #20
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr
 80015a8:	e000ed00 	.word	0xe000ed00

080015ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ac:	b480      	push	{r7}
 80015ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015b0:	4b04      	ldr	r3, [pc, #16]	@ (80015c4 <__NVIC_GetPriorityGrouping+0x18>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	0a1b      	lsrs	r3, r3, #8
 80015b6:	f003 0307 	and.w	r3, r3, #7
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr
 80015c4:	e000ed00 	.word	0xe000ed00

080015c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	4603      	mov	r3, r0
 80015d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	db0b      	blt.n	80015f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80015da:	79fb      	ldrb	r3, [r7, #7]
 80015dc:	f003 021f 	and.w	r2, r3, #31
 80015e0:	4907      	ldr	r1, [pc, #28]	@ (8001600 <__NVIC_EnableIRQ+0x38>)
 80015e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015e6:	095b      	lsrs	r3, r3, #5
 80015e8:	2001      	movs	r0, #1
 80015ea:	fa00 f202 	lsl.w	r2, r0, r2
 80015ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000e100 	.word	0xe000e100

08001604 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	6039      	str	r1, [r7, #0]
 800160e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001610:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001614:	2b00      	cmp	r3, #0
 8001616:	db0a      	blt.n	800162e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	b2da      	uxtb	r2, r3
 800161c:	490c      	ldr	r1, [pc, #48]	@ (8001650 <__NVIC_SetPriority+0x4c>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	0112      	lsls	r2, r2, #4
 8001624:	b2d2      	uxtb	r2, r2
 8001626:	440b      	add	r3, r1
 8001628:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800162c:	e00a      	b.n	8001644 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800162e:	683b      	ldr	r3, [r7, #0]
 8001630:	b2da      	uxtb	r2, r3
 8001632:	4908      	ldr	r1, [pc, #32]	@ (8001654 <__NVIC_SetPriority+0x50>)
 8001634:	79fb      	ldrb	r3, [r7, #7]
 8001636:	f003 030f 	and.w	r3, r3, #15
 800163a:	3b04      	subs	r3, #4
 800163c:	0112      	lsls	r2, r2, #4
 800163e:	b2d2      	uxtb	r2, r2
 8001640:	440b      	add	r3, r1
 8001642:	761a      	strb	r2, [r3, #24]
}
 8001644:	bf00      	nop
 8001646:	370c      	adds	r7, #12
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	e000e100 	.word	0xe000e100
 8001654:	e000ed00 	.word	0xe000ed00

08001658 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001658:	b480      	push	{r7}
 800165a:	b089      	sub	sp, #36	@ 0x24
 800165c:	af00      	add	r7, sp, #0
 800165e:	60f8      	str	r0, [r7, #12]
 8001660:	60b9      	str	r1, [r7, #8]
 8001662:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	f003 0307 	and.w	r3, r3, #7
 800166a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800166c:	69fb      	ldr	r3, [r7, #28]
 800166e:	f1c3 0307 	rsb	r3, r3, #7
 8001672:	2b04      	cmp	r3, #4
 8001674:	bf28      	it	cs
 8001676:	2304      	movcs	r3, #4
 8001678:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800167a:	69fb      	ldr	r3, [r7, #28]
 800167c:	3304      	adds	r3, #4
 800167e:	2b06      	cmp	r3, #6
 8001680:	d902      	bls.n	8001688 <NVIC_EncodePriority+0x30>
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	3b03      	subs	r3, #3
 8001686:	e000      	b.n	800168a <NVIC_EncodePriority+0x32>
 8001688:	2300      	movs	r3, #0
 800168a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800168c:	f04f 32ff 	mov.w	r2, #4294967295
 8001690:	69bb      	ldr	r3, [r7, #24]
 8001692:	fa02 f303 	lsl.w	r3, r2, r3
 8001696:	43da      	mvns	r2, r3
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	401a      	ands	r2, r3
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016a0:	f04f 31ff 	mov.w	r1, #4294967295
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa01 f303 	lsl.w	r3, r1, r3
 80016aa:	43d9      	mvns	r1, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016b0:	4313      	orrs	r3, r2
         );
}
 80016b2:	4618      	mov	r0, r3
 80016b4:	3724      	adds	r7, #36	@ 0x24
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	3b01      	subs	r3, #1
 80016cc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80016d0:	d301      	bcc.n	80016d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80016d2:	2301      	movs	r3, #1
 80016d4:	e00f      	b.n	80016f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80016d6:	4a0a      	ldr	r2, [pc, #40]	@ (8001700 <SysTick_Config+0x40>)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	3b01      	subs	r3, #1
 80016dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80016de:	210f      	movs	r1, #15
 80016e0:	f04f 30ff 	mov.w	r0, #4294967295
 80016e4:	f7ff ff8e 	bl	8001604 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80016e8:	4b05      	ldr	r3, [pc, #20]	@ (8001700 <SysTick_Config+0x40>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80016ee:	4b04      	ldr	r3, [pc, #16]	@ (8001700 <SysTick_Config+0x40>)
 80016f0:	2207      	movs	r2, #7
 80016f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3708      	adds	r7, #8
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	e000e010 	.word	0xe000e010

08001704 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b082      	sub	sp, #8
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800170c:	6878      	ldr	r0, [r7, #4]
 800170e:	f7ff ff29 	bl	8001564 <__NVIC_SetPriorityGrouping>
}
 8001712:	bf00      	nop
 8001714:	3708      	adds	r7, #8
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}

0800171a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800171a:	b580      	push	{r7, lr}
 800171c:	b086      	sub	sp, #24
 800171e:	af00      	add	r7, sp, #0
 8001720:	4603      	mov	r3, r0
 8001722:	60b9      	str	r1, [r7, #8]
 8001724:	607a      	str	r2, [r7, #4]
 8001726:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001728:	2300      	movs	r3, #0
 800172a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800172c:	f7ff ff3e 	bl	80015ac <__NVIC_GetPriorityGrouping>
 8001730:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001732:	687a      	ldr	r2, [r7, #4]
 8001734:	68b9      	ldr	r1, [r7, #8]
 8001736:	6978      	ldr	r0, [r7, #20]
 8001738:	f7ff ff8e 	bl	8001658 <NVIC_EncodePriority>
 800173c:	4602      	mov	r2, r0
 800173e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001742:	4611      	mov	r1, r2
 8001744:	4618      	mov	r0, r3
 8001746:	f7ff ff5d 	bl	8001604 <__NVIC_SetPriority>
}
 800174a:	bf00      	nop
 800174c:	3718      	adds	r7, #24
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}

08001752 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001752:	b580      	push	{r7, lr}
 8001754:	b082      	sub	sp, #8
 8001756:	af00      	add	r7, sp, #0
 8001758:	4603      	mov	r3, r0
 800175a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800175c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff31 	bl	80015c8 <__NVIC_EnableIRQ>
}
 8001766:	bf00      	nop
 8001768:	3708      	adds	r7, #8
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}

0800176e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800176e:	b580      	push	{r7, lr}
 8001770:	b082      	sub	sp, #8
 8001772:	af00      	add	r7, sp, #0
 8001774:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001776:	6878      	ldr	r0, [r7, #4]
 8001778:	f7ff ffa2 	bl	80016c0 <SysTick_Config>
 800177c:	4603      	mov	r3, r0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3708      	adds	r7, #8
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
	...

08001788 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001788:	b480      	push	{r7}
 800178a:	b089      	sub	sp, #36	@ 0x24
 800178c:	af00      	add	r7, sp, #0
 800178e:	6078      	str	r0, [r7, #4]
 8001790:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001796:	2300      	movs	r3, #0
 8001798:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800179a:	2300      	movs	r3, #0
 800179c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800179e:	2300      	movs	r3, #0
 80017a0:	61fb      	str	r3, [r7, #28]
 80017a2:	e159      	b.n	8001a58 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017a4:	2201      	movs	r2, #1
 80017a6:	69fb      	ldr	r3, [r7, #28]
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	697a      	ldr	r2, [r7, #20]
 80017b4:	4013      	ands	r3, r2
 80017b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017b8:	693a      	ldr	r2, [r7, #16]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	429a      	cmp	r2, r3
 80017be:	f040 8148 	bne.w	8001a52 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f003 0303 	and.w	r3, r3, #3
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d005      	beq.n	80017da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d130      	bne.n	800183c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689b      	ldr	r3, [r3, #8]
 80017de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	2203      	movs	r2, #3
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	005b      	lsls	r3, r3, #1
 80017fa:	fa02 f303 	lsl.w	r3, r2, r3
 80017fe:	69ba      	ldr	r2, [r7, #24]
 8001800:	4313      	orrs	r3, r2
 8001802:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	685b      	ldr	r3, [r3, #4]
 800180e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001810:	2201      	movs	r2, #1
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	fa02 f303 	lsl.w	r3, r2, r3
 8001818:	43db      	mvns	r3, r3
 800181a:	69ba      	ldr	r2, [r7, #24]
 800181c:	4013      	ands	r3, r2
 800181e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	685b      	ldr	r3, [r3, #4]
 8001824:	091b      	lsrs	r3, r3, #4
 8001826:	f003 0201 	and.w	r2, r3, #1
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	69ba      	ldr	r2, [r7, #24]
 8001832:	4313      	orrs	r3, r2
 8001834:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	2b03      	cmp	r3, #3
 8001846:	d017      	beq.n	8001878 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	005b      	lsls	r3, r3, #1
 8001852:	2203      	movs	r2, #3
 8001854:	fa02 f303 	lsl.w	r3, r2, r3
 8001858:	43db      	mvns	r3, r3
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4013      	ands	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001860:	683b      	ldr	r3, [r7, #0]
 8001862:	689a      	ldr	r2, [r3, #8]
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	005b      	lsls	r3, r3, #1
 8001868:	fa02 f303 	lsl.w	r3, r2, r3
 800186c:	69ba      	ldr	r2, [r7, #24]
 800186e:	4313      	orrs	r3, r2
 8001870:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001878:	683b      	ldr	r3, [r7, #0]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f003 0303 	and.w	r3, r3, #3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d123      	bne.n	80018cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	08da      	lsrs	r2, r3, #3
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	3208      	adds	r2, #8
 800188c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001890:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	f003 0307 	and.w	r3, r3, #7
 8001898:	009b      	lsls	r3, r3, #2
 800189a:	220f      	movs	r2, #15
 800189c:	fa02 f303 	lsl.w	r3, r2, r3
 80018a0:	43db      	mvns	r3, r3
 80018a2:	69ba      	ldr	r2, [r7, #24]
 80018a4:	4013      	ands	r3, r2
 80018a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	691a      	ldr	r2, [r3, #16]
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	f003 0307 	and.w	r3, r3, #7
 80018b2:	009b      	lsls	r3, r3, #2
 80018b4:	fa02 f303 	lsl.w	r3, r2, r3
 80018b8:	69ba      	ldr	r2, [r7, #24]
 80018ba:	4313      	orrs	r3, r2
 80018bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	08da      	lsrs	r2, r3, #3
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	3208      	adds	r2, #8
 80018c6:	69b9      	ldr	r1, [r7, #24]
 80018c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018d2:	69fb      	ldr	r3, [r7, #28]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4013      	ands	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	685b      	ldr	r3, [r3, #4]
 80018e8:	f003 0203 	and.w	r2, r3, #3
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	005b      	lsls	r3, r3, #1
 80018f0:	fa02 f303 	lsl.w	r3, r2, r3
 80018f4:	69ba      	ldr	r2, [r7, #24]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001900:	683b      	ldr	r3, [r7, #0]
 8001902:	685b      	ldr	r3, [r3, #4]
 8001904:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001908:	2b00      	cmp	r3, #0
 800190a:	f000 80a2 	beq.w	8001a52 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800190e:	2300      	movs	r3, #0
 8001910:	60fb      	str	r3, [r7, #12]
 8001912:	4b57      	ldr	r3, [pc, #348]	@ (8001a70 <HAL_GPIO_Init+0x2e8>)
 8001914:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001916:	4a56      	ldr	r2, [pc, #344]	@ (8001a70 <HAL_GPIO_Init+0x2e8>)
 8001918:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800191c:	6453      	str	r3, [r2, #68]	@ 0x44
 800191e:	4b54      	ldr	r3, [pc, #336]	@ (8001a70 <HAL_GPIO_Init+0x2e8>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001922:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001926:	60fb      	str	r3, [r7, #12]
 8001928:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800192a:	4a52      	ldr	r2, [pc, #328]	@ (8001a74 <HAL_GPIO_Init+0x2ec>)
 800192c:	69fb      	ldr	r3, [r7, #28]
 800192e:	089b      	lsrs	r3, r3, #2
 8001930:	3302      	adds	r3, #2
 8001932:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001936:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f003 0303 	and.w	r3, r3, #3
 800193e:	009b      	lsls	r3, r3, #2
 8001940:	220f      	movs	r2, #15
 8001942:	fa02 f303 	lsl.w	r3, r2, r3
 8001946:	43db      	mvns	r3, r3
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	4013      	ands	r3, r2
 800194c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a49      	ldr	r2, [pc, #292]	@ (8001a78 <HAL_GPIO_Init+0x2f0>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d019      	beq.n	800198a <HAL_GPIO_Init+0x202>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a48      	ldr	r2, [pc, #288]	@ (8001a7c <HAL_GPIO_Init+0x2f4>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d013      	beq.n	8001986 <HAL_GPIO_Init+0x1fe>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a47      	ldr	r2, [pc, #284]	@ (8001a80 <HAL_GPIO_Init+0x2f8>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d00d      	beq.n	8001982 <HAL_GPIO_Init+0x1fa>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a46      	ldr	r2, [pc, #280]	@ (8001a84 <HAL_GPIO_Init+0x2fc>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d007      	beq.n	800197e <HAL_GPIO_Init+0x1f6>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a45      	ldr	r2, [pc, #276]	@ (8001a88 <HAL_GPIO_Init+0x300>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d101      	bne.n	800197a <HAL_GPIO_Init+0x1f2>
 8001976:	2304      	movs	r3, #4
 8001978:	e008      	b.n	800198c <HAL_GPIO_Init+0x204>
 800197a:	2307      	movs	r3, #7
 800197c:	e006      	b.n	800198c <HAL_GPIO_Init+0x204>
 800197e:	2303      	movs	r3, #3
 8001980:	e004      	b.n	800198c <HAL_GPIO_Init+0x204>
 8001982:	2302      	movs	r3, #2
 8001984:	e002      	b.n	800198c <HAL_GPIO_Init+0x204>
 8001986:	2301      	movs	r3, #1
 8001988:	e000      	b.n	800198c <HAL_GPIO_Init+0x204>
 800198a:	2300      	movs	r3, #0
 800198c:	69fa      	ldr	r2, [r7, #28]
 800198e:	f002 0203 	and.w	r2, r2, #3
 8001992:	0092      	lsls	r2, r2, #2
 8001994:	4093      	lsls	r3, r2
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800199c:	4935      	ldr	r1, [pc, #212]	@ (8001a74 <HAL_GPIO_Init+0x2ec>)
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	089b      	lsrs	r3, r3, #2
 80019a2:	3302      	adds	r3, #2
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80019aa:	4b38      	ldr	r3, [pc, #224]	@ (8001a8c <HAL_GPIO_Init+0x304>)
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	43db      	mvns	r3, r3
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	4013      	ands	r3, r2
 80019b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d003      	beq.n	80019ce <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	693b      	ldr	r3, [r7, #16]
 80019ca:	4313      	orrs	r3, r2
 80019cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80019ce:	4a2f      	ldr	r2, [pc, #188]	@ (8001a8c <HAL_GPIO_Init+0x304>)
 80019d0:	69bb      	ldr	r3, [r7, #24]
 80019d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80019d4:	4b2d      	ldr	r3, [pc, #180]	@ (8001a8c <HAL_GPIO_Init+0x304>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019da:	693b      	ldr	r3, [r7, #16]
 80019dc:	43db      	mvns	r3, r3
 80019de:	69ba      	ldr	r2, [r7, #24]
 80019e0:	4013      	ands	r3, r2
 80019e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d003      	beq.n	80019f8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	4313      	orrs	r3, r2
 80019f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80019f8:	4a24      	ldr	r2, [pc, #144]	@ (8001a8c <HAL_GPIO_Init+0x304>)
 80019fa:	69bb      	ldr	r3, [r7, #24]
 80019fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019fe:	4b23      	ldr	r3, [pc, #140]	@ (8001a8c <HAL_GPIO_Init+0x304>)
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	43db      	mvns	r3, r3
 8001a08:	69ba      	ldr	r2, [r7, #24]
 8001a0a:	4013      	ands	r3, r2
 8001a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d003      	beq.n	8001a22 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001a1a:	69ba      	ldr	r2, [r7, #24]
 8001a1c:	693b      	ldr	r3, [r7, #16]
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a22:	4a1a      	ldr	r2, [pc, #104]	@ (8001a8c <HAL_GPIO_Init+0x304>)
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001a28:	4b18      	ldr	r3, [pc, #96]	@ (8001a8c <HAL_GPIO_Init+0x304>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a2e:	693b      	ldr	r3, [r7, #16]
 8001a30:	43db      	mvns	r3, r3
 8001a32:	69ba      	ldr	r2, [r7, #24]
 8001a34:	4013      	ands	r3, r2
 8001a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001a38:	683b      	ldr	r3, [r7, #0]
 8001a3a:	685b      	ldr	r3, [r3, #4]
 8001a3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d003      	beq.n	8001a4c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001a44:	69ba      	ldr	r2, [r7, #24]
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a4c:	4a0f      	ldr	r2, [pc, #60]	@ (8001a8c <HAL_GPIO_Init+0x304>)
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	3301      	adds	r3, #1
 8001a56:	61fb      	str	r3, [r7, #28]
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	2b0f      	cmp	r3, #15
 8001a5c:	f67f aea2 	bls.w	80017a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a60:	bf00      	nop
 8001a62:	bf00      	nop
 8001a64:	3724      	adds	r7, #36	@ 0x24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40013800 	.word	0x40013800
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	40020400 	.word	0x40020400
 8001a80:	40020800 	.word	0x40020800
 8001a84:	40020c00 	.word	0x40020c00
 8001a88:	40021000 	.word	0x40021000
 8001a8c:	40013c00 	.word	0x40013c00

08001a90 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
 8001a98:	460b      	mov	r3, r1
 8001a9a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	691a      	ldr	r2, [r3, #16]
 8001aa0:	887b      	ldrh	r3, [r7, #2]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d002      	beq.n	8001aae <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	73fb      	strb	r3, [r7, #15]
 8001aac:	e001      	b.n	8001ab2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ab2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr

08001ac0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
 8001ac8:	460b      	mov	r3, r1
 8001aca:	807b      	strh	r3, [r7, #2]
 8001acc:	4613      	mov	r3, r2
 8001ace:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ad0:	787b      	ldrb	r3, [r7, #1]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ad6:	887a      	ldrh	r2, [r7, #2]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001adc:	e003      	b.n	8001ae6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ade:	887b      	ldrh	r3, [r7, #2]
 8001ae0:	041a      	lsls	r2, r3, #16
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	619a      	str	r2, [r3, #24]
}
 8001ae6:	bf00      	nop
 8001ae8:	370c      	adds	r7, #12
 8001aea:	46bd      	mov	sp, r7
 8001aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af0:	4770      	bx	lr

08001af2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001af2:	b480      	push	{r7}
 8001af4:	b085      	sub	sp, #20
 8001af6:	af00      	add	r7, sp, #0
 8001af8:	6078      	str	r0, [r7, #4]
 8001afa:	460b      	mov	r3, r1
 8001afc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001b04:	887a      	ldrh	r2, [r7, #2]
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	4013      	ands	r3, r2
 8001b0a:	041a      	lsls	r2, r3, #16
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	43d9      	mvns	r1, r3
 8001b10:	887b      	ldrh	r3, [r7, #2]
 8001b12:	400b      	ands	r3, r1
 8001b14:	431a      	orrs	r2, r3
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	619a      	str	r2, [r3, #24]
}
 8001b1a:	bf00      	nop
 8001b1c:	3714      	adds	r7, #20
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr

08001b26 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001b26:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b28:	b08f      	sub	sp, #60	@ 0x3c
 8001b2a:	af0a      	add	r7, sp, #40	@ 0x28
 8001b2c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d101      	bne.n	8001b38 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	e10f      	b.n	8001d58 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f893 34bd 	ldrb.w	r3, [r3, #1213]	@ 0x4bd
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d106      	bne.n	8001b58 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f005 faf2 	bl	800713c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2203      	movs	r2, #3
 8001b5c:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001b60:	68bb      	ldr	r3, [r7, #8]
 8001b62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b64:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d102      	bne.n	8001b72 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4618      	mov	r0, r3
 8001b78:	f001 ff7f 	bl	8003a7a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	603b      	str	r3, [r7, #0]
 8001b82:	687e      	ldr	r6, [r7, #4]
 8001b84:	466d      	mov	r5, sp
 8001b86:	f106 0410 	add.w	r4, r6, #16
 8001b8a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b8c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b8e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b90:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b92:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001b96:	e885 0003 	stmia.w	r5, {r0, r1}
 8001b9a:	1d33      	adds	r3, r6, #4
 8001b9c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001b9e:	6838      	ldr	r0, [r7, #0]
 8001ba0:	f001 fe56 	bl	8003850 <USB_CoreInit>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d005      	beq.n	8001bb6 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2202      	movs	r2, #2
 8001bae:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e0d0      	b.n	8001d58 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	2100      	movs	r1, #0
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f001 ff6d 	bl	8003a9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	73fb      	strb	r3, [r7, #15]
 8001bc6:	e04a      	b.n	8001c5e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001bc8:	7bfa      	ldrb	r2, [r7, #15]
 8001bca:	6879      	ldr	r1, [r7, #4]
 8001bcc:	4613      	mov	r3, r2
 8001bce:	00db      	lsls	r3, r3, #3
 8001bd0:	4413      	add	r3, r2
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	333d      	adds	r3, #61	@ 0x3d
 8001bd8:	2201      	movs	r2, #1
 8001bda:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001bdc:	7bfa      	ldrb	r2, [r7, #15]
 8001bde:	6879      	ldr	r1, [r7, #4]
 8001be0:	4613      	mov	r3, r2
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	4413      	add	r3, r2
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	333c      	adds	r3, #60	@ 0x3c
 8001bec:	7bfa      	ldrb	r2, [r7, #15]
 8001bee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001bf0:	7bfa      	ldrb	r2, [r7, #15]
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
 8001bf4:	b298      	uxth	r0, r3
 8001bf6:	6879      	ldr	r1, [r7, #4]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	00db      	lsls	r3, r3, #3
 8001bfc:	4413      	add	r3, r2
 8001bfe:	009b      	lsls	r3, r3, #2
 8001c00:	440b      	add	r3, r1
 8001c02:	3344      	adds	r3, #68	@ 0x44
 8001c04:	4602      	mov	r2, r0
 8001c06:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001c08:	7bfa      	ldrb	r2, [r7, #15]
 8001c0a:	6879      	ldr	r1, [r7, #4]
 8001c0c:	4613      	mov	r3, r2
 8001c0e:	00db      	lsls	r3, r3, #3
 8001c10:	4413      	add	r3, r2
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	440b      	add	r3, r1
 8001c16:	3340      	adds	r3, #64	@ 0x40
 8001c18:	2200      	movs	r2, #0
 8001c1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001c1c:	7bfa      	ldrb	r2, [r7, #15]
 8001c1e:	6879      	ldr	r1, [r7, #4]
 8001c20:	4613      	mov	r3, r2
 8001c22:	00db      	lsls	r3, r3, #3
 8001c24:	4413      	add	r3, r2
 8001c26:	009b      	lsls	r3, r3, #2
 8001c28:	440b      	add	r3, r1
 8001c2a:	3348      	adds	r3, #72	@ 0x48
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001c30:	7bfa      	ldrb	r2, [r7, #15]
 8001c32:	6879      	ldr	r1, [r7, #4]
 8001c34:	4613      	mov	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	334c      	adds	r3, #76	@ 0x4c
 8001c40:	2200      	movs	r2, #0
 8001c42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001c44:	7bfa      	ldrb	r2, [r7, #15]
 8001c46:	6879      	ldr	r1, [r7, #4]
 8001c48:	4613      	mov	r3, r2
 8001c4a:	00db      	lsls	r3, r3, #3
 8001c4c:	4413      	add	r3, r2
 8001c4e:	009b      	lsls	r3, r3, #2
 8001c50:	440b      	add	r3, r1
 8001c52:	3354      	adds	r3, #84	@ 0x54
 8001c54:	2200      	movs	r2, #0
 8001c56:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c58:	7bfb      	ldrb	r3, [r7, #15]
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	73fb      	strb	r3, [r7, #15]
 8001c5e:	7bfa      	ldrb	r2, [r7, #15]
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d3af      	bcc.n	8001bc8 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c68:	2300      	movs	r3, #0
 8001c6a:	73fb      	strb	r3, [r7, #15]
 8001c6c:	e044      	b.n	8001cf8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001c6e:	7bfa      	ldrb	r2, [r7, #15]
 8001c70:	6879      	ldr	r1, [r7, #4]
 8001c72:	4613      	mov	r3, r2
 8001c74:	00db      	lsls	r3, r3, #3
 8001c76:	4413      	add	r3, r2
 8001c78:	009b      	lsls	r3, r3, #2
 8001c7a:	440b      	add	r3, r1
 8001c7c:	f203 237d 	addw	r3, r3, #637	@ 0x27d
 8001c80:	2200      	movs	r2, #0
 8001c82:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001c84:	7bfa      	ldrb	r2, [r7, #15]
 8001c86:	6879      	ldr	r1, [r7, #4]
 8001c88:	4613      	mov	r3, r2
 8001c8a:	00db      	lsls	r3, r3, #3
 8001c8c:	4413      	add	r3, r2
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	440b      	add	r3, r1
 8001c92:	f503 731f 	add.w	r3, r3, #636	@ 0x27c
 8001c96:	7bfa      	ldrb	r2, [r7, #15]
 8001c98:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001c9a:	7bfa      	ldrb	r2, [r7, #15]
 8001c9c:	6879      	ldr	r1, [r7, #4]
 8001c9e:	4613      	mov	r3, r2
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	009b      	lsls	r3, r3, #2
 8001ca6:	440b      	add	r3, r1
 8001ca8:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 8001cac:	2200      	movs	r2, #0
 8001cae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001cb0:	7bfa      	ldrb	r2, [r7, #15]
 8001cb2:	6879      	ldr	r1, [r7, #4]
 8001cb4:	4613      	mov	r3, r2
 8001cb6:	00db      	lsls	r3, r3, #3
 8001cb8:	4413      	add	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	440b      	add	r3, r1
 8001cbe:	f503 7322 	add.w	r3, r3, #648	@ 0x288
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001cc6:	7bfa      	ldrb	r2, [r7, #15]
 8001cc8:	6879      	ldr	r1, [r7, #4]
 8001cca:	4613      	mov	r3, r2
 8001ccc:	00db      	lsls	r3, r3, #3
 8001cce:	4413      	add	r3, r2
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	440b      	add	r3, r1
 8001cd4:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001cdc:	7bfa      	ldrb	r2, [r7, #15]
 8001cde:	6879      	ldr	r1, [r7, #4]
 8001ce0:	4613      	mov	r3, r2
 8001ce2:	00db      	lsls	r3, r3, #3
 8001ce4:	4413      	add	r3, r2
 8001ce6:	009b      	lsls	r3, r3, #2
 8001ce8:	440b      	add	r3, r1
 8001cea:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8001cee:	2200      	movs	r2, #0
 8001cf0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001cf2:	7bfb      	ldrb	r3, [r7, #15]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	73fb      	strb	r3, [r7, #15]
 8001cf8:	7bfa      	ldrb	r2, [r7, #15]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	429a      	cmp	r2, r3
 8001d00:	d3b5      	bcc.n	8001c6e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	603b      	str	r3, [r7, #0]
 8001d08:	687e      	ldr	r6, [r7, #4]
 8001d0a:	466d      	mov	r5, sp
 8001d0c:	f106 0410 	add.w	r4, r6, #16
 8001d10:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d12:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d14:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d16:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001d18:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001d1c:	e885 0003 	stmia.w	r5, {r0, r1}
 8001d20:	1d33      	adds	r3, r6, #4
 8001d22:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001d24:	6838      	ldr	r0, [r7, #0]
 8001d26:	f001 ff05 	bl	8003b34 <USB_DevInit>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d005      	beq.n	8001d3c <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2202      	movs	r2, #2
 8001d34:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
    return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e00d      	b.n	8001d58 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2200      	movs	r2, #0
 8001d40:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	2201      	movs	r2, #1
 8001d48:	f883 24bd 	strb.w	r2, [r3, #1213]	@ 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4618      	mov	r0, r3
 8001d52:	f003 f854 	bl	8004dfe <USB_DevDisconnect>

  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3714      	adds	r7, #20
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001d60 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b084      	sub	sp, #16
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8001d74:	2b01      	cmp	r3, #1
 8001d76:	d101      	bne.n	8001d7c <HAL_PCD_Start+0x1c>
 8001d78:	2302      	movs	r3, #2
 8001d7a:	e020      	b.n	8001dbe <HAL_PCD_Start+0x5e>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2201      	movs	r2, #1
 8001d80:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d109      	bne.n	8001da0 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d005      	beq.n	8001da0 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001d98:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f001 fe57 	bl	8003a58 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4618      	mov	r0, r3
 8001db0:	f003 f804 	bl	8004dbc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2200      	movs	r2, #0
 8001db8:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8001dbc:	2300      	movs	r3, #0
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001dc6:	b590      	push	{r4, r7, lr}
 8001dc8:	b08d      	sub	sp, #52	@ 0x34
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001dd4:	6a3b      	ldr	r3, [r7, #32]
 8001dd6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f003 f8c2 	bl	8004f66 <USB_GetMode>
 8001de2:	4603      	mov	r3, r0
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	f040 848a 	bne.w	80026fe <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f003 f826 	bl	8004e40 <USB_ReadInterrupts>
 8001df4:	4603      	mov	r3, r0
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 8480 	beq.w	80026fc <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001dfc:	69fb      	ldr	r3, [r7, #28]
 8001dfe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	0a1b      	lsrs	r3, r3, #8
 8001e06:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f8c3 24fc 	str.w	r2, [r3, #1276]	@ 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4618      	mov	r0, r3
 8001e16:	f003 f813 	bl	8004e40 <USB_ReadInterrupts>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d107      	bne.n	8001e34 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	695a      	ldr	r2, [r3, #20]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f002 0202 	and.w	r2, r2, #2
 8001e32:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f003 f801 	bl	8004e40 <USB_ReadInterrupts>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	f003 0310 	and.w	r3, r3, #16
 8001e44:	2b10      	cmp	r3, #16
 8001e46:	d161      	bne.n	8001f0c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699a      	ldr	r2, [r3, #24]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f022 0210 	bic.w	r2, r2, #16
 8001e56:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001e58:	6a3b      	ldr	r3, [r7, #32]
 8001e5a:	6a1b      	ldr	r3, [r3, #32]
 8001e5c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	f003 020f 	and.w	r2, r3, #15
 8001e64:	4613      	mov	r3, r2
 8001e66:	00db      	lsls	r3, r3, #3
 8001e68:	4413      	add	r3, r2
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8001e70:	687a      	ldr	r2, [r7, #4]
 8001e72:	4413      	add	r3, r2
 8001e74:	3304      	adds	r3, #4
 8001e76:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	0c5b      	lsrs	r3, r3, #17
 8001e7c:	f003 030f 	and.w	r3, r3, #15
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d124      	bne.n	8001ece <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001e84:	69ba      	ldr	r2, [r7, #24]
 8001e86:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8001e8a:	4013      	ands	r3, r2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d035      	beq.n	8001efc <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	091b      	lsrs	r3, r3, #4
 8001e98:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001e9a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e9e:	b29b      	uxth	r3, r3
 8001ea0:	461a      	mov	r2, r3
 8001ea2:	6a38      	ldr	r0, [r7, #32]
 8001ea4:	f002 fe38 	bl	8004b18 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	691a      	ldr	r2, [r3, #16]
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	091b      	lsrs	r3, r3, #4
 8001eb0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001eb4:	441a      	add	r2, r3
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001eba:	697b      	ldr	r3, [r7, #20]
 8001ebc:	6a1a      	ldr	r2, [r3, #32]
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	091b      	lsrs	r3, r3, #4
 8001ec2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ec6:	441a      	add	r2, r3
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	621a      	str	r2, [r3, #32]
 8001ecc:	e016      	b.n	8001efc <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	0c5b      	lsrs	r3, r3, #17
 8001ed2:	f003 030f 	and.w	r3, r3, #15
 8001ed6:	2b06      	cmp	r3, #6
 8001ed8:	d110      	bne.n	8001efc <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8001ee0:	2208      	movs	r2, #8
 8001ee2:	4619      	mov	r1, r3
 8001ee4:	6a38      	ldr	r0, [r7, #32]
 8001ee6:	f002 fe17 	bl	8004b18 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	6a1a      	ldr	r2, [r3, #32]
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	091b      	lsrs	r3, r3, #4
 8001ef2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001ef6:	441a      	add	r2, r3
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	699a      	ldr	r2, [r3, #24]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0210 	orr.w	r2, r2, #16
 8001f0a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4618      	mov	r0, r3
 8001f12:	f002 ff95 	bl	8004e40 <USB_ReadInterrupts>
 8001f16:	4603      	mov	r3, r0
 8001f18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001f1c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001f20:	f040 80a7 	bne.w	8002072 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001f24:	2300      	movs	r3, #0
 8001f26:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f002 ff9a 	bl	8004e66 <USB_ReadDevAllOutEpInterrupt>
 8001f32:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001f34:	e099      	b.n	800206a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001f36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001f38:	f003 0301 	and.w	r3, r3, #1
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f000 808e 	beq.w	800205e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001f48:	b2d2      	uxtb	r2, r2
 8001f4a:	4611      	mov	r1, r2
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f002 ffbe 	bl	8004ece <USB_ReadDevOutEPInterrupt>
 8001f52:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	f003 0301 	and.w	r3, r3, #1
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00c      	beq.n	8001f78 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	015a      	lsls	r2, r3, #5
 8001f62:	69fb      	ldr	r3, [r7, #28]
 8001f64:	4413      	add	r3, r2
 8001f66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f6a:	461a      	mov	r2, r3
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001f70:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f72:	6878      	ldr	r0, [r7, #4]
 8001f74:	f000 feaa 	bl	8002ccc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d00c      	beq.n	8001f9c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001f8e:	461a      	mov	r2, r3
 8001f90:	2308      	movs	r3, #8
 8001f92:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001f94:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 ff80 	bl	8002e9c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	f003 0310 	and.w	r3, r3, #16
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d008      	beq.n	8001fb8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001fa6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa8:	015a      	lsls	r2, r3, #5
 8001faa:	69fb      	ldr	r3, [r7, #28]
 8001fac:	4413      	add	r3, r2
 8001fae:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001fb2:	461a      	mov	r2, r3
 8001fb4:	2310      	movs	r3, #16
 8001fb6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001fb8:	693b      	ldr	r3, [r7, #16]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d030      	beq.n	8002024 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001fc2:	6a3b      	ldr	r3, [r7, #32]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fca:	2b80      	cmp	r3, #128	@ 0x80
 8001fcc:	d109      	bne.n	8001fe2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001fd4:	685b      	ldr	r3, [r3, #4]
 8001fd6:	69fa      	ldr	r2, [r7, #28]
 8001fd8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001fdc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001fe0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001fe2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001fe4:	4613      	mov	r3, r2
 8001fe6:	00db      	lsls	r3, r3, #3
 8001fe8:	4413      	add	r3, r2
 8001fea:	009b      	lsls	r3, r3, #2
 8001fec:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	4413      	add	r3, r2
 8001ff4:	3304      	adds	r3, #4
 8001ff6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	78db      	ldrb	r3, [r3, #3]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d108      	bne.n	8002012 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	2200      	movs	r2, #0
 8002004:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	b2db      	uxtb	r3, r3
 800200a:	4619      	mov	r1, r3
 800200c:	6878      	ldr	r0, [r7, #4]
 800200e:	f005 f991 	bl	8007334 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002012:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002014:	015a      	lsls	r2, r3, #5
 8002016:	69fb      	ldr	r3, [r7, #28]
 8002018:	4413      	add	r3, r2
 800201a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800201e:	461a      	mov	r2, r3
 8002020:	2302      	movs	r3, #2
 8002022:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	f003 0320 	and.w	r3, r3, #32
 800202a:	2b00      	cmp	r3, #0
 800202c:	d008      	beq.n	8002040 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800202e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002030:	015a      	lsls	r2, r3, #5
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	4413      	add	r3, r2
 8002036:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800203a:	461a      	mov	r2, r3
 800203c:	2320      	movs	r3, #32
 800203e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002046:	2b00      	cmp	r3, #0
 8002048:	d009      	beq.n	800205e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800204a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800204c:	015a      	lsls	r2, r3, #5
 800204e:	69fb      	ldr	r3, [r7, #28]
 8002050:	4413      	add	r3, r2
 8002052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002056:	461a      	mov	r2, r3
 8002058:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800205c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800205e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002060:	3301      	adds	r3, #1
 8002062:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002064:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002066:	085b      	lsrs	r3, r3, #1
 8002068:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800206a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800206c:	2b00      	cmp	r3, #0
 800206e:	f47f af62 	bne.w	8001f36 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4618      	mov	r0, r3
 8002078:	f002 fee2 	bl	8004e40 <USB_ReadInterrupts>
 800207c:	4603      	mov	r3, r0
 800207e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002082:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002086:	f040 80db 	bne.w	8002240 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f002 ff03 	bl	8004e9a <USB_ReadDevAllInEpInterrupt>
 8002094:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8002096:	2300      	movs	r3, #0
 8002098:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800209a:	e0cd      	b.n	8002238 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800209c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800209e:	f003 0301 	and.w	r3, r3, #1
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	f000 80c2 	beq.w	800222c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020ae:	b2d2      	uxtb	r2, r2
 80020b0:	4611      	mov	r1, r2
 80020b2:	4618      	mov	r0, r3
 80020b4:	f002 ff29 	bl	8004f0a <USB_ReadDevInEPInterrupt>
 80020b8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	f003 0301 	and.w	r3, r3, #1
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d057      	beq.n	8002174 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80020c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020c6:	f003 030f 	and.w	r3, r3, #15
 80020ca:	2201      	movs	r2, #1
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80020d2:	69fb      	ldr	r3, [r7, #28]
 80020d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80020d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	43db      	mvns	r3, r3
 80020de:	69f9      	ldr	r1, [r7, #28]
 80020e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80020e4:	4013      	ands	r3, r2
 80020e6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80020e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ea:	015a      	lsls	r2, r3, #5
 80020ec:	69fb      	ldr	r3, [r7, #28]
 80020ee:	4413      	add	r3, r2
 80020f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80020f4:	461a      	mov	r2, r3
 80020f6:	2301      	movs	r3, #1
 80020f8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	691b      	ldr	r3, [r3, #16]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d132      	bne.n	8002168 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002102:	6879      	ldr	r1, [r7, #4]
 8002104:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002106:	4613      	mov	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	4413      	add	r3, r2
 800210c:	009b      	lsls	r3, r3, #2
 800210e:	440b      	add	r3, r1
 8002110:	334c      	adds	r3, #76	@ 0x4c
 8002112:	6819      	ldr	r1, [r3, #0]
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	4403      	add	r3, r0
 8002122:	3348      	adds	r3, #72	@ 0x48
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4419      	add	r1, r3
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	4403      	add	r3, r0
 8002136:	334c      	adds	r3, #76	@ 0x4c
 8002138:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800213a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800213c:	2b00      	cmp	r3, #0
 800213e:	d113      	bne.n	8002168 <HAL_PCD_IRQHandler+0x3a2>
 8002140:	6879      	ldr	r1, [r7, #4]
 8002142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002144:	4613      	mov	r3, r2
 8002146:	00db      	lsls	r3, r3, #3
 8002148:	4413      	add	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	440b      	add	r3, r1
 800214e:	3354      	adds	r3, #84	@ 0x54
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d108      	bne.n	8002168 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6818      	ldr	r0, [r3, #0]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002160:	461a      	mov	r2, r3
 8002162:	2101      	movs	r1, #1
 8002164:	f002 ff30 	bl	8004fc8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800216a:	b2db      	uxtb	r3, r3
 800216c:	4619      	mov	r1, r3
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	f005 f865 	bl	800723e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	f003 0308 	and.w	r3, r3, #8
 800217a:	2b00      	cmp	r3, #0
 800217c:	d008      	beq.n	8002190 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800217e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002180:	015a      	lsls	r2, r3, #5
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	4413      	add	r3, r2
 8002186:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800218a:	461a      	mov	r2, r3
 800218c:	2308      	movs	r3, #8
 800218e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	2b00      	cmp	r3, #0
 8002198:	d008      	beq.n	80021ac <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	015a      	lsls	r2, r3, #5
 800219e:	69fb      	ldr	r3, [r7, #28]
 80021a0:	4413      	add	r3, r2
 80021a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021a6:	461a      	mov	r2, r3
 80021a8:	2310      	movs	r3, #16
 80021aa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d008      	beq.n	80021c8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80021b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b8:	015a      	lsls	r2, r3, #5
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	4413      	add	r3, r2
 80021be:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80021c2:	461a      	mov	r2, r3
 80021c4:	2340      	movs	r3, #64	@ 0x40
 80021c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	f003 0302 	and.w	r3, r3, #2
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d023      	beq.n	800221a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80021d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80021d4:	6a38      	ldr	r0, [r7, #32]
 80021d6:	f001 fe11 	bl	8003dfc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80021da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021dc:	4613      	mov	r3, r2
 80021de:	00db      	lsls	r3, r3, #3
 80021e0:	4413      	add	r3, r2
 80021e2:	009b      	lsls	r3, r3, #2
 80021e4:	3338      	adds	r3, #56	@ 0x38
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	4413      	add	r3, r2
 80021ea:	3304      	adds	r3, #4
 80021ec:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80021ee:	697b      	ldr	r3, [r7, #20]
 80021f0:	78db      	ldrb	r3, [r3, #3]
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d108      	bne.n	8002208 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	2200      	movs	r2, #0
 80021fa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80021fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021fe:	b2db      	uxtb	r3, r3
 8002200:	4619      	mov	r1, r3
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f005 f8a8 	bl	8007358 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002208:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800220a:	015a      	lsls	r2, r3, #5
 800220c:	69fb      	ldr	r3, [r7, #28]
 800220e:	4413      	add	r3, r2
 8002210:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002214:	461a      	mov	r2, r3
 8002216:	2302      	movs	r3, #2
 8002218:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002220:	2b00      	cmp	r3, #0
 8002222:	d003      	beq.n	800222c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002224:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8002226:	6878      	ldr	r0, [r7, #4]
 8002228:	f000 fcc3 	bl	8002bb2 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800222c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800222e:	3301      	adds	r3, #1
 8002230:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8002232:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002234:	085b      	lsrs	r3, r3, #1
 8002236:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8002238:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800223a:	2b00      	cmp	r3, #0
 800223c:	f47f af2e 	bne.w	800209c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	f002 fdfb 	bl	8004e40 <USB_ReadInterrupts>
 800224a:	4603      	mov	r3, r0
 800224c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8002250:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002254:	d122      	bne.n	800229c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800225c:	685b      	ldr	r3, [r3, #4]
 800225e:	69fa      	ldr	r2, [r7, #28]
 8002260:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002264:	f023 0301 	bic.w	r3, r3, #1
 8002268:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	@ 0x4f4
 8002270:	2b01      	cmp	r3, #1
 8002272:	d108      	bne.n	8002286 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 24f4 	strb.w	r2, [r3, #1268]	@ 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800227c:	2100      	movs	r1, #0
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f000 feaa 	bl	8002fd8 <HAL_PCDEx_LPM_Callback>
 8002284:	e002      	b.n	800228c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f005 f846 	bl	8007318 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800229a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f002 fdcd 	bl	8004e40 <USB_ReadInterrupts>
 80022a6:	4603      	mov	r3, r0
 80022a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80022ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80022b0:	d112      	bne.n	80022d8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022b8:	689b      	ldr	r3, [r3, #8]
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d102      	bne.n	80022c8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f005 f802 	bl	80072cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	695a      	ldr	r2, [r3, #20]
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80022d6:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4618      	mov	r0, r3
 80022de:	f002 fdaf 	bl	8004e40 <USB_ReadInterrupts>
 80022e2:	4603      	mov	r3, r0
 80022e4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80022e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80022ec:	f040 80b7 	bne.w	800245e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	69fa      	ldr	r2, [r7, #28]
 80022fa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80022fe:	f023 0301 	bic.w	r3, r3, #1
 8002302:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2110      	movs	r1, #16
 800230a:	4618      	mov	r0, r3
 800230c:	f001 fd76 	bl	8003dfc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002310:	2300      	movs	r3, #0
 8002312:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002314:	e046      	b.n	80023a4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002318:	015a      	lsls	r2, r3, #5
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	4413      	add	r3, r2
 800231e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002322:	461a      	mov	r2, r3
 8002324:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8002328:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800232a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800232c:	015a      	lsls	r2, r3, #5
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	4413      	add	r3, r2
 8002332:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800233a:	0151      	lsls	r1, r2, #5
 800233c:	69fa      	ldr	r2, [r7, #28]
 800233e:	440a      	add	r2, r1
 8002340:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8002344:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8002348:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800234a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800234c:	015a      	lsls	r2, r3, #5
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	4413      	add	r3, r2
 8002352:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002356:	461a      	mov	r2, r3
 8002358:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800235c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800235e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002360:	015a      	lsls	r2, r3, #5
 8002362:	69fb      	ldr	r3, [r7, #28]
 8002364:	4413      	add	r3, r2
 8002366:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800236e:	0151      	lsls	r1, r2, #5
 8002370:	69fa      	ldr	r2, [r7, #28]
 8002372:	440a      	add	r2, r1
 8002374:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002378:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800237c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800237e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002380:	015a      	lsls	r2, r3, #5
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	4413      	add	r3, r2
 8002386:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800238e:	0151      	lsls	r1, r2, #5
 8002390:	69fa      	ldr	r2, [r7, #28]
 8002392:	440a      	add	r2, r1
 8002394:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8002398:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800239c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800239e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80023a0:	3301      	adds	r3, #1
 80023a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d3b3      	bcc.n	8002316 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023b4:	69db      	ldr	r3, [r3, #28]
 80023b6:	69fa      	ldr	r2, [r7, #28]
 80023b8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023bc:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80023c0:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d016      	beq.n	80023f8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023d4:	69fa      	ldr	r2, [r7, #28]
 80023d6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023da:	f043 030b 	orr.w	r3, r3, #11
 80023de:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ea:	69fa      	ldr	r2, [r7, #28]
 80023ec:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80023f0:	f043 030b 	orr.w	r3, r3, #11
 80023f4:	6453      	str	r3, [r2, #68]	@ 0x44
 80023f6:	e015      	b.n	8002424 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80023fe:	695b      	ldr	r3, [r3, #20]
 8002400:	69fa      	ldr	r2, [r7, #28]
 8002402:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002406:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800240a:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 800240e:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002410:	69fb      	ldr	r3, [r7, #28]
 8002412:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	69fa      	ldr	r2, [r7, #28]
 800241a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800241e:	f043 030b 	orr.w	r3, r3, #11
 8002422:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002424:	69fb      	ldr	r3, [r7, #28]
 8002426:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	69fa      	ldr	r2, [r7, #28]
 800242e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8002432:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8002436:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6818      	ldr	r0, [r3, #0]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	691b      	ldr	r3, [r3, #16]
 8002440:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002448:	461a      	mov	r2, r3
 800244a:	f002 fdbd 	bl	8004fc8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	695a      	ldr	r2, [r3, #20]
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800245c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f002 fcec 	bl	8004e40 <USB_ReadInterrupts>
 8002468:	4603      	mov	r3, r0
 800246a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800246e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002472:	d124      	bne.n	80024be <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4618      	mov	r0, r3
 800247a:	f002 fd82 	bl	8004f82 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f001 fd37 	bl	8003ef6 <USB_GetDevSpeed>
 8002488:	4603      	mov	r3, r0
 800248a:	461a      	mov	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681c      	ldr	r4, [r3, #0]
 8002494:	f001 f9d0 	bl	8003838 <HAL_RCC_GetHCLKFreq>
 8002498:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	461a      	mov	r2, r3
 80024a2:	4620      	mov	r0, r4
 80024a4:	f001 fa36 	bl	8003914 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	f004 fef0 	bl	800728e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	695a      	ldr	r2, [r3, #20]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80024bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4618      	mov	r0, r3
 80024c4:	f002 fcbc 	bl	8004e40 <USB_ReadInterrupts>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f003 0308 	and.w	r3, r3, #8
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d10a      	bne.n	80024e8 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f004 fecd 	bl	8007272 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	695a      	ldr	r2, [r3, #20]
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f002 0208 	and.w	r2, r2, #8
 80024e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4618      	mov	r0, r3
 80024ee:	f002 fca7 	bl	8004e40 <USB_ReadInterrupts>
 80024f2:	4603      	mov	r3, r0
 80024f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80024f8:	2b80      	cmp	r3, #128	@ 0x80
 80024fa:	d122      	bne.n	8002542 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80024fc:	6a3b      	ldr	r3, [r7, #32]
 80024fe:	699b      	ldr	r3, [r3, #24]
 8002500:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002504:	6a3b      	ldr	r3, [r7, #32]
 8002506:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002508:	2301      	movs	r3, #1
 800250a:	627b      	str	r3, [r7, #36]	@ 0x24
 800250c:	e014      	b.n	8002538 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800250e:	6879      	ldr	r1, [r7, #4]
 8002510:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002512:	4613      	mov	r3, r2
 8002514:	00db      	lsls	r3, r3, #3
 8002516:	4413      	add	r3, r2
 8002518:	009b      	lsls	r3, r3, #2
 800251a:	440b      	add	r3, r1
 800251c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8002520:	781b      	ldrb	r3, [r3, #0]
 8002522:	2b01      	cmp	r3, #1
 8002524:	d105      	bne.n	8002532 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002528:	b2db      	uxtb	r3, r3
 800252a:	4619      	mov	r1, r3
 800252c:	6878      	ldr	r0, [r7, #4]
 800252e:	f000 fb0f 	bl	8002b50 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002534:	3301      	adds	r3, #1
 8002536:	627b      	str	r3, [r7, #36]	@ 0x24
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	685b      	ldr	r3, [r3, #4]
 800253c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800253e:	429a      	cmp	r2, r3
 8002540:	d3e5      	bcc.n	800250e <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4618      	mov	r0, r3
 8002548:	f002 fc7a 	bl	8004e40 <USB_ReadInterrupts>
 800254c:	4603      	mov	r3, r0
 800254e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002552:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002556:	d13b      	bne.n	80025d0 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002558:	2301      	movs	r3, #1
 800255a:	627b      	str	r3, [r7, #36]	@ 0x24
 800255c:	e02b      	b.n	80025b6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800255e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002560:	015a      	lsls	r2, r3, #5
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	4413      	add	r3, r2
 8002566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800256e:	6879      	ldr	r1, [r7, #4]
 8002570:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002572:	4613      	mov	r3, r2
 8002574:	00db      	lsls	r3, r3, #3
 8002576:	4413      	add	r3, r2
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	440b      	add	r3, r1
 800257c:	3340      	adds	r3, #64	@ 0x40
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	2b01      	cmp	r3, #1
 8002582:	d115      	bne.n	80025b0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002584:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002586:	2b00      	cmp	r3, #0
 8002588:	da12      	bge.n	80025b0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800258a:	6879      	ldr	r1, [r7, #4]
 800258c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800258e:	4613      	mov	r3, r2
 8002590:	00db      	lsls	r3, r3, #3
 8002592:	4413      	add	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	440b      	add	r3, r1
 8002598:	333f      	adds	r3, #63	@ 0x3f
 800259a:	2201      	movs	r2, #1
 800259c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800259e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	4619      	mov	r1, r3
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f000 fad0 	bl	8002b50 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025b2:	3301      	adds	r3, #1
 80025b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80025bc:	429a      	cmp	r2, r3
 80025be:	d3ce      	bcc.n	800255e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	695a      	ldr	r2, [r3, #20]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80025ce:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4618      	mov	r0, r3
 80025d6:	f002 fc33 	bl	8004e40 <USB_ReadInterrupts>
 80025da:	4603      	mov	r3, r0
 80025dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80025e0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80025e4:	d155      	bne.n	8002692 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025e6:	2301      	movs	r3, #1
 80025e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ea:	e045      	b.n	8002678 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80025ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ee:	015a      	lsls	r2, r3, #5
 80025f0:	69fb      	ldr	r3, [r7, #28]
 80025f2:	4413      	add	r3, r2
 80025f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80025fc:	6879      	ldr	r1, [r7, #4]
 80025fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002600:	4613      	mov	r3, r2
 8002602:	00db      	lsls	r3, r3, #3
 8002604:	4413      	add	r3, r2
 8002606:	009b      	lsls	r3, r3, #2
 8002608:	440b      	add	r3, r1
 800260a:	f503 7320 	add.w	r3, r3, #640	@ 0x280
 800260e:	781b      	ldrb	r3, [r3, #0]
 8002610:	2b01      	cmp	r3, #1
 8002612:	d12e      	bne.n	8002672 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002614:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002616:	2b00      	cmp	r3, #0
 8002618:	da2b      	bge.n	8002672 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	@ 0x4fc
 8002626:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800262a:	429a      	cmp	r2, r3
 800262c:	d121      	bne.n	8002672 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800262e:	6879      	ldr	r1, [r7, #4]
 8002630:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002632:	4613      	mov	r3, r2
 8002634:	00db      	lsls	r3, r3, #3
 8002636:	4413      	add	r3, r2
 8002638:	009b      	lsls	r3, r3, #2
 800263a:	440b      	add	r3, r1
 800263c:	f203 237f 	addw	r3, r3, #639	@ 0x27f
 8002640:	2201      	movs	r2, #1
 8002642:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002644:	6a3b      	ldr	r3, [r7, #32]
 8002646:	699b      	ldr	r3, [r3, #24]
 8002648:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800264c:	6a3b      	ldr	r3, [r7, #32]
 800264e:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002650:	6a3b      	ldr	r3, [r7, #32]
 8002652:	695b      	ldr	r3, [r3, #20]
 8002654:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002658:	2b00      	cmp	r3, #0
 800265a:	d10a      	bne.n	8002672 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800265c:	69fb      	ldr	r3, [r7, #28]
 800265e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800266a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800266e:	6053      	str	r3, [r2, #4]
            break;
 8002670:	e007      	b.n	8002682 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002674:	3301      	adds	r3, #1
 8002676:	627b      	str	r3, [r7, #36]	@ 0x24
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	685b      	ldr	r3, [r3, #4]
 800267c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800267e:	429a      	cmp	r2, r3
 8002680:	d3b4      	bcc.n	80025ec <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695a      	ldr	r2, [r3, #20]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002690:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f002 fbd2 	bl	8004e40 <USB_ReadInterrupts>
 800269c:	4603      	mov	r3, r0
 800269e:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80026a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80026a6:	d10a      	bne.n	80026be <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80026a8:	6878      	ldr	r0, [r7, #4]
 80026aa:	f004 fe67 	bl	800737c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	695a      	ldr	r2, [r3, #20]
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80026bc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f002 fbbc 	bl	8004e40 <USB_ReadInterrupts>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d115      	bne.n	80026fe <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	685b      	ldr	r3, [r3, #4]
 80026d8:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80026da:	69bb      	ldr	r3, [r7, #24]
 80026dc:	f003 0304 	and.w	r3, r3, #4
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d002      	beq.n	80026ea <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f004 fe57 	bl	8007398 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	6859      	ldr	r1, [r3, #4]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	605a      	str	r2, [r3, #4]
 80026fa:	e000      	b.n	80026fe <HAL_PCD_IRQHandler+0x938>
      return;
 80026fc:	bf00      	nop
    }
  }
}
 80026fe:	3734      	adds	r7, #52	@ 0x34
 8002700:	46bd      	mov	sp, r7
 8002702:	bd90      	pop	{r4, r7, pc}

08002704 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b082      	sub	sp, #8
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	460b      	mov	r3, r1
 800270e:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002716:	2b01      	cmp	r3, #1
 8002718:	d101      	bne.n	800271e <HAL_PCD_SetAddress+0x1a>
 800271a:	2302      	movs	r3, #2
 800271c:	e013      	b.n	8002746 <HAL_PCD_SetAddress+0x42>
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2201      	movs	r2, #1
 8002722:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  hpcd->USB_Address = address;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	78fa      	ldrb	r2, [r7, #3]
 800272a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	78fa      	ldrb	r2, [r7, #3]
 8002734:	4611      	mov	r1, r2
 8002736:	4618      	mov	r0, r3
 8002738:	f002 fb1a 	bl	8004d70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
 8002756:	4608      	mov	r0, r1
 8002758:	4611      	mov	r1, r2
 800275a:	461a      	mov	r2, r3
 800275c:	4603      	mov	r3, r0
 800275e:	70fb      	strb	r3, [r7, #3]
 8002760:	460b      	mov	r3, r1
 8002762:	803b      	strh	r3, [r7, #0]
 8002764:	4613      	mov	r3, r2
 8002766:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002768:	2300      	movs	r3, #0
 800276a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800276c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002770:	2b00      	cmp	r3, #0
 8002772:	da0f      	bge.n	8002794 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002774:	78fb      	ldrb	r3, [r7, #3]
 8002776:	f003 020f 	and.w	r2, r3, #15
 800277a:	4613      	mov	r3, r2
 800277c:	00db      	lsls	r3, r3, #3
 800277e:	4413      	add	r3, r2
 8002780:	009b      	lsls	r3, r3, #2
 8002782:	3338      	adds	r3, #56	@ 0x38
 8002784:	687a      	ldr	r2, [r7, #4]
 8002786:	4413      	add	r3, r2
 8002788:	3304      	adds	r3, #4
 800278a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	2201      	movs	r2, #1
 8002790:	705a      	strb	r2, [r3, #1]
 8002792:	e00f      	b.n	80027b4 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002794:	78fb      	ldrb	r3, [r7, #3]
 8002796:	f003 020f 	and.w	r2, r3, #15
 800279a:	4613      	mov	r3, r2
 800279c:	00db      	lsls	r3, r3, #3
 800279e:	4413      	add	r3, r2
 80027a0:	009b      	lsls	r3, r3, #2
 80027a2:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	4413      	add	r3, r2
 80027aa:	3304      	adds	r3, #4
 80027ac:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	2200      	movs	r2, #0
 80027b2:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80027b4:	78fb      	ldrb	r3, [r7, #3]
 80027b6:	f003 030f 	and.w	r3, r3, #15
 80027ba:	b2da      	uxtb	r2, r3
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80027c0:	883a      	ldrh	r2, [r7, #0]
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	78ba      	ldrb	r2, [r7, #2]
 80027ca:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	785b      	ldrb	r3, [r3, #1]
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d004      	beq.n	80027de <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	781b      	ldrb	r3, [r3, #0]
 80027d8:	461a      	mov	r2, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80027de:	78bb      	ldrb	r3, [r7, #2]
 80027e0:	2b02      	cmp	r3, #2
 80027e2:	d102      	bne.n	80027ea <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2200      	movs	r2, #0
 80027e8:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d101      	bne.n	80027f8 <HAL_PCD_EP_Open+0xaa>
 80027f4:	2302      	movs	r3, #2
 80027f6:	e00e      	b.n	8002816 <HAL_PCD_EP_Open+0xc8>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	68f9      	ldr	r1, [r7, #12]
 8002806:	4618      	mov	r0, r3
 8002808:	f001 fb9a 	bl	8003f40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return ret;
 8002814:	7afb      	ldrb	r3, [r7, #11]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	b084      	sub	sp, #16
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
 8002826:	460b      	mov	r3, r1
 8002828:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800282a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800282e:	2b00      	cmp	r3, #0
 8002830:	da0f      	bge.n	8002852 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002832:	78fb      	ldrb	r3, [r7, #3]
 8002834:	f003 020f 	and.w	r2, r3, #15
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4413      	add	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	3338      	adds	r3, #56	@ 0x38
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	4413      	add	r3, r2
 8002846:	3304      	adds	r3, #4
 8002848:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2201      	movs	r2, #1
 800284e:	705a      	strb	r2, [r3, #1]
 8002850:	e00f      	b.n	8002872 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002852:	78fb      	ldrb	r3, [r7, #3]
 8002854:	f003 020f 	and.w	r2, r3, #15
 8002858:	4613      	mov	r3, r2
 800285a:	00db      	lsls	r3, r3, #3
 800285c:	4413      	add	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002864:	687a      	ldr	r2, [r7, #4]
 8002866:	4413      	add	r3, r2
 8002868:	3304      	adds	r3, #4
 800286a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	2200      	movs	r2, #0
 8002870:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002872:	78fb      	ldrb	r3, [r7, #3]
 8002874:	f003 030f 	and.w	r3, r3, #15
 8002878:	b2da      	uxtb	r2, r3
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_PCD_EP_Close+0x6e>
 8002888:	2302      	movs	r3, #2
 800288a:	e00e      	b.n	80028aa <HAL_PCD_EP_Close+0x8c>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	68f9      	ldr	r1, [r7, #12]
 800289a:	4618      	mov	r0, r3
 800289c:	f001 fbd8 	bl	8004050 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  return HAL_OK;
 80028a8:	2300      	movs	r3, #0
}
 80028aa:	4618      	mov	r0, r3
 80028ac:	3710      	adds	r7, #16
 80028ae:	46bd      	mov	sp, r7
 80028b0:	bd80      	pop	{r7, pc}

080028b2 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80028b2:	b580      	push	{r7, lr}
 80028b4:	b086      	sub	sp, #24
 80028b6:	af00      	add	r7, sp, #0
 80028b8:	60f8      	str	r0, [r7, #12]
 80028ba:	607a      	str	r2, [r7, #4]
 80028bc:	603b      	str	r3, [r7, #0]
 80028be:	460b      	mov	r3, r1
 80028c0:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80028c2:	7afb      	ldrb	r3, [r7, #11]
 80028c4:	f003 020f 	and.w	r2, r3, #15
 80028c8:	4613      	mov	r3, r2
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4413      	add	r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 80028d4:	68fa      	ldr	r2, [r7, #12]
 80028d6:	4413      	add	r3, r2
 80028d8:	3304      	adds	r3, #4
 80028da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028dc:	697b      	ldr	r3, [r7, #20]
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80028e2:	697b      	ldr	r3, [r7, #20]
 80028e4:	683a      	ldr	r2, [r7, #0]
 80028e6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028e8:	697b      	ldr	r3, [r7, #20]
 80028ea:	2200      	movs	r2, #0
 80028ec:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	2200      	movs	r2, #0
 80028f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028f4:	7afb      	ldrb	r3, [r7, #11]
 80028f6:	f003 030f 	and.w	r3, r3, #15
 80028fa:	b2da      	uxtb	r2, r3
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	691b      	ldr	r3, [r3, #16]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d102      	bne.n	800290e <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800290e:	7afb      	ldrb	r3, [r7, #11]
 8002910:	f003 030f 	and.w	r3, r3, #15
 8002914:	2b00      	cmp	r3, #0
 8002916:	d109      	bne.n	800292c <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6818      	ldr	r0, [r3, #0]
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	b2db      	uxtb	r3, r3
 8002922:	461a      	mov	r2, r3
 8002924:	6979      	ldr	r1, [r7, #20]
 8002926:	f001 feb7 	bl	8004698 <USB_EP0StartXfer>
 800292a:	e008      	b.n	800293e <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	6818      	ldr	r0, [r3, #0]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	b2db      	uxtb	r3, r3
 8002936:	461a      	mov	r2, r3
 8002938:	6979      	ldr	r1, [r7, #20]
 800293a:	f001 fc65 	bl	8004208 <USB_EPStartXfer>
  }

  return HAL_OK;
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	3718      	adds	r7, #24
 8002944:	46bd      	mov	sp, r7
 8002946:	bd80      	pop	{r7, pc}

08002948 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b086      	sub	sp, #24
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	607a      	str	r2, [r7, #4]
 8002952:	603b      	str	r3, [r7, #0]
 8002954:	460b      	mov	r3, r1
 8002956:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002958:	7afb      	ldrb	r3, [r7, #11]
 800295a:	f003 020f 	and.w	r2, r3, #15
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	3338      	adds	r3, #56	@ 0x38
 8002968:	68fa      	ldr	r2, [r7, #12]
 800296a:	4413      	add	r3, r2
 800296c:	3304      	adds	r3, #4
 800296e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	2200      	movs	r2, #0
 8002980:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	2201      	movs	r2, #1
 8002986:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002988:	7afb      	ldrb	r3, [r7, #11]
 800298a:	f003 030f 	and.w	r3, r3, #15
 800298e:	b2da      	uxtb	r2, r3
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	691b      	ldr	r3, [r3, #16]
 8002998:	2b01      	cmp	r3, #1
 800299a:	d102      	bne.n	80029a2 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800299c:	687a      	ldr	r2, [r7, #4]
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029a2:	7afb      	ldrb	r3, [r7, #11]
 80029a4:	f003 030f 	and.w	r3, r3, #15
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d109      	bne.n	80029c0 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6818      	ldr	r0, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	691b      	ldr	r3, [r3, #16]
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	6979      	ldr	r1, [r7, #20]
 80029ba:	f001 fe6d 	bl	8004698 <USB_EP0StartXfer>
 80029be:	e008      	b.n	80029d2 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	6818      	ldr	r0, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	6979      	ldr	r1, [r7, #20]
 80029ce:	f001 fc1b 	bl	8004208 <USB_EPStartXfer>
  }

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3718      	adds	r7, #24
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	f003 020f 	and.w	r2, r3, #15
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d901      	bls.n	80029fa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e050      	b.n	8002a9c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	da0f      	bge.n	8002a22 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a02:	78fb      	ldrb	r3, [r7, #3]
 8002a04:	f003 020f 	and.w	r2, r3, #15
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	3338      	adds	r3, #56	@ 0x38
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	4413      	add	r3, r2
 8002a16:	3304      	adds	r3, #4
 8002a18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	705a      	strb	r2, [r3, #1]
 8002a20:	e00d      	b.n	8002a3e <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002a22:	78fa      	ldrb	r2, [r7, #3]
 8002a24:	4613      	mov	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	4413      	add	r3, r2
 8002a34:	3304      	adds	r3, #4
 8002a36:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	2201      	movs	r2, #1
 8002a42:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a44:	78fb      	ldrb	r3, [r7, #3]
 8002a46:	f003 030f 	and.w	r3, r3, #15
 8002a4a:	b2da      	uxtb	r2, r3
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d101      	bne.n	8002a5e <HAL_PCD_EP_SetStall+0x82>
 8002a5a:	2302      	movs	r3, #2
 8002a5c:	e01e      	b.n	8002a9c <HAL_PCD_EP_SetStall+0xc0>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	2201      	movs	r2, #1
 8002a62:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	68f9      	ldr	r1, [r7, #12]
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	f002 f8ab 	bl	8004bc8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002a72:	78fb      	ldrb	r3, [r7, #3]
 8002a74:	f003 030f 	and.w	r3, r3, #15
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d10a      	bne.n	8002a92 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	6818      	ldr	r0, [r3, #0]
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	691b      	ldr	r3, [r3, #16]
 8002a84:	b2d9      	uxtb	r1, r3
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002a8c:	461a      	mov	r2, r3
 8002a8e:	f002 fa9b 	bl	8004fc8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2200      	movs	r2, #0
 8002a96:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8002a9a:	2300      	movs	r3, #0
}
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	3710      	adds	r7, #16
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}

08002aa4 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	b084      	sub	sp, #16
 8002aa8:	af00      	add	r7, sp, #0
 8002aaa:	6078      	str	r0, [r7, #4]
 8002aac:	460b      	mov	r3, r1
 8002aae:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	f003 020f 	and.w	r2, r3, #15
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	685b      	ldr	r3, [r3, #4]
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d901      	bls.n	8002ac2 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002abe:	2301      	movs	r3, #1
 8002ac0:	e042      	b.n	8002b48 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ac2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	da0f      	bge.n	8002aea <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002aca:	78fb      	ldrb	r3, [r7, #3]
 8002acc:	f003 020f 	and.w	r2, r3, #15
 8002ad0:	4613      	mov	r3, r2
 8002ad2:	00db      	lsls	r3, r3, #3
 8002ad4:	4413      	add	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	3338      	adds	r3, #56	@ 0x38
 8002ada:	687a      	ldr	r2, [r7, #4]
 8002adc:	4413      	add	r3, r2
 8002ade:	3304      	adds	r3, #4
 8002ae0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	705a      	strb	r2, [r3, #1]
 8002ae8:	e00f      	b.n	8002b0a <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002aea:	78fb      	ldrb	r3, [r7, #3]
 8002aec:	f003 020f 	and.w	r2, r3, #15
 8002af0:	4613      	mov	r3, r2
 8002af2:	00db      	lsls	r3, r3, #3
 8002af4:	4413      	add	r3, r2
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002afc:	687a      	ldr	r2, [r7, #4]
 8002afe:	4413      	add	r3, r2
 8002b00:	3304      	adds	r3, #4
 8002b02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	2200      	movs	r2, #0
 8002b08:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	b2da      	uxtb	r2, r3
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	@ 0x4bc
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d101      	bne.n	8002b2a <HAL_PCD_EP_ClrStall+0x86>
 8002b26:	2302      	movs	r3, #2
 8002b28:	e00e      	b.n	8002b48 <HAL_PCD_EP_ClrStall+0xa4>
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2201      	movs	r2, #1
 8002b2e:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	68f9      	ldr	r1, [r7, #12]
 8002b38:	4618      	mov	r0, r3
 8002b3a:	f002 f8b3 	bl	8004ca4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f883 24bc 	strb.w	r2, [r3, #1212]	@ 0x4bc

  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3710      	adds	r7, #16
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}

08002b50 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	460b      	mov	r3, r1
 8002b5a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002b5c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	da0c      	bge.n	8002b7e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002b64:	78fb      	ldrb	r3, [r7, #3]
 8002b66:	f003 020f 	and.w	r2, r3, #15
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	00db      	lsls	r3, r3, #3
 8002b6e:	4413      	add	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	3338      	adds	r3, #56	@ 0x38
 8002b74:	687a      	ldr	r2, [r7, #4]
 8002b76:	4413      	add	r3, r2
 8002b78:	3304      	adds	r3, #4
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	e00c      	b.n	8002b98 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002b7e:	78fb      	ldrb	r3, [r7, #3]
 8002b80:	f003 020f 	and.w	r2, r3, #15
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4413      	add	r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002b90:	687a      	ldr	r2, [r7, #4]
 8002b92:	4413      	add	r3, r2
 8002b94:	3304      	adds	r3, #4
 8002b96:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	68f9      	ldr	r1, [r7, #12]
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f001 fed2 	bl	8004948 <USB_EPStopXfer>
 8002ba4:	4603      	mov	r3, r0
 8002ba6:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002ba8:	7afb      	ldrb	r3, [r7, #11]
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b08a      	sub	sp, #40	@ 0x28
 8002bb6:	af02      	add	r7, sp, #8
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	4613      	mov	r3, r2
 8002bca:	00db      	lsls	r3, r3, #3
 8002bcc:	4413      	add	r3, r2
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	3338      	adds	r3, #56	@ 0x38
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	4413      	add	r3, r2
 8002bd6:	3304      	adds	r3, #4
 8002bd8:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6a1a      	ldr	r2, [r3, #32]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	699b      	ldr	r3, [r3, #24]
 8002be2:	429a      	cmp	r2, r3
 8002be4:	d901      	bls.n	8002bea <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e06c      	b.n	8002cc4 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	699a      	ldr	r2, [r3, #24]
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	6a1b      	ldr	r3, [r3, #32]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	69fa      	ldr	r2, [r7, #28]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d902      	bls.n	8002c06 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	3303      	adds	r3, #3
 8002c0a:	089b      	lsrs	r3, r3, #2
 8002c0c:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c0e:	e02b      	b.n	8002c68 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	699a      	ldr	r2, [r3, #24]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	6a1b      	ldr	r3, [r3, #32]
 8002c18:	1ad3      	subs	r3, r2, r3
 8002c1a:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	68db      	ldr	r3, [r3, #12]
 8002c20:	69fa      	ldr	r2, [r7, #28]
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d902      	bls.n	8002c2c <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002c2c:	69fb      	ldr	r3, [r7, #28]
 8002c2e:	3303      	adds	r3, #3
 8002c30:	089b      	lsrs	r3, r3, #2
 8002c32:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	6919      	ldr	r1, [r3, #16]
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	b2da      	uxtb	r2, r3
 8002c3c:	69fb      	ldr	r3, [r7, #28]
 8002c3e:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	9300      	str	r3, [sp, #0]
 8002c48:	4603      	mov	r3, r0
 8002c4a:	6978      	ldr	r0, [r7, #20]
 8002c4c:	f001 ff26 	bl	8004a9c <USB_WritePacket>

    ep->xfer_buff  += len;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	691a      	ldr	r2, [r3, #16]
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	441a      	add	r2, r3
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6a1a      	ldr	r2, [r3, #32]
 8002c60:	69fb      	ldr	r3, [r7, #28]
 8002c62:	441a      	add	r2, r3
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	015a      	lsls	r2, r3, #5
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	4413      	add	r3, r2
 8002c70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002c74:	699b      	ldr	r3, [r3, #24]
 8002c76:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c78:	69ba      	ldr	r2, [r7, #24]
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d809      	bhi.n	8002c92 <PCD_WriteEmptyTxFifo+0xe0>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a1a      	ldr	r2, [r3, #32]
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d203      	bcs.n	8002c92 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d1be      	bne.n	8002c10 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	699a      	ldr	r2, [r3, #24]
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	d811      	bhi.n	8002cc2 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	f003 030f 	and.w	r3, r3, #15
 8002ca4:	2201      	movs	r2, #1
 8002ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8002caa:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002cb2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	43db      	mvns	r3, r3
 8002cb8:	6939      	ldr	r1, [r7, #16]
 8002cba:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3720      	adds	r7, #32
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b088      	sub	sp, #32
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
 8002cd4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	333c      	adds	r3, #60	@ 0x3c
 8002ce4:	3304      	adds	r3, #4
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	015a      	lsls	r2, r3, #5
 8002cee:	69bb      	ldr	r3, [r7, #24]
 8002cf0:	4413      	add	r3, r2
 8002cf2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d17b      	bne.n	8002dfa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002d02:	693b      	ldr	r3, [r7, #16]
 8002d04:	f003 0308 	and.w	r3, r3, #8
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d015      	beq.n	8002d38 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	4a61      	ldr	r2, [pc, #388]	@ (8002e94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d10:	4293      	cmp	r3, r2
 8002d12:	f240 80b9 	bls.w	8002e88 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	f000 80b3 	beq.w	8002e88 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	015a      	lsls	r2, r3, #5
 8002d26:	69bb      	ldr	r3, [r7, #24]
 8002d28:	4413      	add	r3, r2
 8002d2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d2e:	461a      	mov	r2, r3
 8002d30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d34:	6093      	str	r3, [r2, #8]
 8002d36:	e0a7      	b.n	8002e88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	f003 0320 	and.w	r3, r3, #32
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	d009      	beq.n	8002d56 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	015a      	lsls	r2, r3, #5
 8002d46:	69bb      	ldr	r3, [r7, #24]
 8002d48:	4413      	add	r3, r2
 8002d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d4e:	461a      	mov	r2, r3
 8002d50:	2320      	movs	r3, #32
 8002d52:	6093      	str	r3, [r2, #8]
 8002d54:	e098      	b.n	8002e88 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	f040 8093 	bne.w	8002e88 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d62:	697b      	ldr	r3, [r7, #20]
 8002d64:	4a4b      	ldr	r2, [pc, #300]	@ (8002e94 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d90f      	bls.n	8002d8a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d00a      	beq.n	8002d8a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002d80:	461a      	mov	r2, r3
 8002d82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002d86:	6093      	str	r3, [r2, #8]
 8002d88:	e07e      	b.n	8002e88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002d8a:	683a      	ldr	r2, [r7, #0]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	00db      	lsls	r3, r3, #3
 8002d90:	4413      	add	r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	f503 731e 	add.w	r3, r3, #632	@ 0x278
 8002d98:	687a      	ldr	r2, [r7, #4]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3304      	adds	r3, #4
 8002d9e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	69da      	ldr	r2, [r3, #28]
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	0159      	lsls	r1, r3, #5
 8002da8:	69bb      	ldr	r3, [r7, #24]
 8002daa:	440b      	add	r3, r1
 8002dac:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002db0:	691b      	ldr	r3, [r3, #16]
 8002db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db6:	1ad2      	subs	r2, r2, r3
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d114      	bne.n	8002dec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	699b      	ldr	r3, [r3, #24]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d109      	bne.n	8002dde <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	6818      	ldr	r0, [r3, #0]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2101      	movs	r1, #1
 8002dd8:	f002 f8f6 	bl	8004fc8 <USB_EP0_OutStart>
 8002ddc:	e006      	b.n	8002dec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	691a      	ldr	r2, [r3, #16]
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
 8002de6:	441a      	add	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	4619      	mov	r1, r3
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f004 fa08 	bl	8007208 <HAL_PCD_DataOutStageCallback>
 8002df8:	e046      	b.n	8002e88 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	4a26      	ldr	r2, [pc, #152]	@ (8002e98 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d124      	bne.n	8002e4c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d00a      	beq.n	8002e22 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	015a      	lsls	r2, r3, #5
 8002e10:	69bb      	ldr	r3, [r7, #24]
 8002e12:	4413      	add	r3, r2
 8002e14:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e18:	461a      	mov	r2, r3
 8002e1a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002e1e:	6093      	str	r3, [r2, #8]
 8002e20:	e032      	b.n	8002e88 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	f003 0320 	and.w	r3, r3, #32
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	69bb      	ldr	r3, [r7, #24]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002e38:	461a      	mov	r2, r3
 8002e3a:	2320      	movs	r3, #32
 8002e3c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e3e:	683b      	ldr	r3, [r7, #0]
 8002e40:	b2db      	uxtb	r3, r3
 8002e42:	4619      	mov	r1, r3
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f004 f9df 	bl	8007208 <HAL_PCD_DataOutStageCallback>
 8002e4a:	e01d      	b.n	8002e88 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d114      	bne.n	8002e7c <PCD_EP_OutXfrComplete_int+0x1b0>
 8002e52:	6879      	ldr	r1, [r7, #4]
 8002e54:	683a      	ldr	r2, [r7, #0]
 8002e56:	4613      	mov	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	440b      	add	r3, r1
 8002e60:	f503 7325 	add.w	r3, r3, #660	@ 0x294
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d108      	bne.n	8002e7c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6818      	ldr	r0, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002e74:	461a      	mov	r2, r3
 8002e76:	2100      	movs	r1, #0
 8002e78:	f002 f8a6 	bl	8004fc8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	4619      	mov	r1, r3
 8002e82:	6878      	ldr	r0, [r7, #4]
 8002e84:	f004 f9c0 	bl	8007208 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3720      	adds	r7, #32
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	4f54300a 	.word	0x4f54300a
 8002e98:	4f54310a 	.word	0x4f54310a

08002e9c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002e9c:	b580      	push	{r7, lr}
 8002e9e:	b086      	sub	sp, #24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002eb0:	697b      	ldr	r3, [r7, #20]
 8002eb2:	333c      	adds	r3, #60	@ 0x3c
 8002eb4:	3304      	adds	r3, #4
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	015a      	lsls	r2, r3, #5
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	4413      	add	r3, r2
 8002ec2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ec6:	689b      	ldr	r3, [r3, #8]
 8002ec8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4a15      	ldr	r2, [pc, #84]	@ (8002f24 <PCD_EP_OutSetupPacket_int+0x88>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d90e      	bls.n	8002ef0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ed2:	68bb      	ldr	r3, [r7, #8]
 8002ed4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d009      	beq.n	8002ef0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	015a      	lsls	r2, r3, #5
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	4413      	add	r3, r2
 8002ee4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002ee8:	461a      	mov	r2, r3
 8002eea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002eee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002ef0:	6878      	ldr	r0, [r7, #4]
 8002ef2:	f004 f977 	bl	80071e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	4a0a      	ldr	r2, [pc, #40]	@ (8002f24 <PCD_EP_OutSetupPacket_int+0x88>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d90c      	bls.n	8002f18 <PCD_EP_OutSetupPacket_int+0x7c>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	691b      	ldr	r3, [r3, #16]
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d108      	bne.n	8002f18 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6818      	ldr	r0, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 8002f10:	461a      	mov	r2, r3
 8002f12:	2101      	movs	r1, #1
 8002f14:	f002 f858 	bl	8004fc8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002f18:	2300      	movs	r3, #0
}
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}
 8002f22:	bf00      	nop
 8002f24:	4f54300a 	.word	0x4f54300a

08002f28 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b085      	sub	sp, #20
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
 8002f30:	460b      	mov	r3, r1
 8002f32:	70fb      	strb	r3, [r7, #3]
 8002f34:	4613      	mov	r3, r2
 8002f36:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f3e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002f40:	78fb      	ldrb	r3, [r7, #3]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d107      	bne.n	8002f56 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002f46:	883b      	ldrh	r3, [r7, #0]
 8002f48:	0419      	lsls	r1, r3, #16
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	629a      	str	r2, [r3, #40]	@ 0x28
 8002f54:	e028      	b.n	8002fa8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f5c:	0c1b      	lsrs	r3, r3, #16
 8002f5e:	68ba      	ldr	r2, [r7, #8]
 8002f60:	4413      	add	r3, r2
 8002f62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f64:	2300      	movs	r3, #0
 8002f66:	73fb      	strb	r3, [r7, #15]
 8002f68:	e00d      	b.n	8002f86 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681a      	ldr	r2, [r3, #0]
 8002f6e:	7bfb      	ldrb	r3, [r7, #15]
 8002f70:	3340      	adds	r3, #64	@ 0x40
 8002f72:	009b      	lsls	r3, r3, #2
 8002f74:	4413      	add	r3, r2
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	0c1b      	lsrs	r3, r3, #16
 8002f7a:	68ba      	ldr	r2, [r7, #8]
 8002f7c:	4413      	add	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002f80:	7bfb      	ldrb	r3, [r7, #15]
 8002f82:	3301      	adds	r3, #1
 8002f84:	73fb      	strb	r3, [r7, #15]
 8002f86:	7bfa      	ldrb	r2, [r7, #15]
 8002f88:	78fb      	ldrb	r3, [r7, #3]
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d3ec      	bcc.n	8002f6a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002f90:	883b      	ldrh	r3, [r7, #0]
 8002f92:	0418      	lsls	r0, r3, #16
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6819      	ldr	r1, [r3, #0]
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	3b01      	subs	r3, #1
 8002f9c:	68ba      	ldr	r2, [r7, #8]
 8002f9e:	4302      	orrs	r2, r0
 8002fa0:	3340      	adds	r3, #64	@ 0x40
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002fa8:	2300      	movs	r3, #0
}
 8002faa:	4618      	mov	r0, r3
 8002fac:	3714      	adds	r7, #20
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	b083      	sub	sp, #12
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	6078      	str	r0, [r7, #4]
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	887a      	ldrh	r2, [r7, #2]
 8002fc8:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002fca:	2300      	movs	r3, #0
}
 8002fcc:	4618      	mov	r0, r3
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr

08002fd8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002fd8:	b480      	push	{r7}
 8002fda:	b083      	sub	sp, #12
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002fe4:	bf00      	nop
 8002fe6:	370c      	adds	r7, #12
 8002fe8:	46bd      	mov	sp, r7
 8002fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fee:	4770      	bx	lr

08002ff0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b086      	sub	sp, #24
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d101      	bne.n	8003002 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e267      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b00      	cmp	r3, #0
 800300c:	d075      	beq.n	80030fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800300e:	4b88      	ldr	r3, [pc, #544]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003010:	689b      	ldr	r3, [r3, #8]
 8003012:	f003 030c 	and.w	r3, r3, #12
 8003016:	2b04      	cmp	r3, #4
 8003018:	d00c      	beq.n	8003034 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800301a:	4b85      	ldr	r3, [pc, #532]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 800301c:	689b      	ldr	r3, [r3, #8]
 800301e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003022:	2b08      	cmp	r3, #8
 8003024:	d112      	bne.n	800304c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003026:	4b82      	ldr	r3, [pc, #520]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800302e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003032:	d10b      	bne.n	800304c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003034:	4b7e      	ldr	r3, [pc, #504]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d05b      	beq.n	80030f8 <HAL_RCC_OscConfig+0x108>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b00      	cmp	r3, #0
 8003046:	d157      	bne.n	80030f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e242      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003054:	d106      	bne.n	8003064 <HAL_RCC_OscConfig+0x74>
 8003056:	4b76      	ldr	r3, [pc, #472]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a75      	ldr	r2, [pc, #468]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 800305c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003060:	6013      	str	r3, [r2, #0]
 8003062:	e01d      	b.n	80030a0 <HAL_RCC_OscConfig+0xb0>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800306c:	d10c      	bne.n	8003088 <HAL_RCC_OscConfig+0x98>
 800306e:	4b70      	ldr	r3, [pc, #448]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	4a6f      	ldr	r2, [pc, #444]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003074:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003078:	6013      	str	r3, [r2, #0]
 800307a:	4b6d      	ldr	r3, [pc, #436]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a6c      	ldr	r2, [pc, #432]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003084:	6013      	str	r3, [r2, #0]
 8003086:	e00b      	b.n	80030a0 <HAL_RCC_OscConfig+0xb0>
 8003088:	4b69      	ldr	r3, [pc, #420]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a68      	ldr	r2, [pc, #416]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 800308e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003092:	6013      	str	r3, [r2, #0]
 8003094:	4b66      	ldr	r3, [pc, #408]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a65      	ldr	r2, [pc, #404]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 800309a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800309e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d013      	beq.n	80030d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fd fe4a 	bl	8000d40 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030b0:	f7fd fe46 	bl	8000d40 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b64      	cmp	r3, #100	@ 0x64
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e207      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030c2:	4b5b      	ldr	r3, [pc, #364]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d0f0      	beq.n	80030b0 <HAL_RCC_OscConfig+0xc0>
 80030ce:	e014      	b.n	80030fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030d0:	f7fd fe36 	bl	8000d40 <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030d8:	f7fd fe32 	bl	8000d40 <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b64      	cmp	r3, #100	@ 0x64
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e1f3      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80030ea:	4b51      	ldr	r3, [pc, #324]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0xe8>
 80030f6:	e000      	b.n	80030fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d063      	beq.n	80031ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003106:	4b4a      	ldr	r3, [pc, #296]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 030c 	and.w	r3, r3, #12
 800310e:	2b00      	cmp	r3, #0
 8003110:	d00b      	beq.n	800312a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003112:	4b47      	ldr	r3, [pc, #284]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800311a:	2b08      	cmp	r3, #8
 800311c:	d11c      	bne.n	8003158 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800311e:	4b44      	ldr	r3, [pc, #272]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d116      	bne.n	8003158 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800312a:	4b41      	ldr	r3, [pc, #260]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d005      	beq.n	8003142 <HAL_RCC_OscConfig+0x152>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	68db      	ldr	r3, [r3, #12]
 800313a:	2b01      	cmp	r3, #1
 800313c:	d001      	beq.n	8003142 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e1c7      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003142:	4b3b      	ldr	r3, [pc, #236]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	691b      	ldr	r3, [r3, #16]
 800314e:	00db      	lsls	r3, r3, #3
 8003150:	4937      	ldr	r1, [pc, #220]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003152:	4313      	orrs	r3, r2
 8003154:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003156:	e03a      	b.n	80031ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d020      	beq.n	80031a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003160:	4b34      	ldr	r3, [pc, #208]	@ (8003234 <HAL_RCC_OscConfig+0x244>)
 8003162:	2201      	movs	r2, #1
 8003164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003166:	f7fd fdeb 	bl	8000d40 <HAL_GetTick>
 800316a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800316c:	e008      	b.n	8003180 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800316e:	f7fd fde7 	bl	8000d40 <HAL_GetTick>
 8003172:	4602      	mov	r2, r0
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	1ad3      	subs	r3, r2, r3
 8003178:	2b02      	cmp	r3, #2
 800317a:	d901      	bls.n	8003180 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800317c:	2303      	movs	r3, #3
 800317e:	e1a8      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003180:	4b2b      	ldr	r3, [pc, #172]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0302 	and.w	r3, r3, #2
 8003188:	2b00      	cmp	r3, #0
 800318a:	d0f0      	beq.n	800316e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800318c:	4b28      	ldr	r3, [pc, #160]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	00db      	lsls	r3, r3, #3
 800319a:	4925      	ldr	r1, [pc, #148]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 800319c:	4313      	orrs	r3, r2
 800319e:	600b      	str	r3, [r1, #0]
 80031a0:	e015      	b.n	80031ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031a2:	4b24      	ldr	r3, [pc, #144]	@ (8003234 <HAL_RCC_OscConfig+0x244>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031a8:	f7fd fdca 	bl	8000d40 <HAL_GetTick>
 80031ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031ae:	e008      	b.n	80031c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031b0:	f7fd fdc6 	bl	8000d40 <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	2b02      	cmp	r3, #2
 80031bc:	d901      	bls.n	80031c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80031be:	2303      	movs	r3, #3
 80031c0:	e187      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031c2:	4b1b      	ldr	r3, [pc, #108]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f003 0302 	and.w	r3, r3, #2
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d1f0      	bne.n	80031b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0308 	and.w	r3, r3, #8
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d036      	beq.n	8003248 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	695b      	ldr	r3, [r3, #20]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d016      	beq.n	8003210 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80031e2:	4b15      	ldr	r3, [pc, #84]	@ (8003238 <HAL_RCC_OscConfig+0x248>)
 80031e4:	2201      	movs	r2, #1
 80031e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80031e8:	f7fd fdaa 	bl	8000d40 <HAL_GetTick>
 80031ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80031ee:	e008      	b.n	8003202 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80031f0:	f7fd fda6 	bl	8000d40 <HAL_GetTick>
 80031f4:	4602      	mov	r2, r0
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	1ad3      	subs	r3, r2, r3
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d901      	bls.n	8003202 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e167      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003202:	4b0b      	ldr	r3, [pc, #44]	@ (8003230 <HAL_RCC_OscConfig+0x240>)
 8003204:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0f0      	beq.n	80031f0 <HAL_RCC_OscConfig+0x200>
 800320e:	e01b      	b.n	8003248 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003210:	4b09      	ldr	r3, [pc, #36]	@ (8003238 <HAL_RCC_OscConfig+0x248>)
 8003212:	2200      	movs	r2, #0
 8003214:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003216:	f7fd fd93 	bl	8000d40 <HAL_GetTick>
 800321a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800321c:	e00e      	b.n	800323c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800321e:	f7fd fd8f 	bl	8000d40 <HAL_GetTick>
 8003222:	4602      	mov	r2, r0
 8003224:	693b      	ldr	r3, [r7, #16]
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	2b02      	cmp	r3, #2
 800322a:	d907      	bls.n	800323c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800322c:	2303      	movs	r3, #3
 800322e:	e150      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
 8003230:	40023800 	.word	0x40023800
 8003234:	42470000 	.word	0x42470000
 8003238:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800323c:	4b88      	ldr	r3, [pc, #544]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 800323e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003240:	f003 0302 	and.w	r3, r3, #2
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1ea      	bne.n	800321e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 0304 	and.w	r3, r3, #4
 8003250:	2b00      	cmp	r3, #0
 8003252:	f000 8097 	beq.w	8003384 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003256:	2300      	movs	r3, #0
 8003258:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800325a:	4b81      	ldr	r3, [pc, #516]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 800325c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800325e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003262:	2b00      	cmp	r3, #0
 8003264:	d10f      	bne.n	8003286 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003266:	2300      	movs	r3, #0
 8003268:	60bb      	str	r3, [r7, #8]
 800326a:	4b7d      	ldr	r3, [pc, #500]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 800326c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800326e:	4a7c      	ldr	r2, [pc, #496]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 8003270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003274:	6413      	str	r3, [r2, #64]	@ 0x40
 8003276:	4b7a      	ldr	r3, [pc, #488]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800327a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003282:	2301      	movs	r3, #1
 8003284:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003286:	4b77      	ldr	r3, [pc, #476]	@ (8003464 <HAL_RCC_OscConfig+0x474>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800328e:	2b00      	cmp	r3, #0
 8003290:	d118      	bne.n	80032c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003292:	4b74      	ldr	r3, [pc, #464]	@ (8003464 <HAL_RCC_OscConfig+0x474>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4a73      	ldr	r2, [pc, #460]	@ (8003464 <HAL_RCC_OscConfig+0x474>)
 8003298:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800329c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800329e:	f7fd fd4f 	bl	8000d40 <HAL_GetTick>
 80032a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032a4:	e008      	b.n	80032b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032a6:	f7fd fd4b 	bl	8000d40 <HAL_GetTick>
 80032aa:	4602      	mov	r2, r0
 80032ac:	693b      	ldr	r3, [r7, #16]
 80032ae:	1ad3      	subs	r3, r2, r3
 80032b0:	2b02      	cmp	r3, #2
 80032b2:	d901      	bls.n	80032b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80032b4:	2303      	movs	r3, #3
 80032b6:	e10c      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032b8:	4b6a      	ldr	r3, [pc, #424]	@ (8003464 <HAL_RCC_OscConfig+0x474>)
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d0f0      	beq.n	80032a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d106      	bne.n	80032da <HAL_RCC_OscConfig+0x2ea>
 80032cc:	4b64      	ldr	r3, [pc, #400]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 80032ce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032d0:	4a63      	ldr	r2, [pc, #396]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 80032d2:	f043 0301 	orr.w	r3, r3, #1
 80032d6:	6713      	str	r3, [r2, #112]	@ 0x70
 80032d8:	e01c      	b.n	8003314 <HAL_RCC_OscConfig+0x324>
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	689b      	ldr	r3, [r3, #8]
 80032de:	2b05      	cmp	r3, #5
 80032e0:	d10c      	bne.n	80032fc <HAL_RCC_OscConfig+0x30c>
 80032e2:	4b5f      	ldr	r3, [pc, #380]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 80032e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032e6:	4a5e      	ldr	r2, [pc, #376]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 80032e8:	f043 0304 	orr.w	r3, r3, #4
 80032ec:	6713      	str	r3, [r2, #112]	@ 0x70
 80032ee:	4b5c      	ldr	r3, [pc, #368]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 80032f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80032f2:	4a5b      	ldr	r2, [pc, #364]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 80032f4:	f043 0301 	orr.w	r3, r3, #1
 80032f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80032fa:	e00b      	b.n	8003314 <HAL_RCC_OscConfig+0x324>
 80032fc:	4b58      	ldr	r3, [pc, #352]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 80032fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003300:	4a57      	ldr	r2, [pc, #348]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 8003302:	f023 0301 	bic.w	r3, r3, #1
 8003306:	6713      	str	r3, [r2, #112]	@ 0x70
 8003308:	4b55      	ldr	r3, [pc, #340]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 800330a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800330c:	4a54      	ldr	r2, [pc, #336]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 800330e:	f023 0304 	bic.w	r3, r3, #4
 8003312:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	2b00      	cmp	r3, #0
 800331a:	d015      	beq.n	8003348 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800331c:	f7fd fd10 	bl	8000d40 <HAL_GetTick>
 8003320:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003322:	e00a      	b.n	800333a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003324:	f7fd fd0c 	bl	8000d40 <HAL_GetTick>
 8003328:	4602      	mov	r2, r0
 800332a:	693b      	ldr	r3, [r7, #16]
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003332:	4293      	cmp	r3, r2
 8003334:	d901      	bls.n	800333a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003336:	2303      	movs	r3, #3
 8003338:	e0cb      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333a:	4b49      	ldr	r3, [pc, #292]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 800333c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800333e:	f003 0302 	and.w	r3, r3, #2
 8003342:	2b00      	cmp	r3, #0
 8003344:	d0ee      	beq.n	8003324 <HAL_RCC_OscConfig+0x334>
 8003346:	e014      	b.n	8003372 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003348:	f7fd fcfa 	bl	8000d40 <HAL_GetTick>
 800334c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800334e:	e00a      	b.n	8003366 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003350:	f7fd fcf6 	bl	8000d40 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800335e:	4293      	cmp	r3, r2
 8003360:	d901      	bls.n	8003366 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003362:	2303      	movs	r3, #3
 8003364:	e0b5      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003366:	4b3e      	ldr	r3, [pc, #248]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800336a:	f003 0302 	and.w	r3, r3, #2
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1ee      	bne.n	8003350 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003372:	7dfb      	ldrb	r3, [r7, #23]
 8003374:	2b01      	cmp	r3, #1
 8003376:	d105      	bne.n	8003384 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003378:	4b39      	ldr	r3, [pc, #228]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 800337a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800337c:	4a38      	ldr	r2, [pc, #224]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 800337e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003382:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	699b      	ldr	r3, [r3, #24]
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 80a1 	beq.w	80034d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800338e:	4b34      	ldr	r3, [pc, #208]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	f003 030c 	and.w	r3, r3, #12
 8003396:	2b08      	cmp	r3, #8
 8003398:	d05c      	beq.n	8003454 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b02      	cmp	r3, #2
 80033a0:	d141      	bne.n	8003426 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033a2:	4b31      	ldr	r3, [pc, #196]	@ (8003468 <HAL_RCC_OscConfig+0x478>)
 80033a4:	2200      	movs	r2, #0
 80033a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a8:	f7fd fcca 	bl	8000d40 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033b0:	f7fd fcc6 	bl	8000d40 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e087      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80033c2:	4b27      	ldr	r3, [pc, #156]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f0      	bne.n	80033b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	69da      	ldr	r2, [r3, #28]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a1b      	ldr	r3, [r3, #32]
 80033d6:	431a      	orrs	r2, r3
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033dc:	019b      	lsls	r3, r3, #6
 80033de:	431a      	orrs	r2, r3
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033e4:	085b      	lsrs	r3, r3, #1
 80033e6:	3b01      	subs	r3, #1
 80033e8:	041b      	lsls	r3, r3, #16
 80033ea:	431a      	orrs	r2, r3
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033f0:	061b      	lsls	r3, r3, #24
 80033f2:	491b      	ldr	r1, [pc, #108]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 80033f4:	4313      	orrs	r3, r2
 80033f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80033f8:	4b1b      	ldr	r3, [pc, #108]	@ (8003468 <HAL_RCC_OscConfig+0x478>)
 80033fa:	2201      	movs	r2, #1
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fe:	f7fd fc9f 	bl	8000d40 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003406:	f7fd fc9b 	bl	8000d40 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e05c      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003418:	4b11      	ldr	r3, [pc, #68]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d0f0      	beq.n	8003406 <HAL_RCC_OscConfig+0x416>
 8003424:	e054      	b.n	80034d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003426:	4b10      	ldr	r3, [pc, #64]	@ (8003468 <HAL_RCC_OscConfig+0x478>)
 8003428:	2200      	movs	r2, #0
 800342a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800342c:	f7fd fc88 	bl	8000d40 <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003434:	f7fd fc84 	bl	8000d40 <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e045      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003446:	4b06      	ldr	r3, [pc, #24]	@ (8003460 <HAL_RCC_OscConfig+0x470>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1f0      	bne.n	8003434 <HAL_RCC_OscConfig+0x444>
 8003452:	e03d      	b.n	80034d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d107      	bne.n	800346c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800345c:	2301      	movs	r3, #1
 800345e:	e038      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
 8003460:	40023800 	.word	0x40023800
 8003464:	40007000 	.word	0x40007000
 8003468:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800346c:	4b1b      	ldr	r3, [pc, #108]	@ (80034dc <HAL_RCC_OscConfig+0x4ec>)
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	2b01      	cmp	r3, #1
 8003478:	d028      	beq.n	80034cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003484:	429a      	cmp	r2, r3
 8003486:	d121      	bne.n	80034cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003492:	429a      	cmp	r2, r3
 8003494:	d11a      	bne.n	80034cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800349c:	4013      	ands	r3, r2
 800349e:	687a      	ldr	r2, [r7, #4]
 80034a0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80034a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d111      	bne.n	80034cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80034b2:	085b      	lsrs	r3, r3, #1
 80034b4:	3b01      	subs	r3, #1
 80034b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d107      	bne.n	80034cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80034c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80034c8:	429a      	cmp	r2, r3
 80034ca:	d001      	beq.n	80034d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80034cc:	2301      	movs	r3, #1
 80034ce:	e000      	b.n	80034d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80034d0:	2300      	movs	r3, #0
}
 80034d2:	4618      	mov	r0, r3
 80034d4:	3718      	adds	r7, #24
 80034d6:	46bd      	mov	sp, r7
 80034d8:	bd80      	pop	{r7, pc}
 80034da:	bf00      	nop
 80034dc:	40023800 	.word	0x40023800

080034e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d101      	bne.n	80034f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e0cc      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80034f4:	4b68      	ldr	r3, [pc, #416]	@ (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	683a      	ldr	r2, [r7, #0]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d90c      	bls.n	800351c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003502:	4b65      	ldr	r3, [pc, #404]	@ (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 8003504:	683a      	ldr	r2, [r7, #0]
 8003506:	b2d2      	uxtb	r2, r2
 8003508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800350a:	4b63      	ldr	r3, [pc, #396]	@ (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	429a      	cmp	r2, r3
 8003516:	d001      	beq.n	800351c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e0b8      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	f003 0302 	and.w	r3, r3, #2
 8003524:	2b00      	cmp	r3, #0
 8003526:	d020      	beq.n	800356a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0304 	and.w	r3, r3, #4
 8003530:	2b00      	cmp	r3, #0
 8003532:	d005      	beq.n	8003540 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003534:	4b59      	ldr	r3, [pc, #356]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003536:	689b      	ldr	r3, [r3, #8]
 8003538:	4a58      	ldr	r2, [pc, #352]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 800353a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800353e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 0308 	and.w	r3, r3, #8
 8003548:	2b00      	cmp	r3, #0
 800354a:	d005      	beq.n	8003558 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800354c:	4b53      	ldr	r3, [pc, #332]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 800354e:	689b      	ldr	r3, [r3, #8]
 8003550:	4a52      	ldr	r2, [pc, #328]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003552:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003556:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003558:	4b50      	ldr	r3, [pc, #320]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	494d      	ldr	r1, [pc, #308]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003566:	4313      	orrs	r3, r2
 8003568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b00      	cmp	r3, #0
 8003574:	d044      	beq.n	8003600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	685b      	ldr	r3, [r3, #4]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d107      	bne.n	800358e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800357e:	4b47      	ldr	r3, [pc, #284]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003586:	2b00      	cmp	r3, #0
 8003588:	d119      	bne.n	80035be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e07f      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	685b      	ldr	r3, [r3, #4]
 8003592:	2b02      	cmp	r3, #2
 8003594:	d003      	beq.n	800359e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800359a:	2b03      	cmp	r3, #3
 800359c:	d107      	bne.n	80035ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800359e:	4b3f      	ldr	r3, [pc, #252]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d109      	bne.n	80035be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e06f      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ae:	4b3b      	ldr	r3, [pc, #236]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f003 0302 	and.w	r3, r3, #2
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d101      	bne.n	80035be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ba:	2301      	movs	r3, #1
 80035bc:	e067      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035be:	4b37      	ldr	r3, [pc, #220]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f023 0203 	bic.w	r2, r3, #3
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	4934      	ldr	r1, [pc, #208]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035d0:	f7fd fbb6 	bl	8000d40 <HAL_GetTick>
 80035d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035d6:	e00a      	b.n	80035ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035d8:	f7fd fbb2 	bl	8000d40 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d901      	bls.n	80035ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80035ea:	2303      	movs	r3, #3
 80035ec:	e04f      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ee:	4b2b      	ldr	r3, [pc, #172]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 020c 	and.w	r2, r3, #12
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	429a      	cmp	r2, r3
 80035fe:	d1eb      	bne.n	80035d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003600:	4b25      	ldr	r3, [pc, #148]	@ (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0307 	and.w	r3, r3, #7
 8003608:	683a      	ldr	r2, [r7, #0]
 800360a:	429a      	cmp	r2, r3
 800360c:	d20c      	bcs.n	8003628 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800360e:	4b22      	ldr	r3, [pc, #136]	@ (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 8003610:	683a      	ldr	r2, [r7, #0]
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003616:	4b20      	ldr	r3, [pc, #128]	@ (8003698 <HAL_RCC_ClockConfig+0x1b8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f003 0307 	and.w	r3, r3, #7
 800361e:	683a      	ldr	r2, [r7, #0]
 8003620:	429a      	cmp	r2, r3
 8003622:	d001      	beq.n	8003628 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003624:	2301      	movs	r3, #1
 8003626:	e032      	b.n	800368e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f003 0304 	and.w	r3, r3, #4
 8003630:	2b00      	cmp	r3, #0
 8003632:	d008      	beq.n	8003646 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003634:	4b19      	ldr	r3, [pc, #100]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	4916      	ldr	r1, [pc, #88]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003642:	4313      	orrs	r3, r2
 8003644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f003 0308 	and.w	r3, r3, #8
 800364e:	2b00      	cmp	r3, #0
 8003650:	d009      	beq.n	8003666 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003652:	4b12      	ldr	r3, [pc, #72]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003654:	689b      	ldr	r3, [r3, #8]
 8003656:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	00db      	lsls	r3, r3, #3
 8003660:	490e      	ldr	r1, [pc, #56]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 8003662:	4313      	orrs	r3, r2
 8003664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003666:	f000 f821 	bl	80036ac <HAL_RCC_GetSysClockFreq>
 800366a:	4602      	mov	r2, r0
 800366c:	4b0b      	ldr	r3, [pc, #44]	@ (800369c <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	091b      	lsrs	r3, r3, #4
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	490a      	ldr	r1, [pc, #40]	@ (80036a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003678:	5ccb      	ldrb	r3, [r1, r3]
 800367a:	fa22 f303 	lsr.w	r3, r2, r3
 800367e:	4a09      	ldr	r2, [pc, #36]	@ (80036a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003682:	4b09      	ldr	r3, [pc, #36]	@ (80036a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4618      	mov	r0, r3
 8003688:	f7fd fb16 	bl	8000cb8 <HAL_InitTick>

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}
 8003696:	bf00      	nop
 8003698:	40023c00 	.word	0x40023c00
 800369c:	40023800 	.word	0x40023800
 80036a0:	080077ec 	.word	0x080077ec
 80036a4:	20000078 	.word	0x20000078
 80036a8:	2000007c 	.word	0x2000007c

080036ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036b0:	b090      	sub	sp, #64	@ 0x40
 80036b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80036b4:	2300      	movs	r3, #0
 80036b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80036b8:	2300      	movs	r3, #0
 80036ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80036bc:	2300      	movs	r3, #0
 80036be:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80036c0:	2300      	movs	r3, #0
 80036c2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80036c4:	4b59      	ldr	r3, [pc, #356]	@ (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	f003 030c 	and.w	r3, r3, #12
 80036cc:	2b08      	cmp	r3, #8
 80036ce:	d00d      	beq.n	80036ec <HAL_RCC_GetSysClockFreq+0x40>
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	f200 80a1 	bhi.w	8003818 <HAL_RCC_GetSysClockFreq+0x16c>
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d002      	beq.n	80036e0 <HAL_RCC_GetSysClockFreq+0x34>
 80036da:	2b04      	cmp	r3, #4
 80036dc:	d003      	beq.n	80036e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80036de:	e09b      	b.n	8003818 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80036e0:	4b53      	ldr	r3, [pc, #332]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x184>)
 80036e2:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80036e4:	e09b      	b.n	800381e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80036e6:	4b53      	ldr	r3, [pc, #332]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x188>)
 80036e8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80036ea:	e098      	b.n	800381e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80036ec:	4b4f      	ldr	r3, [pc, #316]	@ (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80036f4:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80036f6:	4b4d      	ldr	r3, [pc, #308]	@ (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d028      	beq.n	8003754 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003702:	4b4a      	ldr	r3, [pc, #296]	@ (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	099b      	lsrs	r3, r3, #6
 8003708:	2200      	movs	r2, #0
 800370a:	623b      	str	r3, [r7, #32]
 800370c:	627a      	str	r2, [r7, #36]	@ 0x24
 800370e:	6a3b      	ldr	r3, [r7, #32]
 8003710:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003714:	2100      	movs	r1, #0
 8003716:	4b47      	ldr	r3, [pc, #284]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x188>)
 8003718:	fb03 f201 	mul.w	r2, r3, r1
 800371c:	2300      	movs	r3, #0
 800371e:	fb00 f303 	mul.w	r3, r0, r3
 8003722:	4413      	add	r3, r2
 8003724:	4a43      	ldr	r2, [pc, #268]	@ (8003834 <HAL_RCC_GetSysClockFreq+0x188>)
 8003726:	fba0 1202 	umull	r1, r2, r0, r2
 800372a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800372c:	460a      	mov	r2, r1
 800372e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003730:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003732:	4413      	add	r3, r2
 8003734:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003736:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003738:	2200      	movs	r2, #0
 800373a:	61bb      	str	r3, [r7, #24]
 800373c:	61fa      	str	r2, [r7, #28]
 800373e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003742:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003746:	f7fc fd45 	bl	80001d4 <__aeabi_uldivmod>
 800374a:	4602      	mov	r2, r0
 800374c:	460b      	mov	r3, r1
 800374e:	4613      	mov	r3, r2
 8003750:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003752:	e053      	b.n	80037fc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003754:	4b35      	ldr	r3, [pc, #212]	@ (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	099b      	lsrs	r3, r3, #6
 800375a:	2200      	movs	r2, #0
 800375c:	613b      	str	r3, [r7, #16]
 800375e:	617a      	str	r2, [r7, #20]
 8003760:	693b      	ldr	r3, [r7, #16]
 8003762:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003766:	f04f 0b00 	mov.w	fp, #0
 800376a:	4652      	mov	r2, sl
 800376c:	465b      	mov	r3, fp
 800376e:	f04f 0000 	mov.w	r0, #0
 8003772:	f04f 0100 	mov.w	r1, #0
 8003776:	0159      	lsls	r1, r3, #5
 8003778:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800377c:	0150      	lsls	r0, r2, #5
 800377e:	4602      	mov	r2, r0
 8003780:	460b      	mov	r3, r1
 8003782:	ebb2 080a 	subs.w	r8, r2, sl
 8003786:	eb63 090b 	sbc.w	r9, r3, fp
 800378a:	f04f 0200 	mov.w	r2, #0
 800378e:	f04f 0300 	mov.w	r3, #0
 8003792:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003796:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800379a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800379e:	ebb2 0408 	subs.w	r4, r2, r8
 80037a2:	eb63 0509 	sbc.w	r5, r3, r9
 80037a6:	f04f 0200 	mov.w	r2, #0
 80037aa:	f04f 0300 	mov.w	r3, #0
 80037ae:	00eb      	lsls	r3, r5, #3
 80037b0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80037b4:	00e2      	lsls	r2, r4, #3
 80037b6:	4614      	mov	r4, r2
 80037b8:	461d      	mov	r5, r3
 80037ba:	eb14 030a 	adds.w	r3, r4, sl
 80037be:	603b      	str	r3, [r7, #0]
 80037c0:	eb45 030b 	adc.w	r3, r5, fp
 80037c4:	607b      	str	r3, [r7, #4]
 80037c6:	f04f 0200 	mov.w	r2, #0
 80037ca:	f04f 0300 	mov.w	r3, #0
 80037ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80037d2:	4629      	mov	r1, r5
 80037d4:	028b      	lsls	r3, r1, #10
 80037d6:	4621      	mov	r1, r4
 80037d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80037dc:	4621      	mov	r1, r4
 80037de:	028a      	lsls	r2, r1, #10
 80037e0:	4610      	mov	r0, r2
 80037e2:	4619      	mov	r1, r3
 80037e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037e6:	2200      	movs	r2, #0
 80037e8:	60bb      	str	r3, [r7, #8]
 80037ea:	60fa      	str	r2, [r7, #12]
 80037ec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80037f0:	f7fc fcf0 	bl	80001d4 <__aeabi_uldivmod>
 80037f4:	4602      	mov	r2, r0
 80037f6:	460b      	mov	r3, r1
 80037f8:	4613      	mov	r3, r2
 80037fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80037fc:	4b0b      	ldr	r3, [pc, #44]	@ (800382c <HAL_RCC_GetSysClockFreq+0x180>)
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	0c1b      	lsrs	r3, r3, #16
 8003802:	f003 0303 	and.w	r3, r3, #3
 8003806:	3301      	adds	r3, #1
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 800380c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800380e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003810:	fbb2 f3f3 	udiv	r3, r2, r3
 8003814:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003816:	e002      	b.n	800381e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003818:	4b05      	ldr	r3, [pc, #20]	@ (8003830 <HAL_RCC_GetSysClockFreq+0x184>)
 800381a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800381c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800381e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003820:	4618      	mov	r0, r3
 8003822:	3740      	adds	r7, #64	@ 0x40
 8003824:	46bd      	mov	sp, r7
 8003826:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800382a:	bf00      	nop
 800382c:	40023800 	.word	0x40023800
 8003830:	00f42400 	.word	0x00f42400
 8003834:	017d7840 	.word	0x017d7840

08003838 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003838:	b480      	push	{r7}
 800383a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800383c:	4b03      	ldr	r3, [pc, #12]	@ (800384c <HAL_RCC_GetHCLKFreq+0x14>)
 800383e:	681b      	ldr	r3, [r3, #0]
}
 8003840:	4618      	mov	r0, r3
 8003842:	46bd      	mov	sp, r7
 8003844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003848:	4770      	bx	lr
 800384a:	bf00      	nop
 800384c:	20000078 	.word	0x20000078

08003850 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003850:	b084      	sub	sp, #16
 8003852:	b580      	push	{r7, lr}
 8003854:	b084      	sub	sp, #16
 8003856:	af00      	add	r7, sp, #0
 8003858:	6078      	str	r0, [r7, #4]
 800385a:	f107 001c 	add.w	r0, r7, #28
 800385e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003862:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003864:	2b01      	cmp	r3, #1
 8003866:	d122      	bne.n	80038ae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800386c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	68db      	ldr	r3, [r3, #12]
 8003878:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800387c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003880:	687a      	ldr	r2, [r7, #4]
 8003882:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003890:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003892:	2b01      	cmp	r3, #1
 8003894:	d105      	bne.n	80038a2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	68db      	ldr	r3, [r3, #12]
 800389a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f001 fbee 	bl	8005084 <USB_CoreReset>
 80038a8:	4603      	mov	r3, r0
 80038aa:	73fb      	strb	r3, [r7, #15]
 80038ac:	e01a      	b.n	80038e4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f001 fbe2 	bl	8005084 <USB_CoreReset>
 80038c0:	4603      	mov	r3, r0
 80038c2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80038c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ce:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	639a      	str	r2, [r3, #56]	@ 0x38
 80038d6:	e005      	b.n	80038e4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038dc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80038e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d10b      	bne.n	8003902 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f043 0206 	orr.w	r2, r3, #6
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f043 0220 	orr.w	r2, r3, #32
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003902:	7bfb      	ldrb	r3, [r7, #15]
}
 8003904:	4618      	mov	r0, r3
 8003906:	3710      	adds	r7, #16
 8003908:	46bd      	mov	sp, r7
 800390a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800390e:	b004      	add	sp, #16
 8003910:	4770      	bx	lr
	...

08003914 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003914:	b480      	push	{r7}
 8003916:	b087      	sub	sp, #28
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	4613      	mov	r3, r2
 8003920:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003922:	79fb      	ldrb	r3, [r7, #7]
 8003924:	2b02      	cmp	r3, #2
 8003926:	d165      	bne.n	80039f4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	4a41      	ldr	r2, [pc, #260]	@ (8003a30 <USB_SetTurnaroundTime+0x11c>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d906      	bls.n	800393e <USB_SetTurnaroundTime+0x2a>
 8003930:	68bb      	ldr	r3, [r7, #8]
 8003932:	4a40      	ldr	r2, [pc, #256]	@ (8003a34 <USB_SetTurnaroundTime+0x120>)
 8003934:	4293      	cmp	r3, r2
 8003936:	d202      	bcs.n	800393e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003938:	230f      	movs	r3, #15
 800393a:	617b      	str	r3, [r7, #20]
 800393c:	e062      	b.n	8003a04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	4a3c      	ldr	r2, [pc, #240]	@ (8003a34 <USB_SetTurnaroundTime+0x120>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d306      	bcc.n	8003954 <USB_SetTurnaroundTime+0x40>
 8003946:	68bb      	ldr	r3, [r7, #8]
 8003948:	4a3b      	ldr	r2, [pc, #236]	@ (8003a38 <USB_SetTurnaroundTime+0x124>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d202      	bcs.n	8003954 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800394e:	230e      	movs	r3, #14
 8003950:	617b      	str	r3, [r7, #20]
 8003952:	e057      	b.n	8003a04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003954:	68bb      	ldr	r3, [r7, #8]
 8003956:	4a38      	ldr	r2, [pc, #224]	@ (8003a38 <USB_SetTurnaroundTime+0x124>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d306      	bcc.n	800396a <USB_SetTurnaroundTime+0x56>
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	4a37      	ldr	r2, [pc, #220]	@ (8003a3c <USB_SetTurnaroundTime+0x128>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d202      	bcs.n	800396a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003964:	230d      	movs	r3, #13
 8003966:	617b      	str	r3, [r7, #20]
 8003968:	e04c      	b.n	8003a04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800396a:	68bb      	ldr	r3, [r7, #8]
 800396c:	4a33      	ldr	r2, [pc, #204]	@ (8003a3c <USB_SetTurnaroundTime+0x128>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d306      	bcc.n	8003980 <USB_SetTurnaroundTime+0x6c>
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	4a32      	ldr	r2, [pc, #200]	@ (8003a40 <USB_SetTurnaroundTime+0x12c>)
 8003976:	4293      	cmp	r3, r2
 8003978:	d802      	bhi.n	8003980 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800397a:	230c      	movs	r3, #12
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	e041      	b.n	8003a04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003980:	68bb      	ldr	r3, [r7, #8]
 8003982:	4a2f      	ldr	r2, [pc, #188]	@ (8003a40 <USB_SetTurnaroundTime+0x12c>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d906      	bls.n	8003996 <USB_SetTurnaroundTime+0x82>
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	4a2e      	ldr	r2, [pc, #184]	@ (8003a44 <USB_SetTurnaroundTime+0x130>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d802      	bhi.n	8003996 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003990:	230b      	movs	r3, #11
 8003992:	617b      	str	r3, [r7, #20]
 8003994:	e036      	b.n	8003a04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003996:	68bb      	ldr	r3, [r7, #8]
 8003998:	4a2a      	ldr	r2, [pc, #168]	@ (8003a44 <USB_SetTurnaroundTime+0x130>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d906      	bls.n	80039ac <USB_SetTurnaroundTime+0x98>
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	4a29      	ldr	r2, [pc, #164]	@ (8003a48 <USB_SetTurnaroundTime+0x134>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d802      	bhi.n	80039ac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80039a6:	230a      	movs	r3, #10
 80039a8:	617b      	str	r3, [r7, #20]
 80039aa:	e02b      	b.n	8003a04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80039ac:	68bb      	ldr	r3, [r7, #8]
 80039ae:	4a26      	ldr	r2, [pc, #152]	@ (8003a48 <USB_SetTurnaroundTime+0x134>)
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d906      	bls.n	80039c2 <USB_SetTurnaroundTime+0xae>
 80039b4:	68bb      	ldr	r3, [r7, #8]
 80039b6:	4a25      	ldr	r2, [pc, #148]	@ (8003a4c <USB_SetTurnaroundTime+0x138>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d202      	bcs.n	80039c2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80039bc:	2309      	movs	r3, #9
 80039be:	617b      	str	r3, [r7, #20]
 80039c0:	e020      	b.n	8003a04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80039c2:	68bb      	ldr	r3, [r7, #8]
 80039c4:	4a21      	ldr	r2, [pc, #132]	@ (8003a4c <USB_SetTurnaroundTime+0x138>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d306      	bcc.n	80039d8 <USB_SetTurnaroundTime+0xc4>
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	4a20      	ldr	r2, [pc, #128]	@ (8003a50 <USB_SetTurnaroundTime+0x13c>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d802      	bhi.n	80039d8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80039d2:	2308      	movs	r3, #8
 80039d4:	617b      	str	r3, [r7, #20]
 80039d6:	e015      	b.n	8003a04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80039d8:	68bb      	ldr	r3, [r7, #8]
 80039da:	4a1d      	ldr	r2, [pc, #116]	@ (8003a50 <USB_SetTurnaroundTime+0x13c>)
 80039dc:	4293      	cmp	r3, r2
 80039de:	d906      	bls.n	80039ee <USB_SetTurnaroundTime+0xda>
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	4a1c      	ldr	r2, [pc, #112]	@ (8003a54 <USB_SetTurnaroundTime+0x140>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	d202      	bcs.n	80039ee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80039e8:	2307      	movs	r3, #7
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	e00a      	b.n	8003a04 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80039ee:	2306      	movs	r3, #6
 80039f0:	617b      	str	r3, [r7, #20]
 80039f2:	e007      	b.n	8003a04 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d102      	bne.n	8003a00 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80039fa:	2309      	movs	r3, #9
 80039fc:	617b      	str	r3, [r7, #20]
 80039fe:	e001      	b.n	8003a04 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003a00:	2309      	movs	r3, #9
 8003a02:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	68da      	ldr	r2, [r3, #12]
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	029b      	lsls	r3, r3, #10
 8003a18:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8003a1c:	431a      	orrs	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	371c      	adds	r7, #28
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr
 8003a30:	00d8acbf 	.word	0x00d8acbf
 8003a34:	00e4e1c0 	.word	0x00e4e1c0
 8003a38:	00f42400 	.word	0x00f42400
 8003a3c:	01067380 	.word	0x01067380
 8003a40:	011a499f 	.word	0x011a499f
 8003a44:	01312cff 	.word	0x01312cff
 8003a48:	014ca43f 	.word	0x014ca43f
 8003a4c:	016e3600 	.word	0x016e3600
 8003a50:	01a6ab1f 	.word	0x01a6ab1f
 8003a54:	01e84800 	.word	0x01e84800

08003a58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b083      	sub	sp, #12
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f043 0201 	orr.w	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a6c:	2300      	movs	r3, #0
}
 8003a6e:	4618      	mov	r0, r3
 8003a70:	370c      	adds	r7, #12
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b083      	sub	sp, #12
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	689b      	ldr	r3, [r3, #8]
 8003a86:	f023 0201 	bic.w	r2, r3, #1
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003a8e:	2300      	movs	r3, #0
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b084      	sub	sp, #16
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	68db      	ldr	r3, [r3, #12]
 8003ab0:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003ab8:	78fb      	ldrb	r3, [r7, #3]
 8003aba:	2b01      	cmp	r3, #1
 8003abc:	d115      	bne.n	8003aea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	68db      	ldr	r3, [r3, #12]
 8003ac2:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003aca:	2001      	movs	r0, #1
 8003acc:	f7fd f944 	bl	8000d58 <HAL_Delay>
      ms++;
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f001 fa45 	bl	8004f66 <USB_GetMode>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b01      	cmp	r3, #1
 8003ae0:	d01e      	beq.n	8003b20 <USB_SetCurrentMode+0x84>
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2b31      	cmp	r3, #49	@ 0x31
 8003ae6:	d9f0      	bls.n	8003aca <USB_SetCurrentMode+0x2e>
 8003ae8:	e01a      	b.n	8003b20 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003aea:	78fb      	ldrb	r3, [r7, #3]
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d115      	bne.n	8003b1c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003afc:	2001      	movs	r0, #1
 8003afe:	f7fd f92b 	bl	8000d58 <HAL_Delay>
      ms++;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	3301      	adds	r3, #1
 8003b06:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003b08:	6878      	ldr	r0, [r7, #4]
 8003b0a:	f001 fa2c 	bl	8004f66 <USB_GetMode>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <USB_SetCurrentMode+0x84>
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	2b31      	cmp	r3, #49	@ 0x31
 8003b18:	d9f0      	bls.n	8003afc <USB_SetCurrentMode+0x60>
 8003b1a:	e001      	b.n	8003b20 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003b1c:	2301      	movs	r3, #1
 8003b1e:	e005      	b.n	8003b2c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2b32      	cmp	r3, #50	@ 0x32
 8003b24:	d101      	bne.n	8003b2a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e000      	b.n	8003b2c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003b2a:	2300      	movs	r3, #0
}
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	3710      	adds	r7, #16
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bd80      	pop	{r7, pc}

08003b34 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003b34:	b084      	sub	sp, #16
 8003b36:	b580      	push	{r7, lr}
 8003b38:	b086      	sub	sp, #24
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
 8003b3e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8003b42:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003b46:	2300      	movs	r3, #0
 8003b48:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003b4e:	2300      	movs	r3, #0
 8003b50:	613b      	str	r3, [r7, #16]
 8003b52:	e009      	b.n	8003b68 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	693b      	ldr	r3, [r7, #16]
 8003b58:	3340      	adds	r3, #64	@ 0x40
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	4413      	add	r3, r2
 8003b5e:	2200      	movs	r2, #0
 8003b60:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	3301      	adds	r3, #1
 8003b66:	613b      	str	r3, [r7, #16]
 8003b68:	693b      	ldr	r3, [r7, #16]
 8003b6a:	2b0e      	cmp	r3, #14
 8003b6c:	d9f2      	bls.n	8003b54 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003b6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d11c      	bne.n	8003bae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	68fa      	ldr	r2, [r7, #12]
 8003b7e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003b82:	f043 0302 	orr.w	r3, r3, #2
 8003b86:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b8c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b98:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ba4:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	639a      	str	r2, [r3, #56]	@ 0x38
 8003bac:	e00b      	b.n	8003bc6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bb2:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bbe:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	639a      	str	r2, [r3, #56]	@ 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8003bcc:	461a      	mov	r2, r3
 8003bce:	2300      	movs	r3, #0
 8003bd0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003bd8:	4619      	mov	r1, r3
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003be0:	461a      	mov	r2, r3
 8003be2:	680b      	ldr	r3, [r1, #0]
 8003be4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003be6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d10c      	bne.n	8003c06 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003bec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d104      	bne.n	8003bfc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003bf2:	2100      	movs	r1, #0
 8003bf4:	6878      	ldr	r0, [r7, #4]
 8003bf6:	f000 f965 	bl	8003ec4 <USB_SetDevSpeed>
 8003bfa:	e008      	b.n	8003c0e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003bfc:	2101      	movs	r1, #1
 8003bfe:	6878      	ldr	r0, [r7, #4]
 8003c00:	f000 f960 	bl	8003ec4 <USB_SetDevSpeed>
 8003c04:	e003      	b.n	8003c0e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003c06:	2103      	movs	r1, #3
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f000 f95b 	bl	8003ec4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003c0e:	2110      	movs	r1, #16
 8003c10:	6878      	ldr	r0, [r7, #4]
 8003c12:	f000 f8f3 	bl	8003dfc <USB_FlushTxFifo>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 f91f 	bl	8003e64 <USB_FlushRxFifo>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d001      	beq.n	8003c30 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c36:	461a      	mov	r2, r3
 8003c38:	2300      	movs	r3, #0
 8003c3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c42:	461a      	mov	r2, r3
 8003c44:	2300      	movs	r3, #0
 8003c46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003c4e:	461a      	mov	r2, r3
 8003c50:	2300      	movs	r3, #0
 8003c52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c54:	2300      	movs	r3, #0
 8003c56:	613b      	str	r3, [r7, #16]
 8003c58:	e043      	b.n	8003ce2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003c5a:	693b      	ldr	r3, [r7, #16]
 8003c5c:	015a      	lsls	r2, r3, #5
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	4413      	add	r3, r2
 8003c62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003c6c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003c70:	d118      	bne.n	8003ca4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10a      	bne.n	8003c8e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	015a      	lsls	r2, r3, #5
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4413      	add	r3, r2
 8003c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c84:	461a      	mov	r2, r3
 8003c86:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003c8a:	6013      	str	r3, [r2, #0]
 8003c8c:	e013      	b.n	8003cb6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003c8e:	693b      	ldr	r3, [r7, #16]
 8003c90:	015a      	lsls	r2, r3, #5
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	4413      	add	r3, r2
 8003c96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003ca0:	6013      	str	r3, [r2, #0]
 8003ca2:	e008      	b.n	8003cb6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cb0:	461a      	mov	r2, r3
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	015a      	lsls	r2, r3, #5
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	4413      	add	r3, r2
 8003cbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cc2:	461a      	mov	r2, r3
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003cc8:	693b      	ldr	r3, [r7, #16]
 8003cca:	015a      	lsls	r2, r3, #5
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	4413      	add	r3, r2
 8003cd0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003cda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	3301      	adds	r3, #1
 8003ce0:	613b      	str	r3, [r7, #16]
 8003ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	429a      	cmp	r2, r3
 8003ce8:	d3b7      	bcc.n	8003c5a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003cea:	2300      	movs	r3, #0
 8003cec:	613b      	str	r3, [r7, #16]
 8003cee:	e043      	b.n	8003d78 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003cf0:	693b      	ldr	r3, [r7, #16]
 8003cf2:	015a      	lsls	r2, r3, #5
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8003d02:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8003d06:	d118      	bne.n	8003d3a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003d08:	693b      	ldr	r3, [r7, #16]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d10a      	bne.n	8003d24 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d1a:	461a      	mov	r2, r3
 8003d1c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8003d20:	6013      	str	r3, [r2, #0]
 8003d22:	e013      	b.n	8003d4c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	015a      	lsls	r2, r3, #5
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d30:	461a      	mov	r2, r3
 8003d32:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8003d36:	6013      	str	r3, [r2, #0]
 8003d38:	e008      	b.n	8003d4c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	015a      	lsls	r2, r3, #5
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4413      	add	r3, r2
 8003d42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d46:	461a      	mov	r2, r3
 8003d48:	2300      	movs	r3, #0
 8003d4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003d4c:	693b      	ldr	r3, [r7, #16]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d58:	461a      	mov	r2, r3
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	015a      	lsls	r2, r3, #5
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	4413      	add	r3, r2
 8003d66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8003d70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	3301      	adds	r3, #1
 8003d76:	613b      	str	r3, [r7, #16]
 8003d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d7a:	693a      	ldr	r2, [r7, #16]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d3b7      	bcc.n	8003cf0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	68fa      	ldr	r2, [r7, #12]
 8003d8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8003d8e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8003da0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003da2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d105      	bne.n	8003db4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	699b      	ldr	r3, [r3, #24]
 8003dac:	f043 0210 	orr.w	r2, r3, #16
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	699a      	ldr	r2, [r3, #24]
 8003db8:	4b0f      	ldr	r3, [pc, #60]	@ (8003df8 <USB_DevInit+0x2c4>)
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	687a      	ldr	r2, [r7, #4]
 8003dbe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d005      	beq.n	8003dd2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	699b      	ldr	r3, [r3, #24]
 8003dca:	f043 0208 	orr.w	r2, r3, #8
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003dd2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	d107      	bne.n	8003de8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	699b      	ldr	r3, [r3, #24]
 8003ddc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8003de0:	f043 0304 	orr.w	r3, r3, #4
 8003de4:	687a      	ldr	r2, [r7, #4]
 8003de6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8003dea:	4618      	mov	r0, r3
 8003dec:	3718      	adds	r7, #24
 8003dee:	46bd      	mov	sp, r7
 8003df0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003df4:	b004      	add	sp, #16
 8003df6:	4770      	bx	lr
 8003df8:	803c3800 	.word	0x803c3800

08003dfc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003e06:	2300      	movs	r3, #0
 8003e08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	3301      	adds	r3, #1
 8003e0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	4a13      	ldr	r2, [pc, #76]	@ (8003e60 <USB_FlushTxFifo+0x64>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d901      	bls.n	8003e1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003e18:	2303      	movs	r3, #3
 8003e1a:	e01b      	b.n	8003e54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	daf2      	bge.n	8003e0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003e24:	2300      	movs	r3, #0
 8003e26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	019b      	lsls	r3, r3, #6
 8003e2c:	f043 0220 	orr.w	r2, r3, #32
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	3301      	adds	r3, #1
 8003e38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	4a08      	ldr	r2, [pc, #32]	@ (8003e60 <USB_FlushTxFifo+0x64>)
 8003e3e:	4293      	cmp	r3, r2
 8003e40:	d901      	bls.n	8003e46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003e42:	2303      	movs	r3, #3
 8003e44:	e006      	b.n	8003e54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	691b      	ldr	r3, [r3, #16]
 8003e4a:	f003 0320 	and.w	r3, r3, #32
 8003e4e:	2b20      	cmp	r3, #32
 8003e50:	d0f0      	beq.n	8003e34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003e52:	2300      	movs	r3, #0
}
 8003e54:	4618      	mov	r0, r3
 8003e56:	3714      	adds	r7, #20
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	00030d40 	.word	0x00030d40

08003e64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	3301      	adds	r3, #1
 8003e74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	4a11      	ldr	r2, [pc, #68]	@ (8003ec0 <USB_FlushRxFifo+0x5c>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d901      	bls.n	8003e82 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e018      	b.n	8003eb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	daf2      	bge.n	8003e70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003e8a:	2300      	movs	r3, #0
 8003e8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2210      	movs	r2, #16
 8003e92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	3301      	adds	r3, #1
 8003e98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	4a08      	ldr	r2, [pc, #32]	@ (8003ec0 <USB_FlushRxFifo+0x5c>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d901      	bls.n	8003ea6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	e006      	b.n	8003eb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	f003 0310 	and.w	r3, r3, #16
 8003eae:	2b10      	cmp	r3, #16
 8003eb0:	d0f0      	beq.n	8003e94 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3714      	adds	r7, #20
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr
 8003ec0:	00030d40 	.word	0x00030d40

08003ec4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	460b      	mov	r3, r1
 8003ece:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003eda:	681a      	ldr	r2, [r3, #0]
 8003edc:	78fb      	ldrb	r3, [r7, #3]
 8003ede:	68f9      	ldr	r1, [r7, #12]
 8003ee0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3714      	adds	r7, #20
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef4:	4770      	bx	lr

08003ef6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003ef6:	b480      	push	{r7}
 8003ef8:	b087      	sub	sp, #28
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f08:	689b      	ldr	r3, [r3, #8]
 8003f0a:	f003 0306 	and.w	r3, r3, #6
 8003f0e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d102      	bne.n	8003f1c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003f16:	2300      	movs	r3, #0
 8003f18:	75fb      	strb	r3, [r7, #23]
 8003f1a:	e00a      	b.n	8003f32 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d002      	beq.n	8003f28 <USB_GetDevSpeed+0x32>
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	2b06      	cmp	r3, #6
 8003f26:	d102      	bne.n	8003f2e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003f28:	2302      	movs	r3, #2
 8003f2a:	75fb      	strb	r3, [r7, #23]
 8003f2c:	e001      	b.n	8003f32 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003f2e:	230f      	movs	r3, #15
 8003f30:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f34:	4618      	mov	r0, r3
 8003f36:	371c      	adds	r7, #28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b085      	sub	sp, #20
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	781b      	ldrb	r3, [r3, #0]
 8003f52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	785b      	ldrb	r3, [r3, #1]
 8003f58:	2b01      	cmp	r3, #1
 8003f5a:	d13a      	bne.n	8003fd2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003f62:	69da      	ldr	r2, [r3, #28]
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	781b      	ldrb	r3, [r3, #0]
 8003f68:	f003 030f 	and.w	r3, r3, #15
 8003f6c:	2101      	movs	r1, #1
 8003f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	68f9      	ldr	r1, [r7, #12]
 8003f76:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003f7e:	68bb      	ldr	r3, [r7, #8]
 8003f80:	015a      	lsls	r2, r3, #5
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	4413      	add	r3, r2
 8003f86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d155      	bne.n	8004040 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	015a      	lsls	r2, r3, #5
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	4413      	add	r3, r2
 8003f9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8003fa0:	681a      	ldr	r2, [r3, #0]
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	791b      	ldrb	r3, [r3, #4]
 8003fae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003fb0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	059b      	lsls	r3, r3, #22
 8003fb6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	68ba      	ldr	r2, [r7, #8]
 8003fbc:	0151      	lsls	r1, r2, #5
 8003fbe:	68fa      	ldr	r2, [r7, #12]
 8003fc0:	440a      	add	r2, r1
 8003fc2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8003fc6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003fca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fce:	6013      	str	r3, [r2, #0]
 8003fd0:	e036      	b.n	8004040 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8003fd8:	69da      	ldr	r2, [r3, #28]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	781b      	ldrb	r3, [r3, #0]
 8003fde:	f003 030f 	and.w	r3, r3, #15
 8003fe2:	2101      	movs	r1, #1
 8003fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8003fe8:	041b      	lsls	r3, r3, #16
 8003fea:	68f9      	ldr	r1, [r7, #12]
 8003fec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8003ff0:	4313      	orrs	r3, r2
 8003ff2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	015a      	lsls	r2, r3, #5
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	4413      	add	r3, r2
 8003ffc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d11a      	bne.n	8004040 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800400a:	68bb      	ldr	r3, [r7, #8]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	4413      	add	r3, r2
 8004012:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004016:	681a      	ldr	r2, [r3, #0]
 8004018:	683b      	ldr	r3, [r7, #0]
 800401a:	68db      	ldr	r3, [r3, #12]
 800401c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	791b      	ldrb	r3, [r3, #4]
 8004024:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004026:	430b      	orrs	r3, r1
 8004028:	4313      	orrs	r3, r2
 800402a:	68ba      	ldr	r2, [r7, #8]
 800402c:	0151      	lsls	r1, r2, #5
 800402e:	68fa      	ldr	r2, [r7, #12]
 8004030:	440a      	add	r2, r1
 8004032:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004036:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800403a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800403e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004040:	2300      	movs	r3, #0
}
 8004042:	4618      	mov	r0, r3
 8004044:	3714      	adds	r7, #20
 8004046:	46bd      	mov	sp, r7
 8004048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404c:	4770      	bx	lr
	...

08004050 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
 8004058:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	781b      	ldrb	r3, [r3, #0]
 8004062:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	785b      	ldrb	r3, [r3, #1]
 8004068:	2b01      	cmp	r3, #1
 800406a:	d161      	bne.n	8004130 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	015a      	lsls	r2, r3, #5
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	4413      	add	r3, r2
 8004074:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800407e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004082:	d11f      	bne.n	80040c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004084:	68bb      	ldr	r3, [r7, #8]
 8004086:	015a      	lsls	r2, r3, #5
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	4413      	add	r3, r2
 800408c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68ba      	ldr	r2, [r7, #8]
 8004094:	0151      	lsls	r1, r2, #5
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	440a      	add	r2, r1
 800409a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800409e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80040a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80040a4:	68bb      	ldr	r3, [r7, #8]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	68ba      	ldr	r2, [r7, #8]
 80040b4:	0151      	lsls	r1, r2, #5
 80040b6:	68fa      	ldr	r2, [r7, #12]
 80040b8:	440a      	add	r2, r1
 80040ba:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80040be:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80040c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ca:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040cc:	683b      	ldr	r3, [r7, #0]
 80040ce:	781b      	ldrb	r3, [r3, #0]
 80040d0:	f003 030f 	and.w	r3, r3, #15
 80040d4:	2101      	movs	r1, #1
 80040d6:	fa01 f303 	lsl.w	r3, r1, r3
 80040da:	b29b      	uxth	r3, r3
 80040dc:	43db      	mvns	r3, r3
 80040de:	68f9      	ldr	r1, [r7, #12]
 80040e0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80040e4:	4013      	ands	r3, r2
 80040e6:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80040ee:	69da      	ldr	r2, [r3, #28]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	781b      	ldrb	r3, [r3, #0]
 80040f4:	f003 030f 	and.w	r3, r3, #15
 80040f8:	2101      	movs	r1, #1
 80040fa:	fa01 f303 	lsl.w	r3, r1, r3
 80040fe:	b29b      	uxth	r3, r3
 8004100:	43db      	mvns	r3, r3
 8004102:	68f9      	ldr	r1, [r7, #12]
 8004104:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004108:	4013      	ands	r3, r2
 800410a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	015a      	lsls	r2, r3, #5
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	4413      	add	r3, r2
 8004114:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	0159      	lsls	r1, r3, #5
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	440b      	add	r3, r1
 8004122:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004126:	4619      	mov	r1, r3
 8004128:	4b35      	ldr	r3, [pc, #212]	@ (8004200 <USB_DeactivateEndpoint+0x1b0>)
 800412a:	4013      	ands	r3, r2
 800412c:	600b      	str	r3, [r1, #0]
 800412e:	e060      	b.n	80041f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	015a      	lsls	r2, r3, #5
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	4413      	add	r3, r2
 8004138:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004142:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004146:	d11f      	bne.n	8004188 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	015a      	lsls	r2, r3, #5
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	4413      	add	r3, r2
 8004150:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	0151      	lsls	r1, r2, #5
 800415a:	68fa      	ldr	r2, [r7, #12]
 800415c:	440a      	add	r2, r1
 800415e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004162:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004166:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004168:	68bb      	ldr	r3, [r7, #8]
 800416a:	015a      	lsls	r2, r3, #5
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4413      	add	r3, r2
 8004170:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	68ba      	ldr	r2, [r7, #8]
 8004178:	0151      	lsls	r1, r2, #5
 800417a:	68fa      	ldr	r2, [r7, #12]
 800417c:	440a      	add	r2, r1
 800417e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004182:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004186:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800418e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	781b      	ldrb	r3, [r3, #0]
 8004194:	f003 030f 	and.w	r3, r3, #15
 8004198:	2101      	movs	r1, #1
 800419a:	fa01 f303 	lsl.w	r3, r1, r3
 800419e:	041b      	lsls	r3, r3, #16
 80041a0:	43db      	mvns	r3, r3
 80041a2:	68f9      	ldr	r1, [r7, #12]
 80041a4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041a8:	4013      	ands	r3, r2
 80041aa:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80041b2:	69da      	ldr	r2, [r3, #28]
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	f003 030f 	and.w	r3, r3, #15
 80041bc:	2101      	movs	r1, #1
 80041be:	fa01 f303 	lsl.w	r3, r1, r3
 80041c2:	041b      	lsls	r3, r3, #16
 80041c4:	43db      	mvns	r3, r3
 80041c6:	68f9      	ldr	r1, [r7, #12]
 80041c8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80041cc:	4013      	ands	r3, r2
 80041ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	0159      	lsls	r1, r3, #5
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	440b      	add	r3, r1
 80041e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80041ea:	4619      	mov	r1, r3
 80041ec:	4b05      	ldr	r3, [pc, #20]	@ (8004204 <USB_DeactivateEndpoint+0x1b4>)
 80041ee:	4013      	ands	r3, r2
 80041f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	3714      	adds	r7, #20
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr
 8004200:	ec337800 	.word	0xec337800
 8004204:	eff37800 	.word	0xeff37800

08004208 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08a      	sub	sp, #40	@ 0x28
 800420c:	af02      	add	r7, sp, #8
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	4613      	mov	r3, r2
 8004214:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	785b      	ldrb	r3, [r3, #1]
 8004224:	2b01      	cmp	r3, #1
 8004226:	f040 815c 	bne.w	80044e2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	699b      	ldr	r3, [r3, #24]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d132      	bne.n	8004298 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004232:	69bb      	ldr	r3, [r7, #24]
 8004234:	015a      	lsls	r2, r3, #5
 8004236:	69fb      	ldr	r3, [r7, #28]
 8004238:	4413      	add	r3, r2
 800423a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800423e:	691b      	ldr	r3, [r3, #16]
 8004240:	69ba      	ldr	r2, [r7, #24]
 8004242:	0151      	lsls	r1, r2, #5
 8004244:	69fa      	ldr	r2, [r7, #28]
 8004246:	440a      	add	r2, r1
 8004248:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800424c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004250:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004254:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	015a      	lsls	r2, r3, #5
 800425a:	69fb      	ldr	r3, [r7, #28]
 800425c:	4413      	add	r3, r2
 800425e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	69ba      	ldr	r2, [r7, #24]
 8004266:	0151      	lsls	r1, r2, #5
 8004268:	69fa      	ldr	r2, [r7, #28]
 800426a:	440a      	add	r2, r1
 800426c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004270:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004274:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004276:	69bb      	ldr	r3, [r7, #24]
 8004278:	015a      	lsls	r2, r3, #5
 800427a:	69fb      	ldr	r3, [r7, #28]
 800427c:	4413      	add	r3, r2
 800427e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	69ba      	ldr	r2, [r7, #24]
 8004286:	0151      	lsls	r1, r2, #5
 8004288:	69fa      	ldr	r2, [r7, #28]
 800428a:	440a      	add	r2, r1
 800428c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004290:	0cdb      	lsrs	r3, r3, #19
 8004292:	04db      	lsls	r3, r3, #19
 8004294:	6113      	str	r3, [r2, #16]
 8004296:	e074      	b.n	8004382 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004298:	69bb      	ldr	r3, [r7, #24]
 800429a:	015a      	lsls	r2, r3, #5
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	4413      	add	r3, r2
 80042a0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042a4:	691b      	ldr	r3, [r3, #16]
 80042a6:	69ba      	ldr	r2, [r7, #24]
 80042a8:	0151      	lsls	r1, r2, #5
 80042aa:	69fa      	ldr	r2, [r7, #28]
 80042ac:	440a      	add	r2, r1
 80042ae:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042b2:	0cdb      	lsrs	r3, r3, #19
 80042b4:	04db      	lsls	r3, r3, #19
 80042b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80042b8:	69bb      	ldr	r3, [r7, #24]
 80042ba:	015a      	lsls	r2, r3, #5
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	4413      	add	r3, r2
 80042c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	69ba      	ldr	r2, [r7, #24]
 80042c8:	0151      	lsls	r1, r2, #5
 80042ca:	69fa      	ldr	r2, [r7, #28]
 80042cc:	440a      	add	r2, r1
 80042ce:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80042d2:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80042d6:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80042da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80042dc:	69bb      	ldr	r3, [r7, #24]
 80042de:	015a      	lsls	r2, r3, #5
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	4413      	add	r3, r2
 80042e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80042e8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80042ea:	68bb      	ldr	r3, [r7, #8]
 80042ec:	6999      	ldr	r1, [r3, #24]
 80042ee:	68bb      	ldr	r3, [r7, #8]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	440b      	add	r3, r1
 80042f4:	1e59      	subs	r1, r3, #1
 80042f6:	68bb      	ldr	r3, [r7, #8]
 80042f8:	68db      	ldr	r3, [r3, #12]
 80042fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80042fe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004300:	4b9d      	ldr	r3, [pc, #628]	@ (8004578 <USB_EPStartXfer+0x370>)
 8004302:	400b      	ands	r3, r1
 8004304:	69b9      	ldr	r1, [r7, #24]
 8004306:	0148      	lsls	r0, r1, #5
 8004308:	69f9      	ldr	r1, [r7, #28]
 800430a:	4401      	add	r1, r0
 800430c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004310:	4313      	orrs	r3, r2
 8004312:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004314:	69bb      	ldr	r3, [r7, #24]
 8004316:	015a      	lsls	r2, r3, #5
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	4413      	add	r3, r2
 800431c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004320:	691a      	ldr	r2, [r3, #16]
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	699b      	ldr	r3, [r3, #24]
 8004326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800432a:	69b9      	ldr	r1, [r7, #24]
 800432c:	0148      	lsls	r0, r1, #5
 800432e:	69f9      	ldr	r1, [r7, #28]
 8004330:	4401      	add	r1, r0
 8004332:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004336:	4313      	orrs	r3, r2
 8004338:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	791b      	ldrb	r3, [r3, #4]
 800433e:	2b01      	cmp	r3, #1
 8004340:	d11f      	bne.n	8004382 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	015a      	lsls	r2, r3, #5
 8004346:	69fb      	ldr	r3, [r7, #28]
 8004348:	4413      	add	r3, r2
 800434a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	0151      	lsls	r1, r2, #5
 8004354:	69fa      	ldr	r2, [r7, #28]
 8004356:	440a      	add	r2, r1
 8004358:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800435c:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8004360:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	015a      	lsls	r2, r3, #5
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	4413      	add	r3, r2
 800436a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800436e:	691b      	ldr	r3, [r3, #16]
 8004370:	69ba      	ldr	r2, [r7, #24]
 8004372:	0151      	lsls	r1, r2, #5
 8004374:	69fa      	ldr	r2, [r7, #28]
 8004376:	440a      	add	r2, r1
 8004378:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800437c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004380:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004382:	79fb      	ldrb	r3, [r7, #7]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d14b      	bne.n	8004420 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004388:	68bb      	ldr	r3, [r7, #8]
 800438a:	695b      	ldr	r3, [r3, #20]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d009      	beq.n	80043a4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004390:	69bb      	ldr	r3, [r7, #24]
 8004392:	015a      	lsls	r2, r3, #5
 8004394:	69fb      	ldr	r3, [r7, #28]
 8004396:	4413      	add	r3, r2
 8004398:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800439c:	461a      	mov	r2, r3
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	695b      	ldr	r3, [r3, #20]
 80043a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	791b      	ldrb	r3, [r3, #4]
 80043a8:	2b01      	cmp	r3, #1
 80043aa:	d128      	bne.n	80043fe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d110      	bne.n	80043de <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	0151      	lsls	r1, r2, #5
 80043ce:	69fa      	ldr	r2, [r7, #28]
 80043d0:	440a      	add	r2, r1
 80043d2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043d6:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	e00f      	b.n	80043fe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	0151      	lsls	r1, r2, #5
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	440a      	add	r2, r1
 80043f4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80043f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80043fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	015a      	lsls	r2, r3, #5
 8004402:	69fb      	ldr	r3, [r7, #28]
 8004404:	4413      	add	r3, r2
 8004406:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	69ba      	ldr	r2, [r7, #24]
 800440e:	0151      	lsls	r1, r2, #5
 8004410:	69fa      	ldr	r2, [r7, #28]
 8004412:	440a      	add	r2, r1
 8004414:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004418:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800441c:	6013      	str	r3, [r2, #0]
 800441e:	e133      	b.n	8004688 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004420:	69bb      	ldr	r3, [r7, #24]
 8004422:	015a      	lsls	r2, r3, #5
 8004424:	69fb      	ldr	r3, [r7, #28]
 8004426:	4413      	add	r3, r2
 8004428:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	0151      	lsls	r1, r2, #5
 8004432:	69fa      	ldr	r2, [r7, #28]
 8004434:	440a      	add	r2, r1
 8004436:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800443a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800443e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	791b      	ldrb	r3, [r3, #4]
 8004444:	2b01      	cmp	r3, #1
 8004446:	d015      	beq.n	8004474 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 811b 	beq.w	8004688 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004452:	69fb      	ldr	r3, [r7, #28]
 8004454:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004458:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	781b      	ldrb	r3, [r3, #0]
 800445e:	f003 030f 	and.w	r3, r3, #15
 8004462:	2101      	movs	r1, #1
 8004464:	fa01 f303 	lsl.w	r3, r1, r3
 8004468:	69f9      	ldr	r1, [r7, #28]
 800446a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800446e:	4313      	orrs	r3, r2
 8004470:	634b      	str	r3, [r1, #52]	@ 0x34
 8004472:	e109      	b.n	8004688 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004474:	69fb      	ldr	r3, [r7, #28]
 8004476:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004480:	2b00      	cmp	r3, #0
 8004482:	d110      	bne.n	80044a6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004484:	69bb      	ldr	r3, [r7, #24]
 8004486:	015a      	lsls	r2, r3, #5
 8004488:	69fb      	ldr	r3, [r7, #28]
 800448a:	4413      	add	r3, r2
 800448c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	69ba      	ldr	r2, [r7, #24]
 8004494:	0151      	lsls	r1, r2, #5
 8004496:	69fa      	ldr	r2, [r7, #28]
 8004498:	440a      	add	r2, r1
 800449a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800449e:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80044a2:	6013      	str	r3, [r2, #0]
 80044a4:	e00f      	b.n	80044c6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	015a      	lsls	r2, r3, #5
 80044aa:	69fb      	ldr	r3, [r7, #28]
 80044ac:	4413      	add	r3, r2
 80044ae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	69ba      	ldr	r2, [r7, #24]
 80044b6:	0151      	lsls	r1, r2, #5
 80044b8:	69fa      	ldr	r2, [r7, #28]
 80044ba:	440a      	add	r2, r1
 80044bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80044c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	6919      	ldr	r1, [r3, #16]
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	781a      	ldrb	r2, [r3, #0]
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	699b      	ldr	r3, [r3, #24]
 80044d2:	b298      	uxth	r0, r3
 80044d4:	79fb      	ldrb	r3, [r7, #7]
 80044d6:	9300      	str	r3, [sp, #0]
 80044d8:	4603      	mov	r3, r0
 80044da:	68f8      	ldr	r0, [r7, #12]
 80044dc:	f000 fade 	bl	8004a9c <USB_WritePacket>
 80044e0:	e0d2      	b.n	8004688 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	015a      	lsls	r2, r3, #5
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	4413      	add	r3, r2
 80044ea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80044ee:	691b      	ldr	r3, [r3, #16]
 80044f0:	69ba      	ldr	r2, [r7, #24]
 80044f2:	0151      	lsls	r1, r2, #5
 80044f4:	69fa      	ldr	r2, [r7, #28]
 80044f6:	440a      	add	r2, r1
 80044f8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80044fc:	0cdb      	lsrs	r3, r3, #19
 80044fe:	04db      	lsls	r3, r3, #19
 8004500:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004502:	69bb      	ldr	r3, [r7, #24]
 8004504:	015a      	lsls	r2, r3, #5
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	4413      	add	r3, r2
 800450a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800450e:	691b      	ldr	r3, [r3, #16]
 8004510:	69ba      	ldr	r2, [r7, #24]
 8004512:	0151      	lsls	r1, r2, #5
 8004514:	69fa      	ldr	r2, [r7, #28]
 8004516:	440a      	add	r2, r1
 8004518:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800451c:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004520:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004524:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	699b      	ldr	r3, [r3, #24]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d126      	bne.n	800457c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800452e:	69bb      	ldr	r3, [r7, #24]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	69fb      	ldr	r3, [r7, #28]
 8004534:	4413      	add	r3, r2
 8004536:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800453a:	691a      	ldr	r2, [r3, #16]
 800453c:	68bb      	ldr	r3, [r7, #8]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004544:	69b9      	ldr	r1, [r7, #24]
 8004546:	0148      	lsls	r0, r1, #5
 8004548:	69f9      	ldr	r1, [r7, #28]
 800454a:	4401      	add	r1, r0
 800454c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8004550:	4313      	orrs	r3, r2
 8004552:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004554:	69bb      	ldr	r3, [r7, #24]
 8004556:	015a      	lsls	r2, r3, #5
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	4413      	add	r3, r2
 800455c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004560:	691b      	ldr	r3, [r3, #16]
 8004562:	69ba      	ldr	r2, [r7, #24]
 8004564:	0151      	lsls	r1, r2, #5
 8004566:	69fa      	ldr	r2, [r7, #28]
 8004568:	440a      	add	r2, r1
 800456a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800456e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004572:	6113      	str	r3, [r2, #16]
 8004574:	e03a      	b.n	80045ec <USB_EPStartXfer+0x3e4>
 8004576:	bf00      	nop
 8004578:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	699a      	ldr	r2, [r3, #24]
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	4413      	add	r3, r2
 8004586:	1e5a      	subs	r2, r3, #1
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004590:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	8afa      	ldrh	r2, [r7, #22]
 8004598:	fb03 f202 	mul.w	r2, r3, r2
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045ac:	691a      	ldr	r2, [r3, #16]
 80045ae:	8afb      	ldrh	r3, [r7, #22]
 80045b0:	04d9      	lsls	r1, r3, #19
 80045b2:	4b38      	ldr	r3, [pc, #224]	@ (8004694 <USB_EPStartXfer+0x48c>)
 80045b4:	400b      	ands	r3, r1
 80045b6:	69b9      	ldr	r1, [r7, #24]
 80045b8:	0148      	lsls	r0, r1, #5
 80045ba:	69f9      	ldr	r1, [r7, #28]
 80045bc:	4401      	add	r1, r0
 80045be:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80045c2:	4313      	orrs	r3, r2
 80045c4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	015a      	lsls	r2, r3, #5
 80045ca:	69fb      	ldr	r3, [r7, #28]
 80045cc:	4413      	add	r3, r2
 80045ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80045d2:	691a      	ldr	r2, [r3, #16]
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045dc:	69b9      	ldr	r1, [r7, #24]
 80045de:	0148      	lsls	r0, r1, #5
 80045e0:	69f9      	ldr	r1, [r7, #28]
 80045e2:	4401      	add	r1, r0
 80045e4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80045e8:	4313      	orrs	r3, r2
 80045ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80045ec:	79fb      	ldrb	r3, [r7, #7]
 80045ee:	2b01      	cmp	r3, #1
 80045f0:	d10d      	bne.n	800460e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d009      	beq.n	800460e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	6919      	ldr	r1, [r3, #16]
 80045fe:	69bb      	ldr	r3, [r7, #24]
 8004600:	015a      	lsls	r2, r3, #5
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	4413      	add	r3, r2
 8004606:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800460a:	460a      	mov	r2, r1
 800460c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800460e:	68bb      	ldr	r3, [r7, #8]
 8004610:	791b      	ldrb	r3, [r3, #4]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d128      	bne.n	8004668 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004622:	2b00      	cmp	r3, #0
 8004624:	d110      	bne.n	8004648 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	015a      	lsls	r2, r3, #5
 800462a:	69fb      	ldr	r3, [r7, #28]
 800462c:	4413      	add	r3, r2
 800462e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	0151      	lsls	r1, r2, #5
 8004638:	69fa      	ldr	r2, [r7, #28]
 800463a:	440a      	add	r2, r1
 800463c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004640:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8004644:	6013      	str	r3, [r2, #0]
 8004646:	e00f      	b.n	8004668 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004648:	69bb      	ldr	r3, [r7, #24]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	69fb      	ldr	r3, [r7, #28]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	0151      	lsls	r1, r2, #5
 800465a:	69fa      	ldr	r2, [r7, #28]
 800465c:	440a      	add	r2, r1
 800465e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004662:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004666:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004668:	69bb      	ldr	r3, [r7, #24]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	0151      	lsls	r1, r2, #5
 800467a:	69fa      	ldr	r2, [r7, #28]
 800467c:	440a      	add	r2, r1
 800467e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004682:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004686:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004688:	2300      	movs	r3, #0
}
 800468a:	4618      	mov	r0, r3
 800468c:	3720      	adds	r7, #32
 800468e:	46bd      	mov	sp, r7
 8004690:	bd80      	pop	{r7, pc}
 8004692:	bf00      	nop
 8004694:	1ff80000 	.word	0x1ff80000

08004698 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004698:	b480      	push	{r7}
 800469a:	b087      	sub	sp, #28
 800469c:	af00      	add	r7, sp, #0
 800469e:	60f8      	str	r0, [r7, #12]
 80046a0:	60b9      	str	r1, [r7, #8]
 80046a2:	4613      	mov	r3, r2
 80046a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80046aa:	68bb      	ldr	r3, [r7, #8]
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	785b      	ldrb	r3, [r3, #1]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	f040 80ce 	bne.w	8004856 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d132      	bne.n	8004728 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80046c2:	693b      	ldr	r3, [r7, #16]
 80046c4:	015a      	lsls	r2, r3, #5
 80046c6:	697b      	ldr	r3, [r7, #20]
 80046c8:	4413      	add	r3, r2
 80046ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	0151      	lsls	r1, r2, #5
 80046d4:	697a      	ldr	r2, [r7, #20]
 80046d6:	440a      	add	r2, r1
 80046d8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80046dc:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80046e0:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80046e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046e6:	693b      	ldr	r3, [r7, #16]
 80046e8:	015a      	lsls	r2, r3, #5
 80046ea:	697b      	ldr	r3, [r7, #20]
 80046ec:	4413      	add	r3, r2
 80046ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80046f2:	691b      	ldr	r3, [r3, #16]
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	0151      	lsls	r1, r2, #5
 80046f8:	697a      	ldr	r2, [r7, #20]
 80046fa:	440a      	add	r2, r1
 80046fc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004700:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004704:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	015a      	lsls	r2, r3, #5
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	4413      	add	r3, r2
 800470e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	0151      	lsls	r1, r2, #5
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	440a      	add	r2, r1
 800471c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004720:	0cdb      	lsrs	r3, r3, #19
 8004722:	04db      	lsls	r3, r3, #19
 8004724:	6113      	str	r3, [r2, #16]
 8004726:	e04e      	b.n	80047c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004728:	693b      	ldr	r3, [r7, #16]
 800472a:	015a      	lsls	r2, r3, #5
 800472c:	697b      	ldr	r3, [r7, #20]
 800472e:	4413      	add	r3, r2
 8004730:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004734:	691b      	ldr	r3, [r3, #16]
 8004736:	693a      	ldr	r2, [r7, #16]
 8004738:	0151      	lsls	r1, r2, #5
 800473a:	697a      	ldr	r2, [r7, #20]
 800473c:	440a      	add	r2, r1
 800473e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004742:	0cdb      	lsrs	r3, r3, #19
 8004744:	04db      	lsls	r3, r3, #19
 8004746:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004748:	693b      	ldr	r3, [r7, #16]
 800474a:	015a      	lsls	r2, r3, #5
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	4413      	add	r3, r2
 8004750:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	0151      	lsls	r1, r2, #5
 800475a:	697a      	ldr	r2, [r7, #20]
 800475c:	440a      	add	r2, r1
 800475e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004762:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004766:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 800476a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	699a      	ldr	r2, [r3, #24]
 8004770:	68bb      	ldr	r3, [r7, #8]
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	429a      	cmp	r2, r3
 8004776:	d903      	bls.n	8004780 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004778:	68bb      	ldr	r3, [r7, #8]
 800477a:	68da      	ldr	r2, [r3, #12]
 800477c:	68bb      	ldr	r3, [r7, #8]
 800477e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004780:	693b      	ldr	r3, [r7, #16]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800478c:	691b      	ldr	r3, [r3, #16]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	0151      	lsls	r1, r2, #5
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	440a      	add	r2, r1
 8004796:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800479a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800479e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	697b      	ldr	r3, [r7, #20]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047ac:	691a      	ldr	r2, [r3, #16]
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	699b      	ldr	r3, [r3, #24]
 80047b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b6:	6939      	ldr	r1, [r7, #16]
 80047b8:	0148      	lsls	r0, r1, #5
 80047ba:	6979      	ldr	r1, [r7, #20]
 80047bc:	4401      	add	r1, r0
 80047be:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 80047c2:	4313      	orrs	r3, r2
 80047c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80047c6:	79fb      	ldrb	r3, [r7, #7]
 80047c8:	2b01      	cmp	r3, #1
 80047ca:	d11e      	bne.n	800480a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	695b      	ldr	r3, [r3, #20]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d009      	beq.n	80047e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	015a      	lsls	r2, r3, #5
 80047d8:	697b      	ldr	r3, [r7, #20]
 80047da:	4413      	add	r3, r2
 80047dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047e0:	461a      	mov	r2, r3
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	695b      	ldr	r3, [r3, #20]
 80047e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	015a      	lsls	r2, r3, #5
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	4413      	add	r3, r2
 80047f0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	0151      	lsls	r1, r2, #5
 80047fa:	697a      	ldr	r2, [r7, #20]
 80047fc:	440a      	add	r2, r1
 80047fe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004802:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004806:	6013      	str	r3, [r2, #0]
 8004808:	e097      	b.n	800493a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	4413      	add	r3, r2
 8004812:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	693a      	ldr	r2, [r7, #16]
 800481a:	0151      	lsls	r1, r2, #5
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	440a      	add	r2, r1
 8004820:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004824:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004828:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	699b      	ldr	r3, [r3, #24]
 800482e:	2b00      	cmp	r3, #0
 8004830:	f000 8083 	beq.w	800493a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004834:	697b      	ldr	r3, [r7, #20]
 8004836:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800483a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800483c:	68bb      	ldr	r3, [r7, #8]
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	f003 030f 	and.w	r3, r3, #15
 8004844:	2101      	movs	r1, #1
 8004846:	fa01 f303 	lsl.w	r3, r1, r3
 800484a:	6979      	ldr	r1, [r7, #20]
 800484c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004850:	4313      	orrs	r3, r2
 8004852:	634b      	str	r3, [r1, #52]	@ 0x34
 8004854:	e071      	b.n	800493a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	015a      	lsls	r2, r3, #5
 800485a:	697b      	ldr	r3, [r7, #20]
 800485c:	4413      	add	r3, r2
 800485e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004862:	691b      	ldr	r3, [r3, #16]
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	0151      	lsls	r1, r2, #5
 8004868:	697a      	ldr	r2, [r7, #20]
 800486a:	440a      	add	r2, r1
 800486c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004870:	0cdb      	lsrs	r3, r3, #19
 8004872:	04db      	lsls	r3, r3, #19
 8004874:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	015a      	lsls	r2, r3, #5
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	4413      	add	r3, r2
 800487e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	693a      	ldr	r2, [r7, #16]
 8004886:	0151      	lsls	r1, r2, #5
 8004888:	697a      	ldr	r2, [r7, #20]
 800488a:	440a      	add	r2, r1
 800488c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004890:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004894:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004898:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80048a2:	68bb      	ldr	r3, [r7, #8]
 80048a4:	68da      	ldr	r2, [r3, #12]
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	68bb      	ldr	r3, [r7, #8]
 80048b0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	015a      	lsls	r2, r3, #5
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	4413      	add	r3, r2
 80048ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048be:	691b      	ldr	r3, [r3, #16]
 80048c0:	693a      	ldr	r2, [r7, #16]
 80048c2:	0151      	lsls	r1, r2, #5
 80048c4:	697a      	ldr	r2, [r7, #20]
 80048c6:	440a      	add	r2, r1
 80048c8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80048cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80048d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80048d2:	693b      	ldr	r3, [r7, #16]
 80048d4:	015a      	lsls	r2, r3, #5
 80048d6:	697b      	ldr	r3, [r7, #20]
 80048d8:	4413      	add	r3, r2
 80048da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	69db      	ldr	r3, [r3, #28]
 80048e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048e8:	6939      	ldr	r1, [r7, #16]
 80048ea:	0148      	lsls	r0, r1, #5
 80048ec:	6979      	ldr	r1, [r7, #20]
 80048ee:	4401      	add	r1, r0
 80048f0:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80048f4:	4313      	orrs	r3, r2
 80048f6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80048f8:	79fb      	ldrb	r3, [r7, #7]
 80048fa:	2b01      	cmp	r3, #1
 80048fc:	d10d      	bne.n	800491a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	691b      	ldr	r3, [r3, #16]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d009      	beq.n	800491a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	6919      	ldr	r1, [r3, #16]
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	015a      	lsls	r2, r3, #5
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	4413      	add	r3, r2
 8004912:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004916:	460a      	mov	r2, r1
 8004918:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	0151      	lsls	r1, r2, #5
 800492c:	697a      	ldr	r2, [r7, #20]
 800492e:	440a      	add	r2, r1
 8004930:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004934:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8004938:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800493a:	2300      	movs	r3, #0
}
 800493c:	4618      	mov	r0, r3
 800493e:	371c      	adds	r7, #28
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
 8004950:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004952:	2300      	movs	r3, #0
 8004954:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004956:	2300      	movs	r3, #0
 8004958:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800495e:	683b      	ldr	r3, [r7, #0]
 8004960:	785b      	ldrb	r3, [r3, #1]
 8004962:	2b01      	cmp	r3, #1
 8004964:	d14a      	bne.n	80049fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	015a      	lsls	r2, r3, #5
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	4413      	add	r3, r2
 8004970:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800497a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800497e:	f040 8086 	bne.w	8004a8e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	781b      	ldrb	r3, [r3, #0]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	683a      	ldr	r2, [r7, #0]
 8004994:	7812      	ldrb	r2, [r2, #0]
 8004996:	0151      	lsls	r1, r2, #5
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	440a      	add	r2, r1
 800499c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80049a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	015a      	lsls	r2, r3, #5
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	4413      	add	r3, r2
 80049b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	683a      	ldr	r2, [r7, #0]
 80049b8:	7812      	ldrb	r2, [r2, #0]
 80049ba:	0151      	lsls	r1, r2, #5
 80049bc:	693a      	ldr	r2, [r7, #16]
 80049be:	440a      	add	r2, r1
 80049c0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80049c4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80049c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	3301      	adds	r3, #1
 80049ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80049d6:	4293      	cmp	r3, r2
 80049d8:	d902      	bls.n	80049e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80049da:	2301      	movs	r3, #1
 80049dc:	75fb      	strb	r3, [r7, #23]
          break;
 80049de:	e056      	b.n	8004a8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	781b      	ldrb	r3, [r3, #0]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80049f4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80049f8:	d0e7      	beq.n	80049ca <USB_EPStopXfer+0x82>
 80049fa:	e048      	b.n	8004a8e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	015a      	lsls	r2, r3, #5
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	4413      	add	r3, r2
 8004a06:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a10:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a14:	d13b      	bne.n	8004a8e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	781b      	ldrb	r3, [r3, #0]
 8004a1a:	015a      	lsls	r2, r3, #5
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	4413      	add	r3, r2
 8004a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	7812      	ldrb	r2, [r2, #0]
 8004a2a:	0151      	lsls	r1, r2, #5
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	440a      	add	r2, r1
 8004a30:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a34:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004a38:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	781b      	ldrb	r3, [r3, #0]
 8004a3e:	015a      	lsls	r2, r3, #5
 8004a40:	693b      	ldr	r3, [r7, #16]
 8004a42:	4413      	add	r3, r2
 8004a44:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	7812      	ldrb	r2, [r2, #0]
 8004a4e:	0151      	lsls	r1, r2, #5
 8004a50:	693a      	ldr	r2, [r7, #16]
 8004a52:	440a      	add	r2, r1
 8004a54:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004a58:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	3301      	adds	r3, #1
 8004a62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	f242 7210 	movw	r2, #10000	@ 0x2710
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d902      	bls.n	8004a74 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	75fb      	strb	r3, [r7, #23]
          break;
 8004a72:	e00c      	b.n	8004a8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	781b      	ldrb	r3, [r3, #0]
 8004a78:	015a      	lsls	r2, r3, #5
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004a88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004a8c:	d0e7      	beq.n	8004a5e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	371c      	adds	r7, #28
 8004a94:	46bd      	mov	sp, r7
 8004a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9a:	4770      	bx	lr

08004a9c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004a9c:	b480      	push	{r7}
 8004a9e:	b089      	sub	sp, #36	@ 0x24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	60f8      	str	r0, [r7, #12]
 8004aa4:	60b9      	str	r1, [r7, #8]
 8004aa6:	4611      	mov	r1, r2
 8004aa8:	461a      	mov	r2, r3
 8004aaa:	460b      	mov	r3, r1
 8004aac:	71fb      	strb	r3, [r7, #7]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004ab6:	68bb      	ldr	r3, [r7, #8]
 8004ab8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004aba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d123      	bne.n	8004b0a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ac2:	88bb      	ldrh	r3, [r7, #4]
 8004ac4:	3303      	adds	r3, #3
 8004ac6:	089b      	lsrs	r3, r3, #2
 8004ac8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004aca:	2300      	movs	r3, #0
 8004acc:	61bb      	str	r3, [r7, #24]
 8004ace:	e018      	b.n	8004b02 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004ad0:	79fb      	ldrb	r3, [r7, #7]
 8004ad2:	031a      	lsls	r2, r3, #12
 8004ad4:	697b      	ldr	r3, [r7, #20]
 8004ad6:	4413      	add	r3, r2
 8004ad8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004adc:	461a      	mov	r2, r3
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	3301      	adds	r3, #1
 8004aee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	3301      	adds	r3, #1
 8004af4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	3301      	adds	r3, #1
 8004afa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004afc:	69bb      	ldr	r3, [r7, #24]
 8004afe:	3301      	adds	r3, #1
 8004b00:	61bb      	str	r3, [r7, #24]
 8004b02:	69ba      	ldr	r2, [r7, #24]
 8004b04:	693b      	ldr	r3, [r7, #16]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d3e2      	bcc.n	8004ad0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004b0a:	2300      	movs	r3, #0
}
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3724      	adds	r7, #36	@ 0x24
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	b08b      	sub	sp, #44	@ 0x2c
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	60b9      	str	r1, [r7, #8]
 8004b22:	4613      	mov	r3, r2
 8004b24:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004b2e:	88fb      	ldrh	r3, [r7, #6]
 8004b30:	089b      	lsrs	r3, r3, #2
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004b36:	88fb      	ldrh	r3, [r7, #6]
 8004b38:	f003 0303 	and.w	r3, r3, #3
 8004b3c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004b3e:	2300      	movs	r3, #0
 8004b40:	623b      	str	r3, [r7, #32]
 8004b42:	e014      	b.n	8004b6e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b4a:	681a      	ldr	r2, [r3, #0]
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b4e:	601a      	str	r2, [r3, #0]
    pDest++;
 8004b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b52:	3301      	adds	r3, #1
 8004b54:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b58:	3301      	adds	r3, #1
 8004b5a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b5e:	3301      	adds	r3, #1
 8004b60:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8004b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b64:	3301      	adds	r3, #1
 8004b66:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8004b68:	6a3b      	ldr	r3, [r7, #32]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	623b      	str	r3, [r7, #32]
 8004b6e:	6a3a      	ldr	r2, [r7, #32]
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	429a      	cmp	r2, r3
 8004b74:	d3e6      	bcc.n	8004b44 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004b76:	8bfb      	ldrh	r3, [r7, #30]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d01e      	beq.n	8004bba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004b80:	69bb      	ldr	r3, [r7, #24]
 8004b82:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8004b86:	461a      	mov	r2, r3
 8004b88:	f107 0310 	add.w	r3, r7, #16
 8004b8c:	6812      	ldr	r2, [r2, #0]
 8004b8e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004b90:	693a      	ldr	r2, [r7, #16]
 8004b92:	6a3b      	ldr	r3, [r7, #32]
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	00db      	lsls	r3, r3, #3
 8004b98:	fa22 f303 	lsr.w	r3, r2, r3
 8004b9c:	b2da      	uxtb	r2, r3
 8004b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ba0:	701a      	strb	r2, [r3, #0]
      i++;
 8004ba2:	6a3b      	ldr	r3, [r7, #32]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	623b      	str	r3, [r7, #32]
      pDest++;
 8004ba8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004baa:	3301      	adds	r3, #1
 8004bac:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8004bae:	8bfb      	ldrh	r3, [r7, #30]
 8004bb0:	3b01      	subs	r3, #1
 8004bb2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004bb4:	8bfb      	ldrh	r3, [r7, #30]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d1ea      	bne.n	8004b90 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004bba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	372c      	adds	r7, #44	@ 0x2c
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	785b      	ldrb	r3, [r3, #1]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d12c      	bne.n	8004c3e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004be4:	68bb      	ldr	r3, [r7, #8]
 8004be6:	015a      	lsls	r2, r3, #5
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	4413      	add	r3, r2
 8004bec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	db12      	blt.n	8004c1c <USB_EPSetStall+0x54>
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d00f      	beq.n	8004c1c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	015a      	lsls	r2, r3, #5
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	68ba      	ldr	r2, [r7, #8]
 8004c0c:	0151      	lsls	r1, r2, #5
 8004c0e:	68fa      	ldr	r2, [r7, #12]
 8004c10:	440a      	add	r2, r1
 8004c12:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c16:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c1a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	68ba      	ldr	r2, [r7, #8]
 8004c2c:	0151      	lsls	r1, r2, #5
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	440a      	add	r2, r1
 8004c32:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c36:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c3a:	6013      	str	r3, [r2, #0]
 8004c3c:	e02b      	b.n	8004c96 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004c3e:	68bb      	ldr	r3, [r7, #8]
 8004c40:	015a      	lsls	r2, r3, #5
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4413      	add	r3, r2
 8004c46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	db12      	blt.n	8004c76 <USB_EPSetStall+0xae>
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00f      	beq.n	8004c76 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004c56:	68bb      	ldr	r3, [r7, #8]
 8004c58:	015a      	lsls	r2, r3, #5
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	4413      	add	r3, r2
 8004c5e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	68ba      	ldr	r2, [r7, #8]
 8004c66:	0151      	lsls	r1, r2, #5
 8004c68:	68fa      	ldr	r2, [r7, #12]
 8004c6a:	440a      	add	r2, r1
 8004c6c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c70:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004c74:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004c76:	68bb      	ldr	r3, [r7, #8]
 8004c78:	015a      	lsls	r2, r3, #5
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68ba      	ldr	r2, [r7, #8]
 8004c86:	0151      	lsls	r1, r2, #5
 8004c88:	68fa      	ldr	r2, [r7, #12]
 8004c8a:	440a      	add	r2, r1
 8004c8c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004c90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004c94:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c96:	2300      	movs	r3, #0
}
 8004c98:	4618      	mov	r0, r3
 8004c9a:	3714      	adds	r7, #20
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr

08004ca4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
 8004cac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004cb2:	683b      	ldr	r3, [r7, #0]
 8004cb4:	781b      	ldrb	r3, [r3, #0]
 8004cb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004cb8:	683b      	ldr	r3, [r7, #0]
 8004cba:	785b      	ldrb	r3, [r3, #1]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d128      	bne.n	8004d12 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	68ba      	ldr	r2, [r7, #8]
 8004cd0:	0151      	lsls	r1, r2, #5
 8004cd2:	68fa      	ldr	r2, [r7, #12]
 8004cd4:	440a      	add	r2, r1
 8004cd6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004cda:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004cde:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	791b      	ldrb	r3, [r3, #4]
 8004ce4:	2b03      	cmp	r3, #3
 8004ce6:	d003      	beq.n	8004cf0 <USB_EPClearStall+0x4c>
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	791b      	ldrb	r3, [r3, #4]
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d138      	bne.n	8004d62 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	0151      	lsls	r1, r2, #5
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	440a      	add	r2, r1
 8004d06:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d0a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d0e:	6013      	str	r3, [r2, #0]
 8004d10:	e027      	b.n	8004d62 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	015a      	lsls	r2, r3, #5
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	4413      	add	r3, r2
 8004d1a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68ba      	ldr	r2, [r7, #8]
 8004d22:	0151      	lsls	r1, r2, #5
 8004d24:	68fa      	ldr	r2, [r7, #12]
 8004d26:	440a      	add	r2, r1
 8004d28:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d2c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8004d30:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	791b      	ldrb	r3, [r3, #4]
 8004d36:	2b03      	cmp	r3, #3
 8004d38:	d003      	beq.n	8004d42 <USB_EPClearStall+0x9e>
 8004d3a:	683b      	ldr	r3, [r7, #0]
 8004d3c:	791b      	ldrb	r3, [r3, #4]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d10f      	bne.n	8004d62 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	015a      	lsls	r2, r3, #5
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	4413      	add	r3, r2
 8004d4a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	0151      	lsls	r1, r2, #5
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	440a      	add	r2, r1
 8004d58:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004d5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004d60:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004d62:	2300      	movs	r3, #0
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3714      	adds	r7, #20
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6e:	4770      	bx	lr

08004d70 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004d70:	b480      	push	{r7}
 8004d72:	b085      	sub	sp, #20
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
 8004d78:	460b      	mov	r3, r1
 8004d7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d8e:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8004d92:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	78fb      	ldrb	r3, [r7, #3]
 8004d9e:	011b      	lsls	r3, r3, #4
 8004da0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8004da4:	68f9      	ldr	r1, [r7, #12]
 8004da6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004daa:	4313      	orrs	r3, r2
 8004dac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004dae:	2300      	movs	r3, #0
}
 8004db0:	4618      	mov	r0, r3
 8004db2:	3714      	adds	r7, #20
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr

08004dbc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004dbc:	b480      	push	{r7}
 8004dbe:	b085      	sub	sp, #20
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	68fa      	ldr	r2, [r7, #12]
 8004dd2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004dd6:	f023 0303 	bic.w	r3, r3, #3
 8004dda:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	68fa      	ldr	r2, [r7, #12]
 8004de6:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dea:	f023 0302 	bic.w	r3, r3, #2
 8004dee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr

08004dfe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004dfe:	b480      	push	{r7}
 8004e00:	b085      	sub	sp, #20
 8004e02:	af00      	add	r7, sp, #0
 8004e04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004e18:	f023 0303 	bic.w	r3, r3, #3
 8004e1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e24:	685b      	ldr	r3, [r3, #4]
 8004e26:	68fa      	ldr	r2, [r7, #12]
 8004e28:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004e2c:	f043 0302 	orr.w	r3, r3, #2
 8004e30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004e32:	2300      	movs	r3, #0
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b085      	sub	sp, #20
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	695b      	ldr	r3, [r3, #20]
 8004e4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	699b      	ldr	r3, [r3, #24]
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	4013      	ands	r3, r2
 8004e56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004e58:	68fb      	ldr	r3, [r7, #12]
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3714      	adds	r7, #20
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b085      	sub	sp, #20
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e78:	699b      	ldr	r3, [r3, #24]
 8004e7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e82:	69db      	ldr	r3, [r3, #28]
 8004e84:	68ba      	ldr	r2, [r7, #8]
 8004e86:	4013      	ands	r3, r2
 8004e88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	0c1b      	lsrs	r3, r3, #16
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3714      	adds	r7, #20
 8004e92:	46bd      	mov	sp, r7
 8004e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e98:	4770      	bx	lr

08004e9a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004e9a:	b480      	push	{r7}
 8004e9c:	b085      	sub	sp, #20
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eac:	699b      	ldr	r3, [r3, #24]
 8004eae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004eb6:	69db      	ldr	r3, [r3, #28]
 8004eb8:	68ba      	ldr	r2, [r7, #8]
 8004eba:	4013      	ands	r3, r2
 8004ebc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	b29b      	uxth	r3, r3
}
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	3714      	adds	r7, #20
 8004ec6:	46bd      	mov	sp, r7
 8004ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ecc:	4770      	bx	lr

08004ece <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ece:	b480      	push	{r7}
 8004ed0:	b085      	sub	sp, #20
 8004ed2:	af00      	add	r7, sp, #0
 8004ed4:	6078      	str	r0, [r7, #4]
 8004ed6:	460b      	mov	r3, r1
 8004ed8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004ede:	78fb      	ldrb	r3, [r7, #3]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004eea:	689b      	ldr	r3, [r3, #8]
 8004eec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ef4:	695b      	ldr	r3, [r3, #20]
 8004ef6:	68ba      	ldr	r2, [r7, #8]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004efc:	68bb      	ldr	r3, [r7, #8]
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3714      	adds	r7, #20
 8004f02:	46bd      	mov	sp, r7
 8004f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f08:	4770      	bx	lr

08004f0a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b087      	sub	sp, #28
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	6078      	str	r0, [r7, #4]
 8004f12:	460b      	mov	r3, r1
 8004f14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f20:	691b      	ldr	r3, [r3, #16]
 8004f22:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004f2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004f2c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004f2e:	78fb      	ldrb	r3, [r7, #3]
 8004f30:	f003 030f 	and.w	r3, r3, #15
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	fa22 f303 	lsr.w	r3, r2, r3
 8004f3a:	01db      	lsls	r3, r3, #7
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	693a      	ldr	r2, [r7, #16]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004f44:	78fb      	ldrb	r3, [r7, #3]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f50:	689b      	ldr	r3, [r3, #8]
 8004f52:	693a      	ldr	r2, [r7, #16]
 8004f54:	4013      	ands	r3, r2
 8004f56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004f58:	68bb      	ldr	r3, [r7, #8]
}
 8004f5a:	4618      	mov	r0, r3
 8004f5c:	371c      	adds	r7, #28
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f64:	4770      	bx	lr

08004f66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004f66:	b480      	push	{r7}
 8004f68:	b083      	sub	sp, #12
 8004f6a:	af00      	add	r7, sp, #0
 8004f6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	695b      	ldr	r3, [r3, #20]
 8004f72:	f003 0301 	and.w	r3, r3, #1
}
 8004f76:	4618      	mov	r0, r3
 8004f78:	370c      	adds	r7, #12
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr

08004f82 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004f82:	b480      	push	{r7}
 8004f84:	b085      	sub	sp, #20
 8004f86:	af00      	add	r7, sp, #0
 8004f88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	68fa      	ldr	r2, [r7, #12]
 8004f98:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f9c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8004fa0:	f023 0307 	bic.w	r3, r3, #7
 8004fa4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004fac:	685b      	ldr	r3, [r3, #4]
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004fb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004fb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004fba:	2300      	movs	r3, #0
}
 8004fbc:	4618      	mov	r0, r3
 8004fbe:	3714      	adds	r7, #20
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b087      	sub	sp, #28
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	460b      	mov	r3, r1
 8004fd2:	607a      	str	r2, [r7, #4]
 8004fd4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	333c      	adds	r3, #60	@ 0x3c
 8004fde:	3304      	adds	r3, #4
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	4a26      	ldr	r2, [pc, #152]	@ (8005080 <USB_EP0_OutStart+0xb8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d90a      	bls.n	8005002 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fec:	697b      	ldr	r3, [r7, #20]
 8004fee:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ffc:	d101      	bne.n	8005002 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
 8005000:	e037      	b.n	8005072 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005008:	461a      	mov	r2, r3
 800500a:	2300      	movs	r3, #0
 800500c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800500e:	697b      	ldr	r3, [r7, #20]
 8005010:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005014:	691b      	ldr	r3, [r3, #16]
 8005016:	697a      	ldr	r2, [r7, #20]
 8005018:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800501c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005020:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005028:	691b      	ldr	r3, [r3, #16]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005030:	f043 0318 	orr.w	r3, r3, #24
 8005034:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005036:	697b      	ldr	r3, [r7, #20]
 8005038:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800503c:	691b      	ldr	r3, [r3, #16]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005044:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005048:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800504a:	7afb      	ldrb	r3, [r7, #11]
 800504c:	2b01      	cmp	r3, #1
 800504e:	d10f      	bne.n	8005070 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005056:	461a      	mov	r2, r3
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	697a      	ldr	r2, [r7, #20]
 8005066:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800506a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800506e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	371c      	adds	r7, #28
 8005076:	46bd      	mov	sp, r7
 8005078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507c:	4770      	bx	lr
 800507e:	bf00      	nop
 8005080:	4f54300a 	.word	0x4f54300a

08005084 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005084:	b480      	push	{r7}
 8005086:	b085      	sub	sp, #20
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800508c:	2300      	movs	r3, #0
 800508e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	3301      	adds	r3, #1
 8005094:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	4a13      	ldr	r2, [pc, #76]	@ (80050e8 <USB_CoreReset+0x64>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d901      	bls.n	80050a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800509e:	2303      	movs	r3, #3
 80050a0:	e01b      	b.n	80050da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	691b      	ldr	r3, [r3, #16]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	daf2      	bge.n	8005090 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80050aa:	2300      	movs	r3, #0
 80050ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	691b      	ldr	r3, [r3, #16]
 80050b2:	f043 0201 	orr.w	r2, r3, #1
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	3301      	adds	r3, #1
 80050be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4a09      	ldr	r2, [pc, #36]	@ (80050e8 <USB_CoreReset+0x64>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d901      	bls.n	80050cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e006      	b.n	80050da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d0f0      	beq.n	80050ba <USB_CoreReset+0x36>

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	00030d40 	.word	0x00030d40

080050ec <USBD_CUSTOM_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_CUSTOM_HID_HandleTypeDef));
 80050f8:	2044      	movs	r0, #68	@ 0x44
 80050fa:	f002 fad3 	bl	80076a4 <USBD_static_malloc>
 80050fe:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	2b00      	cmp	r3, #0
 8005104:	d109      	bne.n	800511a <USBD_CUSTOM_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	32b0      	adds	r2, #176	@ 0xb0
 8005110:	2100      	movs	r1, #0
 8005112:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005116:	2302      	movs	r3, #2
 8005118:	e08b      	b.n	8005232 <USBD_CUSTOM_HID_Init+0x146>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	32b0      	adds	r2, #176	@ 0xb0
 8005124:	68f9      	ldr	r1, [r7, #12]
 8005126:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	32b0      	adds	r2, #176	@ 0xb0
 8005134:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  /* Get the Endpoints addresses allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	7c1b      	ldrb	r3, [r3, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d11b      	bne.n	800517e <USBD_CUSTOM_HID_Init+0x92>
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005146:	4b3d      	ldr	r3, [pc, #244]	@ (800523c <USBD_CUSTOM_HID_Init+0x150>)
 8005148:	781b      	ldrb	r3, [r3, #0]
 800514a:	f003 020f 	and.w	r2, r3, #15
 800514e:	6879      	ldr	r1, [r7, #4]
 8005150:	4613      	mov	r3, r2
 8005152:	009b      	lsls	r3, r3, #2
 8005154:	4413      	add	r3, r2
 8005156:	009b      	lsls	r3, r3, #2
 8005158:	440b      	add	r3, r1
 800515a:	3326      	adds	r3, #38	@ 0x26
 800515c:	2205      	movs	r2, #5
 800515e:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005160:	4b37      	ldr	r3, [pc, #220]	@ (8005240 <USBD_CUSTOM_HID_Init+0x154>)
 8005162:	781b      	ldrb	r3, [r3, #0]
 8005164:	f003 020f 	and.w	r2, r3, #15
 8005168:	6879      	ldr	r1, [r7, #4]
 800516a:	4613      	mov	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	440b      	add	r3, r1
 8005174:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 8005178:	2205      	movs	r2, #5
 800517a:	801a      	strh	r2, [r3, #0]
 800517c:	e01a      	b.n	80051b4 <USBD_CUSTOM_HID_Init+0xc8>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 800517e:	4b2f      	ldr	r3, [pc, #188]	@ (800523c <USBD_CUSTOM_HID_Init+0x150>)
 8005180:	781b      	ldrb	r3, [r3, #0]
 8005182:	f003 020f 	and.w	r2, r3, #15
 8005186:	6879      	ldr	r1, [r7, #4]
 8005188:	4613      	mov	r3, r2
 800518a:	009b      	lsls	r3, r3, #2
 800518c:	4413      	add	r3, r2
 800518e:	009b      	lsls	r3, r3, #2
 8005190:	440b      	add	r3, r1
 8005192:	3326      	adds	r3, #38	@ 0x26
 8005194:	2205      	movs	r2, #5
 8005196:	801a      	strh	r2, [r3, #0]
    pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005198:	4b29      	ldr	r3, [pc, #164]	@ (8005240 <USBD_CUSTOM_HID_Init+0x154>)
 800519a:	781b      	ldrb	r3, [r3, #0]
 800519c:	f003 020f 	and.w	r2, r3, #15
 80051a0:	6879      	ldr	r1, [r7, #4]
 80051a2:	4613      	mov	r3, r2
 80051a4:	009b      	lsls	r3, r3, #2
 80051a6:	4413      	add	r3, r2
 80051a8:	009b      	lsls	r3, r3, #2
 80051aa:	440b      	add	r3, r1
 80051ac:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80051b0:	2205      	movs	r2, #5
 80051b2:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDInEpAdd, USBD_EP_TYPE_INTR,
 80051b4:	4b21      	ldr	r3, [pc, #132]	@ (800523c <USBD_CUSTOM_HID_Init+0x150>)
 80051b6:	7819      	ldrb	r1, [r3, #0]
 80051b8:	2302      	movs	r3, #2
 80051ba:	2203      	movs	r2, #3
 80051bc:	6878      	ldr	r0, [r7, #4]
 80051be:	f002 f960 	bl	8007482 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPIN_SIZE);

  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 1U;
 80051c2:	4b1e      	ldr	r3, [pc, #120]	@ (800523c <USBD_CUSTOM_HID_Init+0x150>)
 80051c4:	781b      	ldrb	r3, [r3, #0]
 80051c6:	f003 020f 	and.w	r2, r3, #15
 80051ca:	6879      	ldr	r1, [r7, #4]
 80051cc:	4613      	mov	r3, r2
 80051ce:	009b      	lsls	r3, r3, #2
 80051d0:	4413      	add	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	440b      	add	r3, r1
 80051d6:	3324      	adds	r3, #36	@ 0x24
 80051d8:	2201      	movs	r2, #1
 80051da:	801a      	strh	r2, [r3, #0]

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, CUSTOMHIDOutEpAdd, USBD_EP_TYPE_INTR,
 80051dc:	4b18      	ldr	r3, [pc, #96]	@ (8005240 <USBD_CUSTOM_HID_Init+0x154>)
 80051de:	7819      	ldrb	r1, [r3, #0]
 80051e0:	2302      	movs	r3, #2
 80051e2:	2203      	movs	r2, #3
 80051e4:	6878      	ldr	r0, [r7, #4]
 80051e6:	f002 f94c 	bl	8007482 <USBD_LL_OpenEP>
                       CUSTOM_HID_EPOUT_SIZE);

  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 1U;
 80051ea:	4b15      	ldr	r3, [pc, #84]	@ (8005240 <USBD_CUSTOM_HID_Init+0x154>)
 80051ec:	781b      	ldrb	r3, [r3, #0]
 80051ee:	f003 020f 	and.w	r2, r3, #15
 80051f2:	6879      	ldr	r1, [r7, #4]
 80051f4:	4613      	mov	r3, r2
 80051f6:	009b      	lsls	r3, r3, #2
 80051f8:	4413      	add	r3, r2
 80051fa:	009b      	lsls	r3, r3, #2
 80051fc:	440b      	add	r3, r1
 80051fe:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8005202:	2201      	movs	r2, #1
 8005204:	801a      	strh	r2, [r3, #0]

  hhid->state = CUSTOM_HID_IDLE;
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2200      	movs	r2, #0
 800520a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	33b0      	adds	r3, #176	@ 0xb0
 8005218:	009b      	lsls	r3, r3, #2
 800521a:	4413      	add	r3, r2
 800521c:	685b      	ldr	r3, [r3, #4]
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	4798      	blx	r3

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 8005222:	4b07      	ldr	r3, [pc, #28]	@ (8005240 <USBD_CUSTOM_HID_Init+0x154>)
 8005224:	7819      	ldrb	r1, [r3, #0]
 8005226:	68fa      	ldr	r2, [r7, #12]
 8005228:	2330      	movs	r3, #48	@ 0x30
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f002 fa18 	bl	8007660 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 8005230:	2300      	movs	r3, #0
}
 8005232:	4618      	mov	r0, r3
 8005234:	3710      	adds	r7, #16
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
 800523a:	bf00      	nop
 800523c:	200000fe 	.word	0x200000fe
 8005240:	200000ff 	.word	0x200000ff

08005244 <USBD_CUSTOM_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005244:	b580      	push	{r7, lr}
 8005246:	b082      	sub	sp, #8
 8005248:	af00      	add	r7, sp, #0
 800524a:	6078      	str	r0, [r7, #4]
 800524c:	460b      	mov	r3, r1
 800524e:	70fb      	strb	r3, [r7, #3]
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close CUSTOM_HID EP IN */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDInEpAdd);
 8005250:	4b37      	ldr	r3, [pc, #220]	@ (8005330 <USBD_CUSTOM_HID_DeInit+0xec>)
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	4619      	mov	r1, r3
 8005256:	6878      	ldr	r0, [r7, #4]
 8005258:	f002 f939 	bl	80074ce <USBD_LL_CloseEP>
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].is_used = 0U;
 800525c:	4b34      	ldr	r3, [pc, #208]	@ (8005330 <USBD_CUSTOM_HID_DeInit+0xec>)
 800525e:	781b      	ldrb	r3, [r3, #0]
 8005260:	f003 020f 	and.w	r2, r3, #15
 8005264:	6879      	ldr	r1, [r7, #4]
 8005266:	4613      	mov	r3, r2
 8005268:	009b      	lsls	r3, r3, #2
 800526a:	4413      	add	r3, r2
 800526c:	009b      	lsls	r3, r3, #2
 800526e:	440b      	add	r3, r1
 8005270:	3324      	adds	r3, #36	@ 0x24
 8005272:	2200      	movs	r2, #0
 8005274:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CUSTOMHIDInEpAdd & 0xFU].bInterval = 0U;
 8005276:	4b2e      	ldr	r3, [pc, #184]	@ (8005330 <USBD_CUSTOM_HID_DeInit+0xec>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	f003 020f 	and.w	r2, r3, #15
 800527e:	6879      	ldr	r1, [r7, #4]
 8005280:	4613      	mov	r3, r2
 8005282:	009b      	lsls	r3, r3, #2
 8005284:	4413      	add	r3, r2
 8005286:	009b      	lsls	r3, r3, #2
 8005288:	440b      	add	r3, r1
 800528a:	3326      	adds	r3, #38	@ 0x26
 800528c:	2200      	movs	r2, #0
 800528e:	801a      	strh	r2, [r3, #0]

  /* Close CUSTOM_HID EP OUT */
  (void)USBD_LL_CloseEP(pdev, CUSTOMHIDOutEpAdd);
 8005290:	4b28      	ldr	r3, [pc, #160]	@ (8005334 <USBD_CUSTOM_HID_DeInit+0xf0>)
 8005292:	781b      	ldrb	r3, [r3, #0]
 8005294:	4619      	mov	r1, r3
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f002 f919 	bl	80074ce <USBD_LL_CloseEP>
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].is_used = 0U;
 800529c:	4b25      	ldr	r3, [pc, #148]	@ (8005334 <USBD_CUSTOM_HID_DeInit+0xf0>)
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	f003 020f 	and.w	r2, r3, #15
 80052a4:	6879      	ldr	r1, [r7, #4]
 80052a6:	4613      	mov	r3, r2
 80052a8:	009b      	lsls	r3, r3, #2
 80052aa:	4413      	add	r3, r2
 80052ac:	009b      	lsls	r3, r3, #2
 80052ae:	440b      	add	r3, r1
 80052b0:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 80052b4:	2200      	movs	r2, #0
 80052b6:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[CUSTOMHIDOutEpAdd & 0xFU].bInterval = 0U;
 80052b8:	4b1e      	ldr	r3, [pc, #120]	@ (8005334 <USBD_CUSTOM_HID_DeInit+0xf0>)
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	f003 020f 	and.w	r2, r3, #15
 80052c0:	6879      	ldr	r1, [r7, #4]
 80052c2:	4613      	mov	r3, r2
 80052c4:	009b      	lsls	r3, r3, #2
 80052c6:	4413      	add	r3, r2
 80052c8:	009b      	lsls	r3, r3, #2
 80052ca:	440b      	add	r3, r1
 80052cc:	f503 73b3 	add.w	r3, r3, #358	@ 0x166
 80052d0:	2200      	movs	r2, #0
 80052d2:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	32b0      	adds	r2, #176	@ 0xb0
 80052de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d01f      	beq.n	8005326 <USBD_CUSTOM_HID_DeInit+0xe2>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80052ec:	687a      	ldr	r2, [r7, #4]
 80052ee:	33b0      	adds	r3, #176	@ 0xb0
 80052f0:	009b      	lsls	r3, r3, #2
 80052f2:	4413      	add	r3, r2
 80052f4:	685b      	ldr	r3, [r3, #4]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	4798      	blx	r3
    USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	32b0      	adds	r2, #176	@ 0xb0
 8005304:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005308:	4618      	mov	r0, r3
 800530a:	f002 f9d9 	bl	80076c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	32b0      	adds	r2, #176	@ 0xb0
 8005318:	2100      	movs	r1, #0
 800531a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	2200      	movs	r2, #0
 8005322:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}
 8005330:	200000fe 	.word	0x200000fe
 8005334:	200000ff 	.word	0x200000ff

08005338 <USBD_CUSTOM_HID_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_Setup(USBD_HandleTypeDef *pdev,
                                     USBD_SetupReqTypedef *req)
{
 8005338:	b580      	push	{r7, lr}
 800533a:	b088      	sub	sp, #32
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	32b0      	adds	r2, #176	@ 0xb0
 800534c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005350:	613b      	str	r3, [r7, #16]
  uint16_t len = 0U;
 8005352:	2300      	movs	r3, #0
 8005354:	83fb      	strh	r3, [r7, #30]
  uint8_t  *pbuf = NULL;
 8005356:	2300      	movs	r3, #0
 8005358:	61bb      	str	r3, [r7, #24]
  uint16_t status_info = 0U;
 800535a:	2300      	movs	r3, #0
 800535c:	81fb      	strh	r3, [r7, #14]
  USBD_StatusTypeDef ret = USBD_OK;
 800535e:	2300      	movs	r3, #0
 8005360:	75fb      	strb	r3, [r7, #23]

  if (hhid == NULL)
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d101      	bne.n	800536c <USBD_CUSTOM_HID_Setup+0x34>
  {
    return (uint8_t)USBD_FAIL;
 8005368:	2303      	movs	r3, #3
 800536a:	e0f8      	b.n	800555e <USBD_CUSTOM_HID_Setup+0x226>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800536c:	683b      	ldr	r3, [r7, #0]
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005374:	2b00      	cmp	r3, #0
 8005376:	d056      	beq.n	8005426 <USBD_CUSTOM_HID_Setup+0xee>
 8005378:	2b20      	cmp	r3, #32
 800537a:	f040 80e8 	bne.w	800554e <USBD_CUSTOM_HID_Setup+0x216>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 800537e:	683b      	ldr	r3, [r7, #0]
 8005380:	785b      	ldrb	r3, [r3, #1]
 8005382:	3b02      	subs	r3, #2
 8005384:	2b09      	cmp	r3, #9
 8005386:	d846      	bhi.n	8005416 <USBD_CUSTOM_HID_Setup+0xde>
 8005388:	a201      	add	r2, pc, #4	@ (adr r2, 8005390 <USBD_CUSTOM_HID_Setup+0x58>)
 800538a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538e:	bf00      	nop
 8005390:	080053e9 	.word	0x080053e9
 8005394:	080053c7 	.word	0x080053c7
 8005398:	08005417 	.word	0x08005417
 800539c:	08005417 	.word	0x08005417
 80053a0:	08005417 	.word	0x08005417
 80053a4:	08005417 	.word	0x08005417
 80053a8:	08005417 	.word	0x08005417
 80053ac:	080053f9 	.word	0x080053f9
 80053b0:	080053d7 	.word	0x080053d7
 80053b4:	080053b9 	.word	0x080053b9
      {
        case CUSTOM_HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	885b      	ldrh	r3, [r3, #2]
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	461a      	mov	r2, r3
 80053c0:	693b      	ldr	r3, [r7, #16]
 80053c2:	631a      	str	r2, [r3, #48]	@ 0x30
          break;
 80053c4:	e02e      	b.n	8005424 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	3330      	adds	r3, #48	@ 0x30
 80053ca:	2201      	movs	r2, #1
 80053cc:	4619      	mov	r1, r3
 80053ce:	6878      	ldr	r0, [r7, #4]
 80053d0:	f001 fccc 	bl	8006d6c <USBD_CtlSendData>
          break;
 80053d4:	e026      	b.n	8005424 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	885b      	ldrh	r3, [r3, #2]
 80053da:	0a1b      	lsrs	r3, r3, #8
 80053dc:	b29b      	uxth	r3, r3
 80053de:	b2db      	uxtb	r3, r3
 80053e0:	461a      	mov	r2, r3
 80053e2:	693b      	ldr	r3, [r7, #16]
 80053e4:	635a      	str	r2, [r3, #52]	@ 0x34
          break;
 80053e6:	e01d      	b.n	8005424 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	3334      	adds	r3, #52	@ 0x34
 80053ec:	2201      	movs	r2, #1
 80053ee:	4619      	mov	r1, r3
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f001 fcbb 	bl	8006d6c <USBD_CtlSendData>
          break;
 80053f6:	e015      	b.n	8005424 <USBD_CUSTOM_HID_Setup+0xec>

        case CUSTOM_HID_REQ_SET_REPORT:
          hhid->IsReportAvailable = 1U;
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	2201      	movs	r2, #1
 80053fc:	63da      	str	r2, [r3, #60]	@ 0x3c
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 80053fe:	6939      	ldr	r1, [r7, #16]
                                  MIN(req->wLength, USBD_CUSTOMHID_OUTREPORT_BUF_SIZE));
 8005400:	683b      	ldr	r3, [r7, #0]
 8005402:	88db      	ldrh	r3, [r3, #6]
 8005404:	2b30      	cmp	r3, #48	@ 0x30
 8005406:	bf28      	it	cs
 8005408:	2330      	movcs	r3, #48	@ 0x30
 800540a:	b29b      	uxth	r3, r3
          (void)USBD_CtlPrepareRx(pdev, hhid->Report_buf,
 800540c:	461a      	mov	r2, r3
 800540e:	6878      	ldr	r0, [r7, #4]
 8005410:	f001 fcd8 	bl	8006dc4 <USBD_CtlPrepareRx>
          break;
 8005414:	e006      	b.n	8005424 <USBD_CUSTOM_HID_Setup+0xec>

        default:
          USBD_CtlError(pdev, req);
 8005416:	6839      	ldr	r1, [r7, #0]
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f001 fc36 	bl	8006c8a <USBD_CtlError>
          ret = USBD_FAIL;
 800541e:	2303      	movs	r3, #3
 8005420:	75fb      	strb	r3, [r7, #23]
          break;
 8005422:	bf00      	nop
      }
      break;
 8005424:	e09a      	b.n	800555c <USBD_CUSTOM_HID_Setup+0x224>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005426:	683b      	ldr	r3, [r7, #0]
 8005428:	785b      	ldrb	r3, [r3, #1]
 800542a:	2b0b      	cmp	r3, #11
 800542c:	f200 8086 	bhi.w	800553c <USBD_CUSTOM_HID_Setup+0x204>
 8005430:	a201      	add	r2, pc, #4	@ (adr r2, 8005438 <USBD_CUSTOM_HID_Setup+0x100>)
 8005432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005436:	bf00      	nop
 8005438:	08005469 	.word	0x08005469
 800543c:	0800554b 	.word	0x0800554b
 8005440:	0800553d 	.word	0x0800553d
 8005444:	0800553d 	.word	0x0800553d
 8005448:	0800553d 	.word	0x0800553d
 800544c:	0800553d 	.word	0x0800553d
 8005450:	08005493 	.word	0x08005493
 8005454:	0800553d 	.word	0x0800553d
 8005458:	0800553d 	.word	0x0800553d
 800545c:	0800553d 	.word	0x0800553d
 8005460:	080054eb 	.word	0x080054eb
 8005464:	08005515 	.word	0x08005515
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800546e:	b2db      	uxtb	r3, r3
 8005470:	2b03      	cmp	r3, #3
 8005472:	d107      	bne.n	8005484 <USBD_CUSTOM_HID_Setup+0x14c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005474:	f107 030e 	add.w	r3, r7, #14
 8005478:	2202      	movs	r2, #2
 800547a:	4619      	mov	r1, r3
 800547c:	6878      	ldr	r0, [r7, #4]
 800547e:	f001 fc75 	bl	8006d6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005482:	e063      	b.n	800554c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8005484:	6839      	ldr	r1, [r7, #0]
 8005486:	6878      	ldr	r0, [r7, #4]
 8005488:	f001 fbff 	bl	8006c8a <USBD_CtlError>
            ret = USBD_FAIL;
 800548c:	2303      	movs	r3, #3
 800548e:	75fb      	strb	r3, [r7, #23]
          break;
 8005490:	e05c      	b.n	800554c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == CUSTOM_HID_REPORT_DESC)
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	885b      	ldrh	r3, [r3, #2]
 8005496:	0a1b      	lsrs	r3, r3, #8
 8005498:	b29b      	uxth	r3, r3
 800549a:	2b22      	cmp	r3, #34	@ 0x22
 800549c:	d110      	bne.n	80054c0 <USBD_CUSTOM_HID_Setup+0x188>
          {
            len = MIN(USBD_CUSTOM_HID_REPORT_DESC_SIZE, req->wLength);
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	88db      	ldrh	r3, [r3, #6]
 80054a2:	2b66      	cmp	r3, #102	@ 0x66
 80054a4:	bf28      	it	cs
 80054a6:	2366      	movcs	r3, #102	@ 0x66
 80054a8:	83fb      	strh	r3, [r7, #30]
            pbuf = ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->pReport;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	33b0      	adds	r3, #176	@ 0xb0
 80054b4:	009b      	lsls	r3, r3, #2
 80054b6:	4413      	add	r3, r2
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	61bb      	str	r3, [r7, #24]
 80054be:	e00d      	b.n	80054dc <USBD_CUSTOM_HID_Setup+0x1a4>
          }
          else
          {
            if ((req->wValue >> 8) == CUSTOM_HID_DESCRIPTOR_TYPE)
 80054c0:	683b      	ldr	r3, [r7, #0]
 80054c2:	885b      	ldrh	r3, [r3, #2]
 80054c4:	0a1b      	lsrs	r3, r3, #8
 80054c6:	b29b      	uxth	r3, r3
 80054c8:	2b21      	cmp	r3, #33	@ 0x21
 80054ca:	d107      	bne.n	80054dc <USBD_CUSTOM_HID_Setup+0x1a4>
            {
              pbuf = USBD_CUSTOM_HID_Desc;
 80054cc:	4b26      	ldr	r3, [pc, #152]	@ (8005568 <USBD_CUSTOM_HID_Setup+0x230>)
 80054ce:	61bb      	str	r3, [r7, #24]
              len = MIN(USB_CUSTOM_HID_DESC_SIZ, req->wLength);
 80054d0:	683b      	ldr	r3, [r7, #0]
 80054d2:	88db      	ldrh	r3, [r3, #6]
 80054d4:	2b09      	cmp	r3, #9
 80054d6:	bf28      	it	cs
 80054d8:	2309      	movcs	r3, #9
 80054da:	83fb      	strh	r3, [r7, #30]
            }
          }

          (void)USBD_CtlSendData(pdev, pbuf, len);
 80054dc:	8bfb      	ldrh	r3, [r7, #30]
 80054de:	461a      	mov	r2, r3
 80054e0:	69b9      	ldr	r1, [r7, #24]
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f001 fc42 	bl	8006d6c <USBD_CtlSendData>
          break;
 80054e8:	e030      	b.n	800554c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b03      	cmp	r3, #3
 80054f4:	d107      	bne.n	8005506 <USBD_CUSTOM_HID_Setup+0x1ce>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	3338      	adds	r3, #56	@ 0x38
 80054fa:	2201      	movs	r2, #1
 80054fc:	4619      	mov	r1, r3
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f001 fc34 	bl	8006d6c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005504:	e022      	b.n	800554c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 8005506:	6839      	ldr	r1, [r7, #0]
 8005508:	6878      	ldr	r0, [r7, #4]
 800550a:	f001 fbbe 	bl	8006c8a <USBD_CtlError>
            ret = USBD_FAIL;
 800550e:	2303      	movs	r3, #3
 8005510:	75fb      	strb	r3, [r7, #23]
          break;
 8005512:	e01b      	b.n	800554c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800551a:	b2db      	uxtb	r3, r3
 800551c:	2b03      	cmp	r3, #3
 800551e:	d106      	bne.n	800552e <USBD_CUSTOM_HID_Setup+0x1f6>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	885b      	ldrh	r3, [r3, #2]
 8005524:	b2db      	uxtb	r3, r3
 8005526:	461a      	mov	r2, r3
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	639a      	str	r2, [r3, #56]	@ 0x38
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800552c:	e00e      	b.n	800554c <USBD_CUSTOM_HID_Setup+0x214>
            USBD_CtlError(pdev, req);
 800552e:	6839      	ldr	r1, [r7, #0]
 8005530:	6878      	ldr	r0, [r7, #4]
 8005532:	f001 fbaa 	bl	8006c8a <USBD_CtlError>
            ret = USBD_FAIL;
 8005536:	2303      	movs	r3, #3
 8005538:	75fb      	strb	r3, [r7, #23]
          break;
 800553a:	e007      	b.n	800554c <USBD_CUSTOM_HID_Setup+0x214>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800553c:	6839      	ldr	r1, [r7, #0]
 800553e:	6878      	ldr	r0, [r7, #4]
 8005540:	f001 fba3 	bl	8006c8a <USBD_CtlError>
          ret = USBD_FAIL;
 8005544:	2303      	movs	r3, #3
 8005546:	75fb      	strb	r3, [r7, #23]
          break;
 8005548:	e000      	b.n	800554c <USBD_CUSTOM_HID_Setup+0x214>
          break;
 800554a:	bf00      	nop
      }
      break;
 800554c:	e006      	b.n	800555c <USBD_CUSTOM_HID_Setup+0x224>

    default:
      USBD_CtlError(pdev, req);
 800554e:	6839      	ldr	r1, [r7, #0]
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f001 fb9a 	bl	8006c8a <USBD_CtlError>
      ret = USBD_FAIL;
 8005556:	2303      	movs	r3, #3
 8005558:	75fb      	strb	r3, [r7, #23]
      break;
 800555a:	bf00      	nop
  }
  return (uint8_t)ret;
 800555c:	7dfb      	ldrb	r3, [r7, #23]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3720      	adds	r7, #32
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}
 8005566:	bf00      	nop
 8005568:	200000e8 	.word	0x200000e8

0800556c <USBD_CUSTOM_HID_SendReport>:
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_SendReport(USBD_HandleTypeDef *pdev,
                                   uint8_t *report, uint16_t len)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b086      	sub	sp, #24
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	4613      	mov	r3, r2
 8005578:	80fb      	strh	r3, [r7, #6]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	32b0      	adds	r2, #176	@ 0xb0
 8005584:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <USBD_CUSTOM_HID_SendReport+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800558c:	2303      	movs	r3, #3
 800558e:	e021      	b.n	80055d4 <USBD_CUSTOM_HID_SendReport+0x68>
#ifdef USE_USBD_COMPOSITE
  /* Get Endpoint IN address allocated for this class instance */
  CUSTOMHIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	32b0      	adds	r2, #176	@ 0xb0
 800559a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800559e:	617b      	str	r3, [r7, #20]

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80055a6:	b2db      	uxtb	r3, r3
 80055a8:	2b03      	cmp	r3, #3
 80055aa:	d112      	bne.n	80055d2 <USBD_CUSTOM_HID_SendReport+0x66>
  {
    if (hhid->state == CUSTOM_HID_IDLE)
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d10b      	bne.n	80055ce <USBD_CUSTOM_HID_SendReport+0x62>
    {
      hhid->state = CUSTOM_HID_BUSY;
 80055b6:	697b      	ldr	r3, [r7, #20]
 80055b8:	2201      	movs	r2, #1
 80055ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      (void)USBD_LL_Transmit(pdev, CUSTOMHIDInEpAdd, report, len);
 80055be:	4b07      	ldr	r3, [pc, #28]	@ (80055dc <USBD_CUSTOM_HID_SendReport+0x70>)
 80055c0:	7819      	ldrb	r1, [r3, #0]
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	68ba      	ldr	r2, [r7, #8]
 80055c6:	68f8      	ldr	r0, [r7, #12]
 80055c8:	f002 f829 	bl	800761e <USBD_LL_Transmit>
 80055cc:	e001      	b.n	80055d2 <USBD_CUSTOM_HID_SendReport+0x66>
    }
    else
    {
      return (uint8_t)USBD_BUSY;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e000      	b.n	80055d4 <USBD_CUSTOM_HID_SendReport+0x68>
    }
  }
  return (uint8_t)USBD_OK;
 80055d2:	2300      	movs	r3, #0
}
 80055d4:	4618      	mov	r0, r3
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}
 80055dc:	200000fe 	.word	0x200000fe

080055e0 <USBD_CUSTOM_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetFSCfgDesc(uint16_t *length)
{
 80055e0:	b580      	push	{r7, lr}
 80055e2:	b084      	sub	sp, #16
 80055e4:	af00      	add	r7, sp, #0
 80055e6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80055e8:	2181      	movs	r1, #129	@ 0x81
 80055ea:	4815      	ldr	r0, [pc, #84]	@ (8005640 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80055ec:	f000 fd17 	bl	800601e <USBD_GetEpDesc>
 80055f0:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80055f2:	2101      	movs	r1, #1
 80055f4:	4812      	ldr	r0, [pc, #72]	@ (8005640 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
 80055f6:	f000 fd12 	bl	800601e <USBD_GetEpDesc>
 80055fa:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d009      	beq.n	8005616 <USBD_CUSTOM_HID_GetFSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	2200      	movs	r2, #0
 8005606:	f042 0202 	orr.w	r2, r2, #2
 800560a:	711a      	strb	r2, [r3, #4]
 800560c:	2200      	movs	r2, #0
 800560e:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2205      	movs	r2, #5
 8005614:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8005616:	68bb      	ldr	r3, [r7, #8]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d009      	beq.n	8005630 <USBD_CUSTOM_HID_GetFSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 800561c:	68bb      	ldr	r3, [r7, #8]
 800561e:	2200      	movs	r2, #0
 8005620:	f042 0202 	orr.w	r2, r2, #2
 8005624:	711a      	strb	r2, [r3, #4]
 8005626:	2200      	movs	r2, #0
 8005628:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	2205      	movs	r2, #5
 800562e:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2229      	movs	r2, #41	@ 0x29
 8005634:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 8005636:	4b02      	ldr	r3, [pc, #8]	@ (8005640 <USBD_CUSTOM_HID_GetFSCfgDesc+0x60>)
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}
 8005640:	200000bc 	.word	0x200000bc

08005644 <USBD_CUSTOM_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetHSCfgDesc(uint16_t *length)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 800564c:	2181      	movs	r1, #129	@ 0x81
 800564e:	4815      	ldr	r0, [pc, #84]	@ (80056a4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 8005650:	f000 fce5 	bl	800601e <USBD_GetEpDesc>
 8005654:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 8005656:	2101      	movs	r1, #1
 8005658:	4812      	ldr	r0, [pc, #72]	@ (80056a4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
 800565a:	f000 fce0 	bl	800601e <USBD_GetEpDesc>
 800565e:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d009      	beq.n	800567a <USBD_CUSTOM_HID_GetHSCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f042 0202 	orr.w	r2, r2, #2
 800566e:	711a      	strb	r2, [r3, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2205      	movs	r2, #5
 8005678:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d009      	beq.n	8005694 <USBD_CUSTOM_HID_GetHSCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	2200      	movs	r2, #0
 8005684:	f042 0202 	orr.w	r2, r2, #2
 8005688:	711a      	strb	r2, [r3, #4]
 800568a:	2200      	movs	r2, #0
 800568c:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_HS_BINTERVAL;
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	2205      	movs	r2, #5
 8005692:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2229      	movs	r2, #41	@ 0x29
 8005698:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 800569a:	4b02      	ldr	r3, [pc, #8]	@ (80056a4 <USBD_CUSTOM_HID_GetHSCfgDesc+0x60>)
}
 800569c:	4618      	mov	r0, r3
 800569e:	3710      	adds	r7, #16
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	200000bc 	.word	0x200000bc

080056a8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80056a8:	b580      	push	{r7, lr}
 80056aa:	b084      	sub	sp, #16
 80056ac:	af00      	add	r7, sp, #0
 80056ae:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPIN_ADDR);
 80056b0:	2181      	movs	r1, #129	@ 0x81
 80056b2:	4815      	ldr	r0, [pc, #84]	@ (8005708 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80056b4:	f000 fcb3 	bl	800601e <USBD_GetEpDesc>
 80056b8:	60f8      	str	r0, [r7, #12]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CUSTOM_HID_CfgDesc, CUSTOM_HID_EPOUT_ADDR);
 80056ba:	2101      	movs	r1, #1
 80056bc:	4812      	ldr	r0, [pc, #72]	@ (8005708 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
 80056be:	f000 fcae 	bl	800601e <USBD_GetEpDesc>
 80056c2:	60b8      	str	r0, [r7, #8]

  if (pEpInDesc != NULL)
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d009      	beq.n	80056de <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x36>
  {
    pEpInDesc->wMaxPacketSize = CUSTOM_HID_EPIN_SIZE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	2200      	movs	r2, #0
 80056ce:	f042 0202 	orr.w	r2, r2, #2
 80056d2:	711a      	strb	r2, [r3, #4]
 80056d4:	2200      	movs	r2, #0
 80056d6:	715a      	strb	r2, [r3, #5]
    pEpInDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	2205      	movs	r2, #5
 80056dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d009      	beq.n	80056f8 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x50>
  {
    pEpOutDesc->wMaxPacketSize = CUSTOM_HID_EPOUT_SIZE;
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f042 0202 	orr.w	r2, r2, #2
 80056ec:	711a      	strb	r2, [r3, #4]
 80056ee:	2200      	movs	r2, #0
 80056f0:	715a      	strb	r2, [r3, #5]
    pEpOutDesc->bInterval = CUSTOM_HID_FS_BINTERVAL;
 80056f2:	68bb      	ldr	r3, [r7, #8]
 80056f4:	2205      	movs	r2, #5
 80056f6:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_CfgDesc);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2229      	movs	r2, #41	@ 0x29
 80056fc:	801a      	strh	r2, [r3, #0]
  return USBD_CUSTOM_HID_CfgDesc;
 80056fe:	4b02      	ldr	r3, [pc, #8]	@ (8005708 <USBD_CUSTOM_HID_GetOtherSpeedCfgDesc+0x60>)
}
 8005700:	4618      	mov	r0, r3
 8005702:	3710      	adds	r7, #16
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}
 8005708:	200000bc 	.word	0x200000bc

0800570c <USBD_CUSTOM_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800570c:	b480      	push	{r7}
 800570e:	b083      	sub	sp, #12
 8005710:	af00      	add	r7, sp, #0
 8005712:	6078      	str	r0, [r7, #4]
 8005714:	460b      	mov	r3, r1
 8005716:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);

  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = CUSTOM_HID_IDLE;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	32b0      	adds	r2, #176	@ 0xb0
 8005722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005726:	2200      	movs	r2, #0
 8005728:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return (uint8_t)USBD_OK;
 800572c:	2300      	movs	r3, #0
}
 800572e:	4618      	mov	r0, r3
 8005730:	370c      	adds	r7, #12
 8005732:	46bd      	mov	sp, r7
 8005734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005738:	4770      	bx	lr

0800573a <USBD_CUSTOM_HID_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800573a:	b580      	push	{r7, lr}
 800573c:	b084      	sub	sp, #16
 800573e:	af00      	add	r7, sp, #0
 8005740:	6078      	str	r0, [r7, #4]
 8005742:	460b      	mov	r3, r1
 8005744:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	32b0      	adds	r2, #176	@ 0xb0
 8005750:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d101      	bne.n	800575c <USBD_CUSTOM_HID_DataOut+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8005758:	2303      	movs	r3, #3
 800575a:	e017      	b.n	800578c <USBD_CUSTOM_HID_DataOut+0x52>
  }

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	32b0      	adds	r2, #176	@ 0xb0
 8005766:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800576a:	60fb      	str	r3, [r7, #12]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application processing */
  ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005772:	687a      	ldr	r2, [r7, #4]
 8005774:	33b0      	adds	r3, #176	@ 0xb0
 8005776:	009b      	lsls	r3, r3, #2
 8005778:	4413      	add	r3, r2
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	68db      	ldr	r3, [r3, #12]
 800577e:	68fa      	ldr	r2, [r7, #12]
 8005780:	7810      	ldrb	r0, [r2, #0]
 8005782:	68fa      	ldr	r2, [r7, #12]
 8005784:	7852      	ldrb	r2, [r2, #1]
 8005786:	4611      	mov	r1, r2
 8005788:	4798      	blx	r3
                                                                           hhid->Report_buf[1]);

  return (uint8_t)USBD_OK;
 800578a:	2300      	movs	r3, #0
}
 800578c:	4618      	mov	r0, r3
 800578e:	3710      	adds	r7, #16
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <USBD_CUSTOM_HID_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b084      	sub	sp, #16
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid;

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	32b0      	adds	r2, #176	@ 0xb0
 80057a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d101      	bne.n	80057b2 <USBD_CUSTOM_HID_ReceivePacket+0x1e>
  {
    return (uint8_t)USBD_FAIL;
 80057ae:	2303      	movs	r3, #3
 80057b0:	e00f      	b.n	80057d2 <USBD_CUSTOM_HID_ReceivePacket+0x3e>
#ifdef USE_USBD_COMPOSITE
  /* Get OUT Endpoint address allocated for this class instance */
  CUSTOMHIDOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	32b0      	adds	r2, #176	@ 0xb0
 80057bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c0:	60fb      	str	r3, [r7, #12]

  /* Resume USB Out process */
  (void)USBD_LL_PrepareReceive(pdev, CUSTOMHIDOutEpAdd, hhid->Report_buf,
 80057c2:	4b06      	ldr	r3, [pc, #24]	@ (80057dc <USBD_CUSTOM_HID_ReceivePacket+0x48>)
 80057c4:	7819      	ldrb	r1, [r3, #0]
 80057c6:	68fa      	ldr	r2, [r7, #12]
 80057c8:	2330      	movs	r3, #48	@ 0x30
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f001 ff48 	bl	8007660 <USBD_LL_PrepareReceive>
                               USBD_CUSTOMHID_OUTREPORT_BUF_SIZE);

  return (uint8_t)USBD_OK;
 80057d0:	2300      	movs	r3, #0
}
 80057d2:	4618      	mov	r0, r3
 80057d4:	3710      	adds	r7, #16
 80057d6:	46bd      	mov	sp, r7
 80057d8:	bd80      	pop	{r7, pc}
 80057da:	bf00      	nop
 80057dc:	200000ff 	.word	0x200000ff

080057e0 <USBD_CUSTOM_HID_EP0_RxReady>:
  *         Handles control request data.
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CUSTOM_HID_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	6078      	str	r0, [r7, #4]
  USBD_CUSTOM_HID_HandleTypeDef *hhid = (USBD_CUSTOM_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	32b0      	adds	r2, #176	@ 0xb0
 80057f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057f6:	60fb      	str	r3, [r7, #12]

  if (hhid == NULL)
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <USBD_CUSTOM_HID_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80057fe:	2303      	movs	r3, #3
 8005800:	e016      	b.n	8005830 <USBD_CUSTOM_HID_EP0_RxReady+0x50>
  }

  if (hhid->IsReportAvailable == 1U)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005806:	2b01      	cmp	r3, #1
 8005808:	d111      	bne.n	800582e <USBD_CUSTOM_HID_EP0_RxReady+0x4e>
  {
    ((USBD_CUSTOM_HID_ItfTypeDef *)pdev->pUserData[pdev->classId])->OutEvent(hhid->Report_buf[0],
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	33b0      	adds	r3, #176	@ 0xb0
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	4413      	add	r3, r2
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	68db      	ldr	r3, [r3, #12]
 800581c:	68fa      	ldr	r2, [r7, #12]
 800581e:	7810      	ldrb	r0, [r2, #0]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	7852      	ldrb	r2, [r2, #1]
 8005824:	4611      	mov	r1, r2
 8005826:	4798      	blx	r3
                                                                             hhid->Report_buf[1]);
    hhid->IsReportAvailable = 0U;
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	2200      	movs	r2, #0
 800582c:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  return (uint8_t)USBD_OK;
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	3710      	adds	r7, #16
 8005834:	46bd      	mov	sp, r7
 8005836:	bd80      	pop	{r7, pc}

08005838 <USBD_CUSTOM_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CUSTOM_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CUSTOM_HID_DeviceQualifierDesc);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	220a      	movs	r2, #10
 8005844:	801a      	strh	r2, [r3, #0]

  return USBD_CUSTOM_HID_DeviceQualifierDesc;
 8005846:	4b03      	ldr	r3, [pc, #12]	@ (8005854 <USBD_CUSTOM_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005848:	4618      	mov	r0, r3
 800584a:	370c      	adds	r7, #12
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	200000f4 	.word	0x200000f4

08005858 <USBD_CUSTOM_HID_RegisterInterface>:
  * @param  fops: CUSTOMHID Interface callback
  * @retval status
  */
uint8_t USBD_CUSTOM_HID_RegisterInterface(USBD_HandleTypeDef *pdev,
                                          USBD_CUSTOM_HID_ItfTypeDef *fops)
{
 8005858:	b480      	push	{r7}
 800585a:	b083      	sub	sp, #12
 800585c:	af00      	add	r7, sp, #0
 800585e:	6078      	str	r0, [r7, #4]
 8005860:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8005862:	683b      	ldr	r3, [r7, #0]
 8005864:	2b00      	cmp	r3, #0
 8005866:	d101      	bne.n	800586c <USBD_CUSTOM_HID_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8005868:	2303      	movs	r3, #3
 800586a:	e009      	b.n	8005880 <USBD_CUSTOM_HID_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	33b0      	adds	r3, #176	@ 0xb0
 8005876:	009b      	lsls	r3, r3, #2
 8005878:	4413      	add	r3, r2
 800587a:	683a      	ldr	r2, [r7, #0]
 800587c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800587e:	2300      	movs	r3, #0
}
 8005880:	4618      	mov	r0, r3
 8005882:	370c      	adds	r7, #12
 8005884:	46bd      	mov	sp, r7
 8005886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588a:	4770      	bx	lr

0800588c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800588c:	b580      	push	{r7, lr}
 800588e:	b086      	sub	sp, #24
 8005890:	af00      	add	r7, sp, #0
 8005892:	60f8      	str	r0, [r7, #12]
 8005894:	60b9      	str	r1, [r7, #8]
 8005896:	4613      	mov	r3, r2
 8005898:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d101      	bne.n	80058a4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80058a0:	2303      	movs	r3, #3
 80058a2:	e01f      	b.n	80058e4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	2200      	movs	r2, #0
 80058b0:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2200      	movs	r2, #0
 80058b8:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80058bc:	68bb      	ldr	r3, [r7, #8]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	68ba      	ldr	r2, [r7, #8]
 80058c6:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	79fa      	ldrb	r2, [r7, #7]
 80058d6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80058d8:	68f8      	ldr	r0, [r7, #12]
 80058da:	f001 fd6b 	bl	80073b4 <USBD_LL_Init>
 80058de:	4603      	mov	r3, r0
 80058e0:	75fb      	strb	r3, [r7, #23]

  return ret;
 80058e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3718      	adds	r7, #24
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bd80      	pop	{r7, pc}

080058ec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b084      	sub	sp, #16
 80058f0:	af00      	add	r7, sp, #0
 80058f2:	6078      	str	r0, [r7, #4]
 80058f4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80058f6:	2300      	movs	r3, #0
 80058f8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d101      	bne.n	8005904 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005900:	2303      	movs	r3, #3
 8005902:	e025      	b.n	8005950 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	683a      	ldr	r2, [r7, #0]
 8005908:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	32ae      	adds	r2, #174	@ 0xae
 8005916:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800591a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591c:	2b00      	cmp	r3, #0
 800591e:	d00f      	beq.n	8005940 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	32ae      	adds	r2, #174	@ 0xae
 800592a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800592e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005930:	f107 020e 	add.w	r2, r7, #14
 8005934:	4610      	mov	r0, r2
 8005936:	4798      	blx	r3
 8005938:	4602      	mov	r2, r0
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8005946:	1c5a      	adds	r2, r3, #1
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	3710      	adds	r7, #16
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b082      	sub	sp, #8
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005960:	6878      	ldr	r0, [r7, #4]
 8005962:	f001 fd73 	bl	800744c <USBD_LL_Start>
 8005966:	4603      	mov	r3, r0
}
 8005968:	4618      	mov	r0, r3
 800596a:	3708      	adds	r7, #8
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005978:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800597a:	4618      	mov	r0, r3
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005986:	b580      	push	{r7, lr}
 8005988:	b084      	sub	sp, #16
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	460b      	mov	r3, r1
 8005990:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005992:	2300      	movs	r3, #0
 8005994:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800599c:	2b00      	cmp	r3, #0
 800599e:	d009      	beq.n	80059b4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	78fa      	ldrb	r2, [r7, #3]
 80059aa:	4611      	mov	r1, r2
 80059ac:	6878      	ldr	r0, [r7, #4]
 80059ae:	4798      	blx	r3
 80059b0:	4603      	mov	r3, r0
 80059b2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80059b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}

080059be <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80059be:	b580      	push	{r7, lr}
 80059c0:	b084      	sub	sp, #16
 80059c2:	af00      	add	r7, sp, #0
 80059c4:	6078      	str	r0, [r7, #4]
 80059c6:	460b      	mov	r3, r1
 80059c8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80059ca:	2300      	movs	r3, #0
 80059cc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	78fa      	ldrb	r2, [r7, #3]
 80059d8:	4611      	mov	r1, r2
 80059da:	6878      	ldr	r0, [r7, #4]
 80059dc:	4798      	blx	r3
 80059de:	4603      	mov	r3, r0
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d001      	beq.n	80059e8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80059e4:	2303      	movs	r3, #3
 80059e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	3710      	adds	r7, #16
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b084      	sub	sp, #16
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
 80059fa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005a02:	6839      	ldr	r1, [r7, #0]
 8005a04:	4618      	mov	r0, r3
 8005a06:	f001 f906 	bl	8006c16 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8005a18:	461a      	mov	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005a26:	f003 031f 	and.w	r3, r3, #31
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d01a      	beq.n	8005a64 <USBD_LL_SetupStage+0x72>
 8005a2e:	2b02      	cmp	r3, #2
 8005a30:	d822      	bhi.n	8005a78 <USBD_LL_SetupStage+0x86>
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d002      	beq.n	8005a3c <USBD_LL_SetupStage+0x4a>
 8005a36:	2b01      	cmp	r3, #1
 8005a38:	d00a      	beq.n	8005a50 <USBD_LL_SetupStage+0x5e>
 8005a3a:	e01d      	b.n	8005a78 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005a42:	4619      	mov	r1, r3
 8005a44:	6878      	ldr	r0, [r7, #4]
 8005a46:	f000 fb5d 	bl	8006104 <USBD_StdDevReq>
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	73fb      	strb	r3, [r7, #15]
      break;
 8005a4e:	e020      	b.n	8005a92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005a56:	4619      	mov	r1, r3
 8005a58:	6878      	ldr	r0, [r7, #4]
 8005a5a:	f000 fbc5 	bl	80061e8 <USBD_StdItfReq>
 8005a5e:	4603      	mov	r3, r0
 8005a60:	73fb      	strb	r3, [r7, #15]
      break;
 8005a62:	e016      	b.n	8005a92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8005a6a:	4619      	mov	r1, r3
 8005a6c:	6878      	ldr	r0, [r7, #4]
 8005a6e:	f000 fc27 	bl	80062c0 <USBD_StdEPReq>
 8005a72:	4603      	mov	r3, r0
 8005a74:	73fb      	strb	r3, [r7, #15]
      break;
 8005a76:	e00c      	b.n	8005a92 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005a7e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	4619      	mov	r1, r3
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f001 fd40 	bl	800750c <USBD_LL_StallEP>
 8005a8c:	4603      	mov	r3, r0
 8005a8e:	73fb      	strb	r3, [r7, #15]
      break;
 8005a90:	bf00      	nop
  }

  return ret;
 8005a92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3710      	adds	r7, #16
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}

08005a9c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b086      	sub	sp, #24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	607a      	str	r2, [r7, #4]
 8005aa8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005aaa:	2300      	movs	r3, #0
 8005aac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005aae:	7afb      	ldrb	r3, [r7, #11]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d16e      	bne.n	8005b92 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 8005aba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005ac2:	2b03      	cmp	r3, #3
 8005ac4:	f040 8098 	bne.w	8005bf8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	689a      	ldr	r2, [r3, #8]
 8005acc:	693b      	ldr	r3, [r7, #16]
 8005ace:	68db      	ldr	r3, [r3, #12]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d913      	bls.n	8005afc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	689a      	ldr	r2, [r3, #8]
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	1ad2      	subs	r2, r2, r3
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	68da      	ldr	r2, [r3, #12]
 8005ae6:	693b      	ldr	r3, [r7, #16]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	4293      	cmp	r3, r2
 8005aec:	bf28      	it	cs
 8005aee:	4613      	movcs	r3, r2
 8005af0:	461a      	mov	r2, r3
 8005af2:	6879      	ldr	r1, [r7, #4]
 8005af4:	68f8      	ldr	r0, [r7, #12]
 8005af6:	f001 f982 	bl	8006dfe <USBD_CtlContinueRx>
 8005afa:	e07d      	b.n	8005bf8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8005b02:	f003 031f 	and.w	r3, r3, #31
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d014      	beq.n	8005b34 <USBD_LL_DataOutStage+0x98>
 8005b0a:	2b02      	cmp	r3, #2
 8005b0c:	d81d      	bhi.n	8005b4a <USBD_LL_DataOutStage+0xae>
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d002      	beq.n	8005b18 <USBD_LL_DataOutStage+0x7c>
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d003      	beq.n	8005b1e <USBD_LL_DataOutStage+0x82>
 8005b16:	e018      	b.n	8005b4a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	75bb      	strb	r3, [r7, #22]
            break;
 8005b1c:	e018      	b.n	8005b50 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005b24:	b2db      	uxtb	r3, r3
 8005b26:	4619      	mov	r1, r3
 8005b28:	68f8      	ldr	r0, [r7, #12]
 8005b2a:	f000 fa5e 	bl	8005fea <USBD_CoreFindIF>
 8005b2e:	4603      	mov	r3, r0
 8005b30:	75bb      	strb	r3, [r7, #22]
            break;
 8005b32:	e00d      	b.n	8005b50 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	4619      	mov	r1, r3
 8005b3e:	68f8      	ldr	r0, [r7, #12]
 8005b40:	f000 fa60 	bl	8006004 <USBD_CoreFindEP>
 8005b44:	4603      	mov	r3, r0
 8005b46:	75bb      	strb	r3, [r7, #22]
            break;
 8005b48:	e002      	b.n	8005b50 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	75bb      	strb	r3, [r7, #22]
            break;
 8005b4e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005b50:	7dbb      	ldrb	r3, [r7, #22]
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d119      	bne.n	8005b8a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005b5c:	b2db      	uxtb	r3, r3
 8005b5e:	2b03      	cmp	r3, #3
 8005b60:	d113      	bne.n	8005b8a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005b62:	7dba      	ldrb	r2, [r7, #22]
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	32ae      	adds	r2, #174	@ 0xae
 8005b68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b6c:	691b      	ldr	r3, [r3, #16]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00b      	beq.n	8005b8a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005b72:	7dba      	ldrb	r2, [r7, #22]
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005b7a:	7dba      	ldrb	r2, [r7, #22]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	32ae      	adds	r2, #174	@ 0xae
 8005b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b84:	691b      	ldr	r3, [r3, #16]
 8005b86:	68f8      	ldr	r0, [r7, #12]
 8005b88:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f001 f948 	bl	8006e20 <USBD_CtlSendStatus>
 8005b90:	e032      	b.n	8005bf8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005b92:	7afb      	ldrb	r3, [r7, #11]
 8005b94:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f000 fa31 	bl	8006004 <USBD_CoreFindEP>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005ba6:	7dbb      	ldrb	r3, [r7, #22]
 8005ba8:	2bff      	cmp	r3, #255	@ 0xff
 8005baa:	d025      	beq.n	8005bf8 <USBD_LL_DataOutStage+0x15c>
 8005bac:	7dbb      	ldrb	r3, [r7, #22]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d122      	bne.n	8005bf8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	2b03      	cmp	r3, #3
 8005bbc:	d117      	bne.n	8005bee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005bbe:	7dba      	ldrb	r2, [r7, #22]
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	32ae      	adds	r2, #174	@ 0xae
 8005bc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc8:	699b      	ldr	r3, [r3, #24]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00f      	beq.n	8005bee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005bce:	7dba      	ldrb	r2, [r7, #22]
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005bd6:	7dba      	ldrb	r2, [r7, #22]
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	32ae      	adds	r2, #174	@ 0xae
 8005bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005be0:	699b      	ldr	r3, [r3, #24]
 8005be2:	7afa      	ldrb	r2, [r7, #11]
 8005be4:	4611      	mov	r1, r2
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	4798      	blx	r3
 8005bea:	4603      	mov	r3, r0
 8005bec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005bee:	7dfb      	ldrb	r3, [r7, #23]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d001      	beq.n	8005bf8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005bf4:	7dfb      	ldrb	r3, [r7, #23]
 8005bf6:	e000      	b.n	8005bfa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3718      	adds	r7, #24
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005c02:	b580      	push	{r7, lr}
 8005c04:	b086      	sub	sp, #24
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	60f8      	str	r0, [r7, #12]
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	607a      	str	r2, [r7, #4]
 8005c0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005c10:	7afb      	ldrb	r3, [r7, #11]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d16f      	bne.n	8005cf6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	3314      	adds	r3, #20
 8005c1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8005c22:	2b02      	cmp	r3, #2
 8005c24:	d15a      	bne.n	8005cdc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d914      	bls.n	8005c5c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	689a      	ldr	r2, [r3, #8]
 8005c36:	693b      	ldr	r3, [r7, #16]
 8005c38:	68db      	ldr	r3, [r3, #12]
 8005c3a:	1ad2      	subs	r2, r2, r3
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005c40:	693b      	ldr	r3, [r7, #16]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	461a      	mov	r2, r3
 8005c46:	6879      	ldr	r1, [r7, #4]
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f001 f8aa 	bl	8006da2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c4e:	2300      	movs	r3, #0
 8005c50:	2200      	movs	r2, #0
 8005c52:	2100      	movs	r1, #0
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f001 fd03 	bl	8007660 <USBD_LL_PrepareReceive>
 8005c5a:	e03f      	b.n	8005cdc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	68da      	ldr	r2, [r3, #12]
 8005c60:	693b      	ldr	r3, [r7, #16]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d11c      	bne.n	8005ca2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005c68:	693b      	ldr	r3, [r7, #16]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d316      	bcc.n	8005ca2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	685a      	ldr	r2, [r3, #4]
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005c7e:	429a      	cmp	r2, r3
 8005c80:	d20f      	bcs.n	8005ca2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005c82:	2200      	movs	r2, #0
 8005c84:	2100      	movs	r1, #0
 8005c86:	68f8      	ldr	r0, [r7, #12]
 8005c88:	f001 f88b 	bl	8006da2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005c94:	2300      	movs	r3, #0
 8005c96:	2200      	movs	r2, #0
 8005c98:	2100      	movs	r1, #0
 8005c9a:	68f8      	ldr	r0, [r7, #12]
 8005c9c:	f001 fce0 	bl	8007660 <USBD_LL_PrepareReceive>
 8005ca0:	e01c      	b.n	8005cdc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	2b03      	cmp	r3, #3
 8005cac:	d10f      	bne.n	8005cce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cb4:	68db      	ldr	r3, [r3, #12]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d009      	beq.n	8005cce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005cc8:	68db      	ldr	r3, [r3, #12]
 8005cca:	68f8      	ldr	r0, [r7, #12]
 8005ccc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005cce:	2180      	movs	r1, #128	@ 0x80
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f001 fc1b 	bl	800750c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005cd6:	68f8      	ldr	r0, [r7, #12]
 8005cd8:	f001 f8b5 	bl	8006e46 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d03a      	beq.n	8005d5c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005ce6:	68f8      	ldr	r0, [r7, #12]
 8005ce8:	f7ff fe42 	bl	8005970 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2200      	movs	r2, #0
 8005cf0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8005cf4:	e032      	b.n	8005d5c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005cf6:	7afb      	ldrb	r3, [r7, #11]
 8005cf8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005cfc:	b2db      	uxtb	r3, r3
 8005cfe:	4619      	mov	r1, r3
 8005d00:	68f8      	ldr	r0, [r7, #12]
 8005d02:	f000 f97f 	bl	8006004 <USBD_CoreFindEP>
 8005d06:	4603      	mov	r3, r0
 8005d08:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005d0a:	7dfb      	ldrb	r3, [r7, #23]
 8005d0c:	2bff      	cmp	r3, #255	@ 0xff
 8005d0e:	d025      	beq.n	8005d5c <USBD_LL_DataInStage+0x15a>
 8005d10:	7dfb      	ldrb	r3, [r7, #23]
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d122      	bne.n	8005d5c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005d1c:	b2db      	uxtb	r3, r3
 8005d1e:	2b03      	cmp	r3, #3
 8005d20:	d11c      	bne.n	8005d5c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005d22:	7dfa      	ldrb	r2, [r7, #23]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	32ae      	adds	r2, #174	@ 0xae
 8005d28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d2c:	695b      	ldr	r3, [r3, #20]
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d014      	beq.n	8005d5c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005d32:	7dfa      	ldrb	r2, [r7, #23]
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005d3a:	7dfa      	ldrb	r2, [r7, #23]
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	32ae      	adds	r2, #174	@ 0xae
 8005d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d44:	695b      	ldr	r3, [r3, #20]
 8005d46:	7afa      	ldrb	r2, [r7, #11]
 8005d48:	4611      	mov	r1, r2
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	4798      	blx	r3
 8005d4e:	4603      	mov	r3, r0
 8005d50:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005d52:	7dbb      	ldrb	r3, [r7, #22]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d001      	beq.n	8005d5c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005d58:	7dbb      	ldrb	r3, [r7, #22]
 8005d5a:	e000      	b.n	8005d5e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3718      	adds	r7, #24
 8005d62:	46bd      	mov	sp, r7
 8005d64:	bd80      	pop	{r7, pc}

08005d66 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005d66:	b580      	push	{r7, lr}
 8005d68:	b084      	sub	sp, #16
 8005d6a:	af00      	add	r7, sp, #0
 8005d6c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2201      	movs	r2, #1
 8005d76:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	2200      	movs	r2, #0
 8005d7e:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	2200      	movs	r2, #0
 8005d86:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2200      	movs	r2, #0
 8005d8c:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d014      	beq.n	8005dcc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d00e      	beq.n	8005dcc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005db4:	685b      	ldr	r3, [r3, #4]
 8005db6:	687a      	ldr	r2, [r7, #4]
 8005db8:	6852      	ldr	r2, [r2, #4]
 8005dba:	b2d2      	uxtb	r2, r2
 8005dbc:	4611      	mov	r1, r2
 8005dbe:	6878      	ldr	r0, [r7, #4]
 8005dc0:	4798      	blx	r3
 8005dc2:	4603      	mov	r3, r0
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d001      	beq.n	8005dcc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005dc8:	2303      	movs	r3, #3
 8005dca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005dcc:	2340      	movs	r3, #64	@ 0x40
 8005dce:	2200      	movs	r2, #0
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f001 fb55 	bl	8007482 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2201      	movs	r2, #1
 8005ddc:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2240      	movs	r2, #64	@ 0x40
 8005de4:	f8c3 2160 	str.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005de8:	2340      	movs	r3, #64	@ 0x40
 8005dea:	2200      	movs	r2, #0
 8005dec:	2180      	movs	r1, #128	@ 0x80
 8005dee:	6878      	ldr	r0, [r7, #4]
 8005df0:	f001 fb47 	bl	8007482 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2201      	movs	r2, #1
 8005df8:	849a      	strh	r2, [r3, #36]	@ 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2240      	movs	r2, #64	@ 0x40
 8005dfe:	621a      	str	r2, [r3, #32]

  return ret;
 8005e00:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e02:	4618      	mov	r0, r3
 8005e04:	3710      	adds	r7, #16
 8005e06:	46bd      	mov	sp, r7
 8005e08:	bd80      	pop	{r7, pc}

08005e0a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005e0a:	b480      	push	{r7}
 8005e0c:	b083      	sub	sp, #12
 8005e0e:	af00      	add	r7, sp, #0
 8005e10:	6078      	str	r0, [r7, #4]
 8005e12:	460b      	mov	r3, r1
 8005e14:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	78fa      	ldrb	r2, [r7, #3]
 8005e1a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005e1c:	2300      	movs	r3, #0
}
 8005e1e:	4618      	mov	r0, r3
 8005e20:	370c      	adds	r7, #12
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b083      	sub	sp, #12
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e38:	b2da      	uxtb	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2204      	movs	r2, #4
 8005e44:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8005e48:	2300      	movs	r3, #0
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	370c      	adds	r7, #12
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e54:	4770      	bx	lr

08005e56 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005e56:	b480      	push	{r7}
 8005e58:	b083      	sub	sp, #12
 8005e5a:	af00      	add	r7, sp, #0
 8005e5c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	2b04      	cmp	r3, #4
 8005e68:	d106      	bne.n	8005e78 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8005e70:	b2da      	uxtb	r2, r3
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8005e78:	2300      	movs	r3, #0
}
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	370c      	adds	r7, #12
 8005e7e:	46bd      	mov	sp, r7
 8005e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e84:	4770      	bx	lr

08005e86 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b082      	sub	sp, #8
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005e94:	b2db      	uxtb	r3, r3
 8005e96:	2b03      	cmp	r3, #3
 8005e98:	d110      	bne.n	8005ebc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00b      	beq.n	8005ebc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005eaa:	69db      	ldr	r3, [r3, #28]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d005      	beq.n	8005ebc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3708      	adds	r7, #8
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b082      	sub	sp, #8
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	6078      	str	r0, [r7, #4]
 8005ece:	460b      	mov	r3, r1
 8005ed0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	32ae      	adds	r2, #174	@ 0xae
 8005edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee0:	2b00      	cmp	r3, #0
 8005ee2:	d101      	bne.n	8005ee8 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005ee4:	2303      	movs	r3, #3
 8005ee6:	e01c      	b.n	8005f22 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	2b03      	cmp	r3, #3
 8005ef2:	d115      	bne.n	8005f20 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	32ae      	adds	r2, #174	@ 0xae
 8005efe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f02:	6a1b      	ldr	r3, [r3, #32]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00b      	beq.n	8005f20 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	32ae      	adds	r2, #174	@ 0xae
 8005f12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f16:	6a1b      	ldr	r3, [r3, #32]
 8005f18:	78fa      	ldrb	r2, [r7, #3]
 8005f1a:	4611      	mov	r1, r2
 8005f1c:	6878      	ldr	r0, [r7, #4]
 8005f1e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f20:	2300      	movs	r3, #0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b082      	sub	sp, #8
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	460b      	mov	r3, r1
 8005f34:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	32ae      	adds	r2, #174	@ 0xae
 8005f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d101      	bne.n	8005f4c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	e01c      	b.n	8005f86 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f52:	b2db      	uxtb	r3, r3
 8005f54:	2b03      	cmp	r3, #3
 8005f56:	d115      	bne.n	8005f84 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	32ae      	adds	r2, #174	@ 0xae
 8005f62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00b      	beq.n	8005f84 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	32ae      	adds	r2, #174	@ 0xae
 8005f76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f7c:	78fa      	ldrb	r2, [r7, #3]
 8005f7e:	4611      	mov	r1, r2
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005f84:	2300      	movs	r3, #0
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	3708      	adds	r7, #8
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}

08005f8e <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b083      	sub	sp, #12
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005f96:	2300      	movs	r3, #0
}
 8005f98:	4618      	mov	r0, r3
 8005f9a:	370c      	adds	r7, #12
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa2:	4770      	bx	lr

08005fa4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005fac:	2300      	movs	r3, #0
 8005fae:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2201      	movs	r2, #1
 8005fb4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00e      	beq.n	8005fe0 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6852      	ldr	r2, [r2, #4]
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	4798      	blx	r3
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}

08005fea <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005ff6:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	370c      	adds	r7, #12
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006002:	4770      	bx	lr

08006004 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006004:	b480      	push	{r7}
 8006006:	b083      	sub	sp, #12
 8006008:	af00      	add	r7, sp, #0
 800600a:	6078      	str	r0, [r7, #4]
 800600c:	460b      	mov	r3, r1
 800600e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006010:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006012:	4618      	mov	r0, r3
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b086      	sub	sp, #24
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	460b      	mov	r3, r1
 8006028:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006032:	2300      	movs	r3, #0
 8006034:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	885b      	ldrh	r3, [r3, #2]
 800603a:	b29b      	uxth	r3, r3
 800603c:	68fa      	ldr	r2, [r7, #12]
 800603e:	7812      	ldrb	r2, [r2, #0]
 8006040:	4293      	cmp	r3, r2
 8006042:	d91f      	bls.n	8006084 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	781b      	ldrb	r3, [r3, #0]
 8006048:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800604a:	e013      	b.n	8006074 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800604c:	f107 030a 	add.w	r3, r7, #10
 8006050:	4619      	mov	r1, r3
 8006052:	6978      	ldr	r0, [r7, #20]
 8006054:	f000 f81b 	bl	800608e <USBD_GetNextDesc>
 8006058:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	785b      	ldrb	r3, [r3, #1]
 800605e:	2b05      	cmp	r3, #5
 8006060:	d108      	bne.n	8006074 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006066:	693b      	ldr	r3, [r7, #16]
 8006068:	789b      	ldrb	r3, [r3, #2]
 800606a:	78fa      	ldrb	r2, [r7, #3]
 800606c:	429a      	cmp	r2, r3
 800606e:	d008      	beq.n	8006082 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006070:	2300      	movs	r3, #0
 8006072:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	885b      	ldrh	r3, [r3, #2]
 8006078:	b29a      	uxth	r2, r3
 800607a:	897b      	ldrh	r3, [r7, #10]
 800607c:	429a      	cmp	r2, r3
 800607e:	d8e5      	bhi.n	800604c <USBD_GetEpDesc+0x2e>
 8006080:	e000      	b.n	8006084 <USBD_GetEpDesc+0x66>
          break;
 8006082:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006084:	693b      	ldr	r3, [r7, #16]
}
 8006086:	4618      	mov	r0, r3
 8006088:	3718      	adds	r7, #24
 800608a:	46bd      	mov	sp, r7
 800608c:	bd80      	pop	{r7, pc}

0800608e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800608e:	b480      	push	{r7}
 8006090:	b085      	sub	sp, #20
 8006092:	af00      	add	r7, sp, #0
 8006094:	6078      	str	r0, [r7, #4]
 8006096:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	881b      	ldrh	r3, [r3, #0]
 80060a0:	68fa      	ldr	r2, [r7, #12]
 80060a2:	7812      	ldrb	r2, [r2, #0]
 80060a4:	4413      	add	r3, r2
 80060a6:	b29a      	uxth	r2, r3
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	461a      	mov	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	4413      	add	r3, r2
 80060b6:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80060b8:	68fb      	ldr	r3, [r7, #12]
}
 80060ba:	4618      	mov	r0, r3
 80060bc:	3714      	adds	r7, #20
 80060be:	46bd      	mov	sp, r7
 80060c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c4:	4770      	bx	lr

080060c6 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80060c6:	b480      	push	{r7}
 80060c8:	b087      	sub	sp, #28
 80060ca:	af00      	add	r7, sp, #0
 80060cc:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	781b      	ldrb	r3, [r3, #0]
 80060d6:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80060d8:	697b      	ldr	r3, [r7, #20]
 80060da:	3301      	adds	r3, #1
 80060dc:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80060de:	697b      	ldr	r3, [r7, #20]
 80060e0:	781b      	ldrb	r3, [r3, #0]
 80060e2:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80060e4:	8a3b      	ldrh	r3, [r7, #16]
 80060e6:	021b      	lsls	r3, r3, #8
 80060e8:	b21a      	sxth	r2, r3
 80060ea:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80060ee:	4313      	orrs	r3, r2
 80060f0:	b21b      	sxth	r3, r3
 80060f2:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80060f4:	89fb      	ldrh	r3, [r7, #14]
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	371c      	adds	r7, #28
 80060fa:	46bd      	mov	sp, r7
 80060fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006100:	4770      	bx	lr
	...

08006104 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
 800610c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800610e:	2300      	movs	r3, #0
 8006110:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	781b      	ldrb	r3, [r3, #0]
 8006116:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800611a:	2b40      	cmp	r3, #64	@ 0x40
 800611c:	d005      	beq.n	800612a <USBD_StdDevReq+0x26>
 800611e:	2b40      	cmp	r3, #64	@ 0x40
 8006120:	d857      	bhi.n	80061d2 <USBD_StdDevReq+0xce>
 8006122:	2b00      	cmp	r3, #0
 8006124:	d00f      	beq.n	8006146 <USBD_StdDevReq+0x42>
 8006126:	2b20      	cmp	r3, #32
 8006128:	d153      	bne.n	80061d2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	32ae      	adds	r2, #174	@ 0xae
 8006134:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006138:	689b      	ldr	r3, [r3, #8]
 800613a:	6839      	ldr	r1, [r7, #0]
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	4798      	blx	r3
 8006140:	4603      	mov	r3, r0
 8006142:	73fb      	strb	r3, [r7, #15]
      break;
 8006144:	e04a      	b.n	80061dc <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	785b      	ldrb	r3, [r3, #1]
 800614a:	2b09      	cmp	r3, #9
 800614c:	d83b      	bhi.n	80061c6 <USBD_StdDevReq+0xc2>
 800614e:	a201      	add	r2, pc, #4	@ (adr r2, 8006154 <USBD_StdDevReq+0x50>)
 8006150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006154:	080061a9 	.word	0x080061a9
 8006158:	080061bd 	.word	0x080061bd
 800615c:	080061c7 	.word	0x080061c7
 8006160:	080061b3 	.word	0x080061b3
 8006164:	080061c7 	.word	0x080061c7
 8006168:	08006187 	.word	0x08006187
 800616c:	0800617d 	.word	0x0800617d
 8006170:	080061c7 	.word	0x080061c7
 8006174:	0800619f 	.word	0x0800619f
 8006178:	08006191 	.word	0x08006191
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800617c:	6839      	ldr	r1, [r7, #0]
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f000 fa3c 	bl	80065fc <USBD_GetDescriptor>
          break;
 8006184:	e024      	b.n	80061d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006186:	6839      	ldr	r1, [r7, #0]
 8006188:	6878      	ldr	r0, [r7, #4]
 800618a:	f000 fba1 	bl	80068d0 <USBD_SetAddress>
          break;
 800618e:	e01f      	b.n	80061d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006190:	6839      	ldr	r1, [r7, #0]
 8006192:	6878      	ldr	r0, [r7, #4]
 8006194:	f000 fbe0 	bl	8006958 <USBD_SetConfig>
 8006198:	4603      	mov	r3, r0
 800619a:	73fb      	strb	r3, [r7, #15]
          break;
 800619c:	e018      	b.n	80061d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800619e:	6839      	ldr	r1, [r7, #0]
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 fc83 	bl	8006aac <USBD_GetConfig>
          break;
 80061a6:	e013      	b.n	80061d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80061a8:	6839      	ldr	r1, [r7, #0]
 80061aa:	6878      	ldr	r0, [r7, #4]
 80061ac:	f000 fcb4 	bl	8006b18 <USBD_GetStatus>
          break;
 80061b0:	e00e      	b.n	80061d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80061b2:	6839      	ldr	r1, [r7, #0]
 80061b4:	6878      	ldr	r0, [r7, #4]
 80061b6:	f000 fce3 	bl	8006b80 <USBD_SetFeature>
          break;
 80061ba:	e009      	b.n	80061d0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80061bc:	6839      	ldr	r1, [r7, #0]
 80061be:	6878      	ldr	r0, [r7, #4]
 80061c0:	f000 fd07 	bl	8006bd2 <USBD_ClrFeature>
          break;
 80061c4:	e004      	b.n	80061d0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80061c6:	6839      	ldr	r1, [r7, #0]
 80061c8:	6878      	ldr	r0, [r7, #4]
 80061ca:	f000 fd5e 	bl	8006c8a <USBD_CtlError>
          break;
 80061ce:	bf00      	nop
      }
      break;
 80061d0:	e004      	b.n	80061dc <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80061d2:	6839      	ldr	r1, [r7, #0]
 80061d4:	6878      	ldr	r0, [r7, #4]
 80061d6:	f000 fd58 	bl	8006c8a <USBD_CtlError>
      break;
 80061da:	bf00      	nop
  }

  return ret;
 80061dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3710      	adds	r7, #16
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop

080061e8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80061e8:	b580      	push	{r7, lr}
 80061ea:	b084      	sub	sp, #16
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80061f2:	2300      	movs	r3, #0
 80061f4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80061f6:	683b      	ldr	r3, [r7, #0]
 80061f8:	781b      	ldrb	r3, [r3, #0]
 80061fa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80061fe:	2b40      	cmp	r3, #64	@ 0x40
 8006200:	d005      	beq.n	800620e <USBD_StdItfReq+0x26>
 8006202:	2b40      	cmp	r3, #64	@ 0x40
 8006204:	d852      	bhi.n	80062ac <USBD_StdItfReq+0xc4>
 8006206:	2b00      	cmp	r3, #0
 8006208:	d001      	beq.n	800620e <USBD_StdItfReq+0x26>
 800620a:	2b20      	cmp	r3, #32
 800620c:	d14e      	bne.n	80062ac <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006214:	b2db      	uxtb	r3, r3
 8006216:	3b01      	subs	r3, #1
 8006218:	2b02      	cmp	r3, #2
 800621a:	d840      	bhi.n	800629e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	889b      	ldrh	r3, [r3, #4]
 8006220:	b2db      	uxtb	r3, r3
 8006222:	2b02      	cmp	r3, #2
 8006224:	d836      	bhi.n	8006294 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006226:	683b      	ldr	r3, [r7, #0]
 8006228:	889b      	ldrh	r3, [r3, #4]
 800622a:	b2db      	uxtb	r3, r3
 800622c:	4619      	mov	r1, r3
 800622e:	6878      	ldr	r0, [r7, #4]
 8006230:	f7ff fedb 	bl	8005fea <USBD_CoreFindIF>
 8006234:	4603      	mov	r3, r0
 8006236:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006238:	7bbb      	ldrb	r3, [r7, #14]
 800623a:	2bff      	cmp	r3, #255	@ 0xff
 800623c:	d01d      	beq.n	800627a <USBD_StdItfReq+0x92>
 800623e:	7bbb      	ldrb	r3, [r7, #14]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d11a      	bne.n	800627a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006244:	7bba      	ldrb	r2, [r7, #14]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	32ae      	adds	r2, #174	@ 0xae
 800624a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800624e:	689b      	ldr	r3, [r3, #8]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d00f      	beq.n	8006274 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006254:	7bba      	ldrb	r2, [r7, #14]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800625c:	7bba      	ldrb	r2, [r7, #14]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	32ae      	adds	r2, #174	@ 0xae
 8006262:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006266:	689b      	ldr	r3, [r3, #8]
 8006268:	6839      	ldr	r1, [r7, #0]
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	4798      	blx	r3
 800626e:	4603      	mov	r3, r0
 8006270:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006272:	e004      	b.n	800627e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006274:	2303      	movs	r3, #3
 8006276:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006278:	e001      	b.n	800627e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800627a:	2303      	movs	r3, #3
 800627c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	88db      	ldrh	r3, [r3, #6]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d110      	bne.n	80062a8 <USBD_StdItfReq+0xc0>
 8006286:	7bfb      	ldrb	r3, [r7, #15]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d10d      	bne.n	80062a8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 fdc7 	bl	8006e20 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006292:	e009      	b.n	80062a8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006294:	6839      	ldr	r1, [r7, #0]
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fcf7 	bl	8006c8a <USBD_CtlError>
          break;
 800629c:	e004      	b.n	80062a8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800629e:	6839      	ldr	r1, [r7, #0]
 80062a0:	6878      	ldr	r0, [r7, #4]
 80062a2:	f000 fcf2 	bl	8006c8a <USBD_CtlError>
          break;
 80062a6:	e000      	b.n	80062aa <USBD_StdItfReq+0xc2>
          break;
 80062a8:	bf00      	nop
      }
      break;
 80062aa:	e004      	b.n	80062b6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80062ac:	6839      	ldr	r1, [r7, #0]
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fceb 	bl	8006c8a <USBD_CtlError>
      break;
 80062b4:	bf00      	nop
  }

  return ret;
 80062b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80062b8:	4618      	mov	r0, r3
 80062ba:	3710      	adds	r7, #16
 80062bc:	46bd      	mov	sp, r7
 80062be:	bd80      	pop	{r7, pc}

080062c0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	b084      	sub	sp, #16
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
 80062c8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80062ca:	2300      	movs	r3, #0
 80062cc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	889b      	ldrh	r3, [r3, #4]
 80062d2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80062d4:	683b      	ldr	r3, [r7, #0]
 80062d6:	781b      	ldrb	r3, [r3, #0]
 80062d8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 80062dc:	2b40      	cmp	r3, #64	@ 0x40
 80062de:	d007      	beq.n	80062f0 <USBD_StdEPReq+0x30>
 80062e0:	2b40      	cmp	r3, #64	@ 0x40
 80062e2:	f200 817f 	bhi.w	80065e4 <USBD_StdEPReq+0x324>
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d02a      	beq.n	8006340 <USBD_StdEPReq+0x80>
 80062ea:	2b20      	cmp	r3, #32
 80062ec:	f040 817a 	bne.w	80065e4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80062f0:	7bbb      	ldrb	r3, [r7, #14]
 80062f2:	4619      	mov	r1, r3
 80062f4:	6878      	ldr	r0, [r7, #4]
 80062f6:	f7ff fe85 	bl	8006004 <USBD_CoreFindEP>
 80062fa:	4603      	mov	r3, r0
 80062fc:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80062fe:	7b7b      	ldrb	r3, [r7, #13]
 8006300:	2bff      	cmp	r3, #255	@ 0xff
 8006302:	f000 8174 	beq.w	80065ee <USBD_StdEPReq+0x32e>
 8006306:	7b7b      	ldrb	r3, [r7, #13]
 8006308:	2b00      	cmp	r3, #0
 800630a:	f040 8170 	bne.w	80065ee <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800630e:	7b7a      	ldrb	r2, [r7, #13]
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006316:	7b7a      	ldrb	r2, [r7, #13]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	32ae      	adds	r2, #174	@ 0xae
 800631c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006320:	689b      	ldr	r3, [r3, #8]
 8006322:	2b00      	cmp	r3, #0
 8006324:	f000 8163 	beq.w	80065ee <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006328:	7b7a      	ldrb	r2, [r7, #13]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	32ae      	adds	r2, #174	@ 0xae
 800632e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006332:	689b      	ldr	r3, [r3, #8]
 8006334:	6839      	ldr	r1, [r7, #0]
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	4798      	blx	r3
 800633a:	4603      	mov	r3, r0
 800633c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800633e:	e156      	b.n	80065ee <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	785b      	ldrb	r3, [r3, #1]
 8006344:	2b03      	cmp	r3, #3
 8006346:	d008      	beq.n	800635a <USBD_StdEPReq+0x9a>
 8006348:	2b03      	cmp	r3, #3
 800634a:	f300 8145 	bgt.w	80065d8 <USBD_StdEPReq+0x318>
 800634e:	2b00      	cmp	r3, #0
 8006350:	f000 809b 	beq.w	800648a <USBD_StdEPReq+0x1ca>
 8006354:	2b01      	cmp	r3, #1
 8006356:	d03c      	beq.n	80063d2 <USBD_StdEPReq+0x112>
 8006358:	e13e      	b.n	80065d8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b02      	cmp	r3, #2
 8006364:	d002      	beq.n	800636c <USBD_StdEPReq+0xac>
 8006366:	2b03      	cmp	r3, #3
 8006368:	d016      	beq.n	8006398 <USBD_StdEPReq+0xd8>
 800636a:	e02c      	b.n	80063c6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800636c:	7bbb      	ldrb	r3, [r7, #14]
 800636e:	2b00      	cmp	r3, #0
 8006370:	d00d      	beq.n	800638e <USBD_StdEPReq+0xce>
 8006372:	7bbb      	ldrb	r3, [r7, #14]
 8006374:	2b80      	cmp	r3, #128	@ 0x80
 8006376:	d00a      	beq.n	800638e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006378:	7bbb      	ldrb	r3, [r7, #14]
 800637a:	4619      	mov	r1, r3
 800637c:	6878      	ldr	r0, [r7, #4]
 800637e:	f001 f8c5 	bl	800750c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006382:	2180      	movs	r1, #128	@ 0x80
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f001 f8c1 	bl	800750c <USBD_LL_StallEP>
 800638a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800638c:	e020      	b.n	80063d0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800638e:	6839      	ldr	r1, [r7, #0]
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fc7a 	bl	8006c8a <USBD_CtlError>
              break;
 8006396:	e01b      	b.n	80063d0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	885b      	ldrh	r3, [r3, #2]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d10e      	bne.n	80063be <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80063a0:	7bbb      	ldrb	r3, [r7, #14]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d00b      	beq.n	80063be <USBD_StdEPReq+0xfe>
 80063a6:	7bbb      	ldrb	r3, [r7, #14]
 80063a8:	2b80      	cmp	r3, #128	@ 0x80
 80063aa:	d008      	beq.n	80063be <USBD_StdEPReq+0xfe>
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	88db      	ldrh	r3, [r3, #6]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d104      	bne.n	80063be <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80063b4:	7bbb      	ldrb	r3, [r7, #14]
 80063b6:	4619      	mov	r1, r3
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f001 f8a7 	bl	800750c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 fd2e 	bl	8006e20 <USBD_CtlSendStatus>

              break;
 80063c4:	e004      	b.n	80063d0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80063c6:	6839      	ldr	r1, [r7, #0]
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f000 fc5e 	bl	8006c8a <USBD_CtlError>
              break;
 80063ce:	bf00      	nop
          }
          break;
 80063d0:	e107      	b.n	80065e2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b02      	cmp	r3, #2
 80063dc:	d002      	beq.n	80063e4 <USBD_StdEPReq+0x124>
 80063de:	2b03      	cmp	r3, #3
 80063e0:	d016      	beq.n	8006410 <USBD_StdEPReq+0x150>
 80063e2:	e04b      	b.n	800647c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80063e4:	7bbb      	ldrb	r3, [r7, #14]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d00d      	beq.n	8006406 <USBD_StdEPReq+0x146>
 80063ea:	7bbb      	ldrb	r3, [r7, #14]
 80063ec:	2b80      	cmp	r3, #128	@ 0x80
 80063ee:	d00a      	beq.n	8006406 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80063f0:	7bbb      	ldrb	r3, [r7, #14]
 80063f2:	4619      	mov	r1, r3
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f001 f889 	bl	800750c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80063fa:	2180      	movs	r1, #128	@ 0x80
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f001 f885 	bl	800750c <USBD_LL_StallEP>
 8006402:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006404:	e040      	b.n	8006488 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006406:	6839      	ldr	r1, [r7, #0]
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fc3e 	bl	8006c8a <USBD_CtlError>
              break;
 800640e:	e03b      	b.n	8006488 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	885b      	ldrh	r3, [r3, #2]
 8006414:	2b00      	cmp	r3, #0
 8006416:	d136      	bne.n	8006486 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006418:	7bbb      	ldrb	r3, [r7, #14]
 800641a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800641e:	2b00      	cmp	r3, #0
 8006420:	d004      	beq.n	800642c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006422:	7bbb      	ldrb	r3, [r7, #14]
 8006424:	4619      	mov	r1, r3
 8006426:	6878      	ldr	r0, [r7, #4]
 8006428:	f001 f88f 	bl	800754a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fcf7 	bl	8006e20 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006432:	7bbb      	ldrb	r3, [r7, #14]
 8006434:	4619      	mov	r1, r3
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f7ff fde4 	bl	8006004 <USBD_CoreFindEP>
 800643c:	4603      	mov	r3, r0
 800643e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006440:	7b7b      	ldrb	r3, [r7, #13]
 8006442:	2bff      	cmp	r3, #255	@ 0xff
 8006444:	d01f      	beq.n	8006486 <USBD_StdEPReq+0x1c6>
 8006446:	7b7b      	ldrb	r3, [r7, #13]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d11c      	bne.n	8006486 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800644c:	7b7a      	ldrb	r2, [r7, #13]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006454:	7b7a      	ldrb	r2, [r7, #13]
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	32ae      	adds	r2, #174	@ 0xae
 800645a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d010      	beq.n	8006486 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006464:	7b7a      	ldrb	r2, [r7, #13]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	32ae      	adds	r2, #174	@ 0xae
 800646a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800646e:	689b      	ldr	r3, [r3, #8]
 8006470:	6839      	ldr	r1, [r7, #0]
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	4798      	blx	r3
 8006476:	4603      	mov	r3, r0
 8006478:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800647a:	e004      	b.n	8006486 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800647c:	6839      	ldr	r1, [r7, #0]
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 fc03 	bl	8006c8a <USBD_CtlError>
              break;
 8006484:	e000      	b.n	8006488 <USBD_StdEPReq+0x1c8>
              break;
 8006486:	bf00      	nop
          }
          break;
 8006488:	e0ab      	b.n	80065e2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006490:	b2db      	uxtb	r3, r3
 8006492:	2b02      	cmp	r3, #2
 8006494:	d002      	beq.n	800649c <USBD_StdEPReq+0x1dc>
 8006496:	2b03      	cmp	r3, #3
 8006498:	d032      	beq.n	8006500 <USBD_StdEPReq+0x240>
 800649a:	e097      	b.n	80065cc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800649c:	7bbb      	ldrb	r3, [r7, #14]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d007      	beq.n	80064b2 <USBD_StdEPReq+0x1f2>
 80064a2:	7bbb      	ldrb	r3, [r7, #14]
 80064a4:	2b80      	cmp	r3, #128	@ 0x80
 80064a6:	d004      	beq.n	80064b2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80064a8:	6839      	ldr	r1, [r7, #0]
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 fbed 	bl	8006c8a <USBD_CtlError>
                break;
 80064b0:	e091      	b.n	80065d6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064b2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	da0b      	bge.n	80064d2 <USBD_StdEPReq+0x212>
 80064ba:	7bbb      	ldrb	r3, [r7, #14]
 80064bc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80064c0:	4613      	mov	r3, r2
 80064c2:	009b      	lsls	r3, r3, #2
 80064c4:	4413      	add	r3, r2
 80064c6:	009b      	lsls	r3, r3, #2
 80064c8:	3310      	adds	r3, #16
 80064ca:	687a      	ldr	r2, [r7, #4]
 80064cc:	4413      	add	r3, r2
 80064ce:	3304      	adds	r3, #4
 80064d0:	e00b      	b.n	80064ea <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80064d2:	7bbb      	ldrb	r3, [r7, #14]
 80064d4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80064d8:	4613      	mov	r3, r2
 80064da:	009b      	lsls	r3, r3, #2
 80064dc:	4413      	add	r3, r2
 80064de:	009b      	lsls	r3, r3, #2
 80064e0:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	4413      	add	r3, r2
 80064e8:	3304      	adds	r3, #4
 80064ea:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	2200      	movs	r2, #0
 80064f0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	2202      	movs	r2, #2
 80064f6:	4619      	mov	r1, r3
 80064f8:	6878      	ldr	r0, [r7, #4]
 80064fa:	f000 fc37 	bl	8006d6c <USBD_CtlSendData>
              break;
 80064fe:	e06a      	b.n	80065d6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006500:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006504:	2b00      	cmp	r3, #0
 8006506:	da11      	bge.n	800652c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006508:	7bbb      	ldrb	r3, [r7, #14]
 800650a:	f003 020f 	and.w	r2, r3, #15
 800650e:	6879      	ldr	r1, [r7, #4]
 8006510:	4613      	mov	r3, r2
 8006512:	009b      	lsls	r3, r3, #2
 8006514:	4413      	add	r3, r2
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	440b      	add	r3, r1
 800651a:	3324      	adds	r3, #36	@ 0x24
 800651c:	881b      	ldrh	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d117      	bne.n	8006552 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006522:	6839      	ldr	r1, [r7, #0]
 8006524:	6878      	ldr	r0, [r7, #4]
 8006526:	f000 fbb0 	bl	8006c8a <USBD_CtlError>
                  break;
 800652a:	e054      	b.n	80065d6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800652c:	7bbb      	ldrb	r3, [r7, #14]
 800652e:	f003 020f 	and.w	r2, r3, #15
 8006532:	6879      	ldr	r1, [r7, #4]
 8006534:	4613      	mov	r3, r2
 8006536:	009b      	lsls	r3, r3, #2
 8006538:	4413      	add	r3, r2
 800653a:	009b      	lsls	r3, r3, #2
 800653c:	440b      	add	r3, r1
 800653e:	f503 73b2 	add.w	r3, r3, #356	@ 0x164
 8006542:	881b      	ldrh	r3, [r3, #0]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d104      	bne.n	8006552 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006548:	6839      	ldr	r1, [r7, #0]
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fb9d 	bl	8006c8a <USBD_CtlError>
                  break;
 8006550:	e041      	b.n	80065d6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006552:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006556:	2b00      	cmp	r3, #0
 8006558:	da0b      	bge.n	8006572 <USBD_StdEPReq+0x2b2>
 800655a:	7bbb      	ldrb	r3, [r7, #14]
 800655c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8006560:	4613      	mov	r3, r2
 8006562:	009b      	lsls	r3, r3, #2
 8006564:	4413      	add	r3, r2
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	3310      	adds	r3, #16
 800656a:	687a      	ldr	r2, [r7, #4]
 800656c:	4413      	add	r3, r2
 800656e:	3304      	adds	r3, #4
 8006570:	e00b      	b.n	800658a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006572:	7bbb      	ldrb	r3, [r7, #14]
 8006574:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006578:	4613      	mov	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4413      	add	r3, r2
 800657e:	009b      	lsls	r3, r3, #2
 8006580:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8006584:	687a      	ldr	r2, [r7, #4]
 8006586:	4413      	add	r3, r2
 8006588:	3304      	adds	r3, #4
 800658a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800658c:	7bbb      	ldrb	r3, [r7, #14]
 800658e:	2b00      	cmp	r3, #0
 8006590:	d002      	beq.n	8006598 <USBD_StdEPReq+0x2d8>
 8006592:	7bbb      	ldrb	r3, [r7, #14]
 8006594:	2b80      	cmp	r3, #128	@ 0x80
 8006596:	d103      	bne.n	80065a0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2200      	movs	r2, #0
 800659c:	601a      	str	r2, [r3, #0]
 800659e:	e00e      	b.n	80065be <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80065a0:	7bbb      	ldrb	r3, [r7, #14]
 80065a2:	4619      	mov	r1, r3
 80065a4:	6878      	ldr	r0, [r7, #4]
 80065a6:	f000 ffef 	bl	8007588 <USBD_LL_IsStallEP>
 80065aa:	4603      	mov	r3, r0
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d003      	beq.n	80065b8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80065b0:	68bb      	ldr	r3, [r7, #8]
 80065b2:	2201      	movs	r2, #1
 80065b4:	601a      	str	r2, [r3, #0]
 80065b6:	e002      	b.n	80065be <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	2200      	movs	r2, #0
 80065bc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	2202      	movs	r2, #2
 80065c2:	4619      	mov	r1, r3
 80065c4:	6878      	ldr	r0, [r7, #4]
 80065c6:	f000 fbd1 	bl	8006d6c <USBD_CtlSendData>
              break;
 80065ca:	e004      	b.n	80065d6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80065cc:	6839      	ldr	r1, [r7, #0]
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 fb5b 	bl	8006c8a <USBD_CtlError>
              break;
 80065d4:	bf00      	nop
          }
          break;
 80065d6:	e004      	b.n	80065e2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80065d8:	6839      	ldr	r1, [r7, #0]
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 fb55 	bl	8006c8a <USBD_CtlError>
          break;
 80065e0:	bf00      	nop
      }
      break;
 80065e2:	e005      	b.n	80065f0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80065e4:	6839      	ldr	r1, [r7, #0]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f000 fb4f 	bl	8006c8a <USBD_CtlError>
      break;
 80065ec:	e000      	b.n	80065f0 <USBD_StdEPReq+0x330>
      break;
 80065ee:	bf00      	nop
  }

  return ret;
 80065f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f2:	4618      	mov	r0, r3
 80065f4:	3710      	adds	r7, #16
 80065f6:	46bd      	mov	sp, r7
 80065f8:	bd80      	pop	{r7, pc}
	...

080065fc <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006606:	2300      	movs	r3, #0
 8006608:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800660e:	2300      	movs	r3, #0
 8006610:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	885b      	ldrh	r3, [r3, #2]
 8006616:	0a1b      	lsrs	r3, r3, #8
 8006618:	b29b      	uxth	r3, r3
 800661a:	3b01      	subs	r3, #1
 800661c:	2b06      	cmp	r3, #6
 800661e:	f200 8128 	bhi.w	8006872 <USBD_GetDescriptor+0x276>
 8006622:	a201      	add	r2, pc, #4	@ (adr r2, 8006628 <USBD_GetDescriptor+0x2c>)
 8006624:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006628:	08006645 	.word	0x08006645
 800662c:	0800665d 	.word	0x0800665d
 8006630:	0800669d 	.word	0x0800669d
 8006634:	08006873 	.word	0x08006873
 8006638:	08006873 	.word	0x08006873
 800663c:	08006813 	.word	0x08006813
 8006640:	0800683f 	.word	0x0800683f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	7c12      	ldrb	r2, [r2, #16]
 8006650:	f107 0108 	add.w	r1, r7, #8
 8006654:	4610      	mov	r0, r2
 8006656:	4798      	blx	r3
 8006658:	60f8      	str	r0, [r7, #12]
      break;
 800665a:	e112      	b.n	8006882 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	7c1b      	ldrb	r3, [r3, #16]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10d      	bne.n	8006680 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800666a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800666c:	f107 0208 	add.w	r2, r7, #8
 8006670:	4610      	mov	r0, r2
 8006672:	4798      	blx	r3
 8006674:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	3301      	adds	r3, #1
 800667a:	2202      	movs	r2, #2
 800667c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800667e:	e100      	b.n	8006882 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006688:	f107 0208 	add.w	r2, r7, #8
 800668c:	4610      	mov	r0, r2
 800668e:	4798      	blx	r3
 8006690:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	3301      	adds	r3, #1
 8006696:	2202      	movs	r2, #2
 8006698:	701a      	strb	r2, [r3, #0]
      break;
 800669a:	e0f2      	b.n	8006882 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	885b      	ldrh	r3, [r3, #2]
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b05      	cmp	r3, #5
 80066a4:	f200 80ac 	bhi.w	8006800 <USBD_GetDescriptor+0x204>
 80066a8:	a201      	add	r2, pc, #4	@ (adr r2, 80066b0 <USBD_GetDescriptor+0xb4>)
 80066aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ae:	bf00      	nop
 80066b0:	080066c9 	.word	0x080066c9
 80066b4:	080066fd 	.word	0x080066fd
 80066b8:	08006731 	.word	0x08006731
 80066bc:	08006765 	.word	0x08006765
 80066c0:	08006799 	.word	0x08006799
 80066c4:	080067cd 	.word	0x080067cd
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066ce:	685b      	ldr	r3, [r3, #4]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d00b      	beq.n	80066ec <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80066da:	685b      	ldr	r3, [r3, #4]
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	7c12      	ldrb	r2, [r2, #16]
 80066e0:	f107 0108 	add.w	r1, r7, #8
 80066e4:	4610      	mov	r0, r2
 80066e6:	4798      	blx	r3
 80066e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80066ea:	e091      	b.n	8006810 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80066ec:	6839      	ldr	r1, [r7, #0]
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 facb 	bl	8006c8a <USBD_CtlError>
            err++;
 80066f4:	7afb      	ldrb	r3, [r7, #11]
 80066f6:	3301      	adds	r3, #1
 80066f8:	72fb      	strb	r3, [r7, #11]
          break;
 80066fa:	e089      	b.n	8006810 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006702:	689b      	ldr	r3, [r3, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d00b      	beq.n	8006720 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	687a      	ldr	r2, [r7, #4]
 8006712:	7c12      	ldrb	r2, [r2, #16]
 8006714:	f107 0108 	add.w	r1, r7, #8
 8006718:	4610      	mov	r0, r2
 800671a:	4798      	blx	r3
 800671c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800671e:	e077      	b.n	8006810 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006720:	6839      	ldr	r1, [r7, #0]
 8006722:	6878      	ldr	r0, [r7, #4]
 8006724:	f000 fab1 	bl	8006c8a <USBD_CtlError>
            err++;
 8006728:	7afb      	ldrb	r3, [r7, #11]
 800672a:	3301      	adds	r3, #1
 800672c:	72fb      	strb	r3, [r7, #11]
          break;
 800672e:	e06f      	b.n	8006810 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	2b00      	cmp	r3, #0
 800673a:	d00b      	beq.n	8006754 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006742:	68db      	ldr	r3, [r3, #12]
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	7c12      	ldrb	r2, [r2, #16]
 8006748:	f107 0108 	add.w	r1, r7, #8
 800674c:	4610      	mov	r0, r2
 800674e:	4798      	blx	r3
 8006750:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006752:	e05d      	b.n	8006810 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006754:	6839      	ldr	r1, [r7, #0]
 8006756:	6878      	ldr	r0, [r7, #4]
 8006758:	f000 fa97 	bl	8006c8a <USBD_CtlError>
            err++;
 800675c:	7afb      	ldrb	r3, [r7, #11]
 800675e:	3301      	adds	r3, #1
 8006760:	72fb      	strb	r3, [r7, #11]
          break;
 8006762:	e055      	b.n	8006810 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800676a:	691b      	ldr	r3, [r3, #16]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d00b      	beq.n	8006788 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8006776:	691b      	ldr	r3, [r3, #16]
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	7c12      	ldrb	r2, [r2, #16]
 800677c:	f107 0108 	add.w	r1, r7, #8
 8006780:	4610      	mov	r0, r2
 8006782:	4798      	blx	r3
 8006784:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006786:	e043      	b.n	8006810 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006788:	6839      	ldr	r1, [r7, #0]
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 fa7d 	bl	8006c8a <USBD_CtlError>
            err++;
 8006790:	7afb      	ldrb	r3, [r7, #11]
 8006792:	3301      	adds	r3, #1
 8006794:	72fb      	strb	r3, [r7, #11]
          break;
 8006796:	e03b      	b.n	8006810 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d00b      	beq.n	80067bc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067aa:	695b      	ldr	r3, [r3, #20]
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	7c12      	ldrb	r2, [r2, #16]
 80067b0:	f107 0108 	add.w	r1, r7, #8
 80067b4:	4610      	mov	r0, r2
 80067b6:	4798      	blx	r3
 80067b8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ba:	e029      	b.n	8006810 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067bc:	6839      	ldr	r1, [r7, #0]
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f000 fa63 	bl	8006c8a <USBD_CtlError>
            err++;
 80067c4:	7afb      	ldrb	r3, [r7, #11]
 80067c6:	3301      	adds	r3, #1
 80067c8:	72fb      	strb	r3, [r7, #11]
          break;
 80067ca:	e021      	b.n	8006810 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067d2:	699b      	ldr	r3, [r3, #24]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d00b      	beq.n	80067f0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80067de:	699b      	ldr	r3, [r3, #24]
 80067e0:	687a      	ldr	r2, [r7, #4]
 80067e2:	7c12      	ldrb	r2, [r2, #16]
 80067e4:	f107 0108 	add.w	r1, r7, #8
 80067e8:	4610      	mov	r0, r2
 80067ea:	4798      	blx	r3
 80067ec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80067ee:	e00f      	b.n	8006810 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fa49 	bl	8006c8a <USBD_CtlError>
            err++;
 80067f8:	7afb      	ldrb	r3, [r7, #11]
 80067fa:	3301      	adds	r3, #1
 80067fc:	72fb      	strb	r3, [r7, #11]
          break;
 80067fe:	e007      	b.n	8006810 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006800:	6839      	ldr	r1, [r7, #0]
 8006802:	6878      	ldr	r0, [r7, #4]
 8006804:	f000 fa41 	bl	8006c8a <USBD_CtlError>
          err++;
 8006808:	7afb      	ldrb	r3, [r7, #11]
 800680a:	3301      	adds	r3, #1
 800680c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800680e:	bf00      	nop
      }
      break;
 8006810:	e037      	b.n	8006882 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	7c1b      	ldrb	r3, [r3, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d109      	bne.n	800682e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006820:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006822:	f107 0208 	add.w	r2, r7, #8
 8006826:	4610      	mov	r0, r2
 8006828:	4798      	blx	r3
 800682a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800682c:	e029      	b.n	8006882 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fa2a 	bl	8006c8a <USBD_CtlError>
        err++;
 8006836:	7afb      	ldrb	r3, [r7, #11]
 8006838:	3301      	adds	r3, #1
 800683a:	72fb      	strb	r3, [r7, #11]
      break;
 800683c:	e021      	b.n	8006882 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	7c1b      	ldrb	r3, [r3, #16]
 8006842:	2b00      	cmp	r3, #0
 8006844:	d10d      	bne.n	8006862 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800684c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800684e:	f107 0208 	add.w	r2, r7, #8
 8006852:	4610      	mov	r0, r2
 8006854:	4798      	blx	r3
 8006856:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	3301      	adds	r3, #1
 800685c:	2207      	movs	r2, #7
 800685e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006860:	e00f      	b.n	8006882 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006862:	6839      	ldr	r1, [r7, #0]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fa10 	bl	8006c8a <USBD_CtlError>
        err++;
 800686a:	7afb      	ldrb	r3, [r7, #11]
 800686c:	3301      	adds	r3, #1
 800686e:	72fb      	strb	r3, [r7, #11]
      break;
 8006870:	e007      	b.n	8006882 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006872:	6839      	ldr	r1, [r7, #0]
 8006874:	6878      	ldr	r0, [r7, #4]
 8006876:	f000 fa08 	bl	8006c8a <USBD_CtlError>
      err++;
 800687a:	7afb      	ldrb	r3, [r7, #11]
 800687c:	3301      	adds	r3, #1
 800687e:	72fb      	strb	r3, [r7, #11]
      break;
 8006880:	bf00      	nop
  }

  if (err != 0U)
 8006882:	7afb      	ldrb	r3, [r7, #11]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d11e      	bne.n	80068c6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	88db      	ldrh	r3, [r3, #6]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d016      	beq.n	80068be <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006890:	893b      	ldrh	r3, [r7, #8]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d00e      	beq.n	80068b4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006896:	683b      	ldr	r3, [r7, #0]
 8006898:	88da      	ldrh	r2, [r3, #6]
 800689a:	893b      	ldrh	r3, [r7, #8]
 800689c:	4293      	cmp	r3, r2
 800689e:	bf28      	it	cs
 80068a0:	4613      	movcs	r3, r2
 80068a2:	b29b      	uxth	r3, r3
 80068a4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80068a6:	893b      	ldrh	r3, [r7, #8]
 80068a8:	461a      	mov	r2, r3
 80068aa:	68f9      	ldr	r1, [r7, #12]
 80068ac:	6878      	ldr	r0, [r7, #4]
 80068ae:	f000 fa5d 	bl	8006d6c <USBD_CtlSendData>
 80068b2:	e009      	b.n	80068c8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	6878      	ldr	r0, [r7, #4]
 80068b8:	f000 f9e7 	bl	8006c8a <USBD_CtlError>
 80068bc:	e004      	b.n	80068c8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80068be:	6878      	ldr	r0, [r7, #4]
 80068c0:	f000 faae 	bl	8006e20 <USBD_CtlSendStatus>
 80068c4:	e000      	b.n	80068c8 <USBD_GetDescriptor+0x2cc>
    return;
 80068c6:	bf00      	nop
  }
}
 80068c8:	3710      	adds	r7, #16
 80068ca:	46bd      	mov	sp, r7
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	bf00      	nop

080068d0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	889b      	ldrh	r3, [r3, #4]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d131      	bne.n	8006946 <USBD_SetAddress+0x76>
 80068e2:	683b      	ldr	r3, [r7, #0]
 80068e4:	88db      	ldrh	r3, [r3, #6]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d12d      	bne.n	8006946 <USBD_SetAddress+0x76>
 80068ea:	683b      	ldr	r3, [r7, #0]
 80068ec:	885b      	ldrh	r3, [r3, #2]
 80068ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80068f0:	d829      	bhi.n	8006946 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	885b      	ldrh	r3, [r3, #2]
 80068f6:	b2db      	uxtb	r3, r3
 80068f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80068fc:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b03      	cmp	r3, #3
 8006908:	d104      	bne.n	8006914 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800690a:	6839      	ldr	r1, [r7, #0]
 800690c:	6878      	ldr	r0, [r7, #4]
 800690e:	f000 f9bc 	bl	8006c8a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006912:	e01d      	b.n	8006950 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	7bfa      	ldrb	r2, [r7, #15]
 8006918:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800691c:	7bfb      	ldrb	r3, [r7, #15]
 800691e:	4619      	mov	r1, r3
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 fe5d 	bl	80075e0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006926:	6878      	ldr	r0, [r7, #4]
 8006928:	f000 fa7a 	bl	8006e20 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800692c:	7bfb      	ldrb	r3, [r7, #15]
 800692e:	2b00      	cmp	r3, #0
 8006930:	d004      	beq.n	800693c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	2202      	movs	r2, #2
 8006936:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800693a:	e009      	b.n	8006950 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	2201      	movs	r2, #1
 8006940:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006944:	e004      	b.n	8006950 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 f99e 	bl	8006c8a <USBD_CtlError>
  }
}
 800694e:	bf00      	nop
 8006950:	bf00      	nop
 8006952:	3710      	adds	r7, #16
 8006954:	46bd      	mov	sp, r7
 8006956:	bd80      	pop	{r7, pc}

08006958 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006962:	2300      	movs	r3, #0
 8006964:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	885b      	ldrh	r3, [r3, #2]
 800696a:	b2da      	uxtb	r2, r3
 800696c:	4b4e      	ldr	r3, [pc, #312]	@ (8006aa8 <USBD_SetConfig+0x150>)
 800696e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006970:	4b4d      	ldr	r3, [pc, #308]	@ (8006aa8 <USBD_SetConfig+0x150>)
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	2b02      	cmp	r3, #2
 8006976:	d905      	bls.n	8006984 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006978:	6839      	ldr	r1, [r7, #0]
 800697a:	6878      	ldr	r0, [r7, #4]
 800697c:	f000 f985 	bl	8006c8a <USBD_CtlError>
    return USBD_FAIL;
 8006980:	2303      	movs	r3, #3
 8006982:	e08c      	b.n	8006a9e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800698a:	b2db      	uxtb	r3, r3
 800698c:	2b02      	cmp	r3, #2
 800698e:	d002      	beq.n	8006996 <USBD_SetConfig+0x3e>
 8006990:	2b03      	cmp	r3, #3
 8006992:	d029      	beq.n	80069e8 <USBD_SetConfig+0x90>
 8006994:	e075      	b.n	8006a82 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006996:	4b44      	ldr	r3, [pc, #272]	@ (8006aa8 <USBD_SetConfig+0x150>)
 8006998:	781b      	ldrb	r3, [r3, #0]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d020      	beq.n	80069e0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800699e:	4b42      	ldr	r3, [pc, #264]	@ (8006aa8 <USBD_SetConfig+0x150>)
 80069a0:	781b      	ldrb	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80069a8:	4b3f      	ldr	r3, [pc, #252]	@ (8006aa8 <USBD_SetConfig+0x150>)
 80069aa:	781b      	ldrb	r3, [r3, #0]
 80069ac:	4619      	mov	r1, r3
 80069ae:	6878      	ldr	r0, [r7, #4]
 80069b0:	f7fe ffe9 	bl	8005986 <USBD_SetClassConfig>
 80069b4:	4603      	mov	r3, r0
 80069b6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80069b8:	7bfb      	ldrb	r3, [r7, #15]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d008      	beq.n	80069d0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80069be:	6839      	ldr	r1, [r7, #0]
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	f000 f962 	bl	8006c8a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	2202      	movs	r2, #2
 80069ca:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80069ce:	e065      	b.n	8006a9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80069d0:	6878      	ldr	r0, [r7, #4]
 80069d2:	f000 fa25 	bl	8006e20 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2203      	movs	r2, #3
 80069da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80069de:	e05d      	b.n	8006a9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80069e0:	6878      	ldr	r0, [r7, #4]
 80069e2:	f000 fa1d 	bl	8006e20 <USBD_CtlSendStatus>
      break;
 80069e6:	e059      	b.n	8006a9c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80069e8:	4b2f      	ldr	r3, [pc, #188]	@ (8006aa8 <USBD_SetConfig+0x150>)
 80069ea:	781b      	ldrb	r3, [r3, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d112      	bne.n	8006a16 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2202      	movs	r2, #2
 80069f4:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 80069f8:	4b2b      	ldr	r3, [pc, #172]	@ (8006aa8 <USBD_SetConfig+0x150>)
 80069fa:	781b      	ldrb	r3, [r3, #0]
 80069fc:	461a      	mov	r2, r3
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a02:	4b29      	ldr	r3, [pc, #164]	@ (8006aa8 <USBD_SetConfig+0x150>)
 8006a04:	781b      	ldrb	r3, [r3, #0]
 8006a06:	4619      	mov	r1, r3
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7fe ffd8 	bl	80059be <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006a0e:	6878      	ldr	r0, [r7, #4]
 8006a10:	f000 fa06 	bl	8006e20 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006a14:	e042      	b.n	8006a9c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006a16:	4b24      	ldr	r3, [pc, #144]	@ (8006aa8 <USBD_SetConfig+0x150>)
 8006a18:	781b      	ldrb	r3, [r3, #0]
 8006a1a:	461a      	mov	r2, r3
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	685b      	ldr	r3, [r3, #4]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d02a      	beq.n	8006a7a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	4619      	mov	r1, r3
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7fe ffc6 	bl	80059be <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006a32:	4b1d      	ldr	r3, [pc, #116]	@ (8006aa8 <USBD_SetConfig+0x150>)
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	461a      	mov	r2, r3
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006a3c:	4b1a      	ldr	r3, [pc, #104]	@ (8006aa8 <USBD_SetConfig+0x150>)
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	4619      	mov	r1, r3
 8006a42:	6878      	ldr	r0, [r7, #4]
 8006a44:	f7fe ff9f 	bl	8005986 <USBD_SetClassConfig>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d00f      	beq.n	8006a72 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006a52:	6839      	ldr	r1, [r7, #0]
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f918 	bl	8006c8a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	685b      	ldr	r3, [r3, #4]
 8006a5e:	b2db      	uxtb	r3, r3
 8006a60:	4619      	mov	r1, r3
 8006a62:	6878      	ldr	r0, [r7, #4]
 8006a64:	f7fe ffab 	bl	80059be <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	2202      	movs	r2, #2
 8006a6c:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8006a70:	e014      	b.n	8006a9c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f9d4 	bl	8006e20 <USBD_CtlSendStatus>
      break;
 8006a78:	e010      	b.n	8006a9c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f9d0 	bl	8006e20 <USBD_CtlSendStatus>
      break;
 8006a80:	e00c      	b.n	8006a9c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006a82:	6839      	ldr	r1, [r7, #0]
 8006a84:	6878      	ldr	r0, [r7, #4]
 8006a86:	f000 f900 	bl	8006c8a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006a8a:	4b07      	ldr	r3, [pc, #28]	@ (8006aa8 <USBD_SetConfig+0x150>)
 8006a8c:	781b      	ldrb	r3, [r3, #0]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f7fe ff94 	bl	80059be <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006a96:	2303      	movs	r3, #3
 8006a98:	73fb      	strb	r3, [r7, #15]
      break;
 8006a9a:	bf00      	nop
  }

  return ret;
 8006a9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3710      	adds	r7, #16
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	2000023c 	.word	0x2000023c

08006aac <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
 8006ab4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	88db      	ldrh	r3, [r3, #6]
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d004      	beq.n	8006ac8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006abe:	6839      	ldr	r1, [r7, #0]
 8006ac0:	6878      	ldr	r0, [r7, #4]
 8006ac2:	f000 f8e2 	bl	8006c8a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006ac6:	e023      	b.n	8006b10 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ace:	b2db      	uxtb	r3, r3
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	dc02      	bgt.n	8006ada <USBD_GetConfig+0x2e>
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	dc03      	bgt.n	8006ae0 <USBD_GetConfig+0x34>
 8006ad8:	e015      	b.n	8006b06 <USBD_GetConfig+0x5a>
 8006ada:	2b03      	cmp	r3, #3
 8006adc:	d00b      	beq.n	8006af6 <USBD_GetConfig+0x4a>
 8006ade:	e012      	b.n	8006b06 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	3308      	adds	r3, #8
 8006aea:	2201      	movs	r2, #1
 8006aec:	4619      	mov	r1, r3
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f000 f93c 	bl	8006d6c <USBD_CtlSendData>
        break;
 8006af4:	e00c      	b.n	8006b10 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	3304      	adds	r3, #4
 8006afa:	2201      	movs	r2, #1
 8006afc:	4619      	mov	r1, r3
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f000 f934 	bl	8006d6c <USBD_CtlSendData>
        break;
 8006b04:	e004      	b.n	8006b10 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006b06:	6839      	ldr	r1, [r7, #0]
 8006b08:	6878      	ldr	r0, [r7, #4]
 8006b0a:	f000 f8be 	bl	8006c8a <USBD_CtlError>
        break;
 8006b0e:	bf00      	nop
}
 8006b10:	bf00      	nop
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}

08006b18 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
 8006b20:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b28:	b2db      	uxtb	r3, r3
 8006b2a:	3b01      	subs	r3, #1
 8006b2c:	2b02      	cmp	r3, #2
 8006b2e:	d81e      	bhi.n	8006b6e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	88db      	ldrh	r3, [r3, #6]
 8006b34:	2b02      	cmp	r3, #2
 8006b36:	d004      	beq.n	8006b42 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006b38:	6839      	ldr	r1, [r7, #0]
 8006b3a:	6878      	ldr	r0, [r7, #4]
 8006b3c:	f000 f8a5 	bl	8006c8a <USBD_CtlError>
        break;
 8006b40:	e01a      	b.n	8006b78 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	2201      	movs	r2, #1
 8006b46:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d005      	beq.n	8006b5e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	68db      	ldr	r3, [r3, #12]
 8006b56:	f043 0202 	orr.w	r2, r3, #2
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	330c      	adds	r3, #12
 8006b62:	2202      	movs	r2, #2
 8006b64:	4619      	mov	r1, r3
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f000 f900 	bl	8006d6c <USBD_CtlSendData>
      break;
 8006b6c:	e004      	b.n	8006b78 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006b6e:	6839      	ldr	r1, [r7, #0]
 8006b70:	6878      	ldr	r0, [r7, #4]
 8006b72:	f000 f88a 	bl	8006c8a <USBD_CtlError>
      break;
 8006b76:	bf00      	nop
  }
}
 8006b78:	bf00      	nop
 8006b7a:	3708      	adds	r7, #8
 8006b7c:	46bd      	mov	sp, r7
 8006b7e:	bd80      	pop	{r7, pc}

08006b80 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b082      	sub	sp, #8
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
 8006b88:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	885b      	ldrh	r3, [r3, #2]
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d107      	bne.n	8006ba2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2201      	movs	r2, #1
 8006b96:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f940 	bl	8006e20 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006ba0:	e013      	b.n	8006bca <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	885b      	ldrh	r3, [r3, #2]
 8006ba6:	2b02      	cmp	r3, #2
 8006ba8:	d10b      	bne.n	8006bc2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	889b      	ldrh	r3, [r3, #4]
 8006bae:	0a1b      	lsrs	r3, r3, #8
 8006bb0:	b29b      	uxth	r3, r3
 8006bb2:	b2da      	uxtb	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f000 f930 	bl	8006e20 <USBD_CtlSendStatus>
}
 8006bc0:	e003      	b.n	8006bca <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006bc2:	6839      	ldr	r1, [r7, #0]
 8006bc4:	6878      	ldr	r0, [r7, #4]
 8006bc6:	f000 f860 	bl	8006c8a <USBD_CtlError>
}
 8006bca:	bf00      	nop
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b082      	sub	sp, #8
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	6078      	str	r0, [r7, #4]
 8006bda:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006be2:	b2db      	uxtb	r3, r3
 8006be4:	3b01      	subs	r3, #1
 8006be6:	2b02      	cmp	r3, #2
 8006be8:	d80b      	bhi.n	8006c02 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006bea:	683b      	ldr	r3, [r7, #0]
 8006bec:	885b      	ldrh	r3, [r3, #2]
 8006bee:	2b01      	cmp	r3, #1
 8006bf0:	d10c      	bne.n	8006c0c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f910 	bl	8006e20 <USBD_CtlSendStatus>
      }
      break;
 8006c00:	e004      	b.n	8006c0c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006c02:	6839      	ldr	r1, [r7, #0]
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 f840 	bl	8006c8a <USBD_CtlError>
      break;
 8006c0a:	e000      	b.n	8006c0e <USBD_ClrFeature+0x3c>
      break;
 8006c0c:	bf00      	nop
  }
}
 8006c0e:	bf00      	nop
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b084      	sub	sp, #16
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
 8006c1e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006c20:	683b      	ldr	r3, [r7, #0]
 8006c22:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	781a      	ldrb	r2, [r3, #0]
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	3301      	adds	r3, #1
 8006c30:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	781a      	ldrb	r2, [r3, #0]
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	3301      	adds	r3, #1
 8006c3e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f7ff fa40 	bl	80060c6 <SWAPBYTE>
 8006c46:	4603      	mov	r3, r0
 8006c48:	461a      	mov	r2, r3
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	3301      	adds	r3, #1
 8006c52:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3301      	adds	r3, #1
 8006c58:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006c5a:	68f8      	ldr	r0, [r7, #12]
 8006c5c:	f7ff fa33 	bl	80060c6 <SWAPBYTE>
 8006c60:	4603      	mov	r3, r0
 8006c62:	461a      	mov	r2, r3
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	3301      	adds	r3, #1
 8006c6c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	3301      	adds	r3, #1
 8006c72:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006c74:	68f8      	ldr	r0, [r7, #12]
 8006c76:	f7ff fa26 	bl	80060c6 <SWAPBYTE>
 8006c7a:	4603      	mov	r3, r0
 8006c7c:	461a      	mov	r2, r3
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	80da      	strh	r2, [r3, #6]
}
 8006c82:	bf00      	nop
 8006c84:	3710      	adds	r7, #16
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b082      	sub	sp, #8
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
 8006c92:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c94:	2180      	movs	r1, #128	@ 0x80
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f000 fc38 	bl	800750c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f000 fc34 	bl	800750c <USBD_LL_StallEP>
}
 8006ca4:	bf00      	nop
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b086      	sub	sp, #24
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	60f8      	str	r0, [r7, #12]
 8006cb4:	60b9      	str	r1, [r7, #8]
 8006cb6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006cb8:	2300      	movs	r3, #0
 8006cba:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d036      	beq.n	8006d30 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006cc6:	6938      	ldr	r0, [r7, #16]
 8006cc8:	f000 f836 	bl	8006d38 <USBD_GetLen>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	3301      	adds	r3, #1
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	005b      	lsls	r3, r3, #1
 8006cd4:	b29a      	uxth	r2, r3
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006cda:	7dfb      	ldrb	r3, [r7, #23]
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	4413      	add	r3, r2
 8006ce0:	687a      	ldr	r2, [r7, #4]
 8006ce2:	7812      	ldrb	r2, [r2, #0]
 8006ce4:	701a      	strb	r2, [r3, #0]
  idx++;
 8006ce6:	7dfb      	ldrb	r3, [r7, #23]
 8006ce8:	3301      	adds	r3, #1
 8006cea:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006cec:	7dfb      	ldrb	r3, [r7, #23]
 8006cee:	68ba      	ldr	r2, [r7, #8]
 8006cf0:	4413      	add	r3, r2
 8006cf2:	2203      	movs	r2, #3
 8006cf4:	701a      	strb	r2, [r3, #0]
  idx++;
 8006cf6:	7dfb      	ldrb	r3, [r7, #23]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006cfc:	e013      	b.n	8006d26 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006cfe:	7dfb      	ldrb	r3, [r7, #23]
 8006d00:	68ba      	ldr	r2, [r7, #8]
 8006d02:	4413      	add	r3, r2
 8006d04:	693a      	ldr	r2, [r7, #16]
 8006d06:	7812      	ldrb	r2, [r2, #0]
 8006d08:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	3301      	adds	r3, #1
 8006d0e:	613b      	str	r3, [r7, #16]
    idx++;
 8006d10:	7dfb      	ldrb	r3, [r7, #23]
 8006d12:	3301      	adds	r3, #1
 8006d14:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006d16:	7dfb      	ldrb	r3, [r7, #23]
 8006d18:	68ba      	ldr	r2, [r7, #8]
 8006d1a:	4413      	add	r3, r2
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	701a      	strb	r2, [r3, #0]
    idx++;
 8006d20:	7dfb      	ldrb	r3, [r7, #23]
 8006d22:	3301      	adds	r3, #1
 8006d24:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006d26:	693b      	ldr	r3, [r7, #16]
 8006d28:	781b      	ldrb	r3, [r3, #0]
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d1e7      	bne.n	8006cfe <USBD_GetString+0x52>
 8006d2e:	e000      	b.n	8006d32 <USBD_GetString+0x86>
    return;
 8006d30:	bf00      	nop
  }
}
 8006d32:	3718      	adds	r7, #24
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006d38:	b480      	push	{r7}
 8006d3a:	b085      	sub	sp, #20
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006d40:	2300      	movs	r3, #0
 8006d42:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006d48:	e005      	b.n	8006d56 <USBD_GetLen+0x1e>
  {
    len++;
 8006d4a:	7bfb      	ldrb	r3, [r7, #15]
 8006d4c:	3301      	adds	r3, #1
 8006d4e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006d50:	68bb      	ldr	r3, [r7, #8]
 8006d52:	3301      	adds	r3, #1
 8006d54:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006d56:	68bb      	ldr	r3, [r7, #8]
 8006d58:	781b      	ldrb	r3, [r3, #0]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d1f5      	bne.n	8006d4a <USBD_GetLen+0x12>
  }

  return len;
 8006d5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3714      	adds	r7, #20
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr

08006d6c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006d6c:	b580      	push	{r7, lr}
 8006d6e:	b084      	sub	sp, #16
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	687a      	ldr	r2, [r7, #4]
 8006d84:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	687a      	ldr	r2, [r7, #4]
 8006d8a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	2100      	movs	r1, #0
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	f000 fc43 	bl	800761e <USBD_LL_Transmit>

  return USBD_OK;
 8006d98:	2300      	movs	r3, #0
}
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	3710      	adds	r7, #16
 8006d9e:	46bd      	mov	sp, r7
 8006da0:	bd80      	pop	{r7, pc}

08006da2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006da2:	b580      	push	{r7, lr}
 8006da4:	b084      	sub	sp, #16
 8006da6:	af00      	add	r7, sp, #0
 8006da8:	60f8      	str	r0, [r7, #12]
 8006daa:	60b9      	str	r1, [r7, #8]
 8006dac:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	2100      	movs	r1, #0
 8006db4:	68f8      	ldr	r0, [r7, #12]
 8006db6:	f000 fc32 	bl	800761e <USBD_LL_Transmit>

  return USBD_OK;
 8006dba:	2300      	movs	r3, #0
}
 8006dbc:	4618      	mov	r0, r3
 8006dbe:	3710      	adds	r7, #16
 8006dc0:	46bd      	mov	sp, r7
 8006dc2:	bd80      	pop	{r7, pc}

08006dc4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b084      	sub	sp, #16
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	60f8      	str	r0, [r7, #12]
 8006dcc:	60b9      	str	r1, [r7, #8]
 8006dce:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	2203      	movs	r2, #3
 8006dd4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	687a      	ldr	r2, [r7, #4]
 8006ddc:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	f8c3 215c 	str.w	r2, [r3, #348]	@ 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	68ba      	ldr	r2, [r7, #8]
 8006dec:	2100      	movs	r1, #0
 8006dee:	68f8      	ldr	r0, [r7, #12]
 8006df0:	f000 fc36 	bl	8007660 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3710      	adds	r7, #16
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	bd80      	pop	{r7, pc}

08006dfe <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006dfe:	b580      	push	{r7, lr}
 8006e00:	b084      	sub	sp, #16
 8006e02:	af00      	add	r7, sp, #0
 8006e04:	60f8      	str	r0, [r7, #12]
 8006e06:	60b9      	str	r1, [r7, #8]
 8006e08:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	2100      	movs	r1, #0
 8006e10:	68f8      	ldr	r0, [r7, #12]
 8006e12:	f000 fc25 	bl	8007660 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b082      	sub	sp, #8
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2204      	movs	r2, #4
 8006e2c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006e30:	2300      	movs	r3, #0
 8006e32:	2200      	movs	r2, #0
 8006e34:	2100      	movs	r1, #0
 8006e36:	6878      	ldr	r0, [r7, #4]
 8006e38:	f000 fbf1 	bl	800761e <USBD_LL_Transmit>

  return USBD_OK;
 8006e3c:	2300      	movs	r3, #0
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3708      	adds	r7, #8
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006e46:	b580      	push	{r7, lr}
 8006e48:	b082      	sub	sp, #8
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2205      	movs	r2, #5
 8006e52:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006e56:	2300      	movs	r3, #0
 8006e58:	2200      	movs	r2, #0
 8006e5a:	2100      	movs	r1, #0
 8006e5c:	6878      	ldr	r0, [r7, #4]
 8006e5e:	f000 fbff 	bl	8007660 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3708      	adds	r7, #8
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}

08006e6c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006e70:	2200      	movs	r2, #0
 8006e72:	4912      	ldr	r1, [pc, #72]	@ (8006ebc <MX_USB_DEVICE_Init+0x50>)
 8006e74:	4812      	ldr	r0, [pc, #72]	@ (8006ec0 <MX_USB_DEVICE_Init+0x54>)
 8006e76:	f7fe fd09 	bl	800588c <USBD_Init>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d001      	beq.n	8006e84 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006e80:	f7f9 fe10 	bl	8000aa4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CUSTOM_HID) != USBD_OK)
 8006e84:	490f      	ldr	r1, [pc, #60]	@ (8006ec4 <MX_USB_DEVICE_Init+0x58>)
 8006e86:	480e      	ldr	r0, [pc, #56]	@ (8006ec0 <MX_USB_DEVICE_Init+0x54>)
 8006e88:	f7fe fd30 	bl	80058ec <USBD_RegisterClass>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d001      	beq.n	8006e96 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006e92:	f7f9 fe07 	bl	8000aa4 <Error_Handler>
  }
  if (USBD_CUSTOM_HID_RegisterInterface(&hUsbDeviceFS, &USBD_CustomHID_fops_FS) != USBD_OK)
 8006e96:	490c      	ldr	r1, [pc, #48]	@ (8006ec8 <MX_USB_DEVICE_Init+0x5c>)
 8006e98:	4809      	ldr	r0, [pc, #36]	@ (8006ec0 <MX_USB_DEVICE_Init+0x54>)
 8006e9a:	f7fe fcdd 	bl	8005858 <USBD_CUSTOM_HID_RegisterInterface>
 8006e9e:	4603      	mov	r3, r0
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d001      	beq.n	8006ea8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8006ea4:	f7f9 fdfe 	bl	8000aa4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006ea8:	4805      	ldr	r0, [pc, #20]	@ (8006ec0 <MX_USB_DEVICE_Init+0x54>)
 8006eaa:	f7fe fd55 	bl	8005958 <USBD_Start>
 8006eae:	4603      	mov	r3, r0
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d001      	beq.n	8006eb8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8006eb4:	f7f9 fdf6 	bl	8000aa4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006eb8:	bf00      	nop
 8006eba:	bd80      	pop	{r7, pc}
 8006ebc:	20000178 	.word	0x20000178
 8006ec0:	20000240 	.word	0x20000240
 8006ec4:	20000084 	.word	0x20000084
 8006ec8:	20000168 	.word	0x20000168

08006ecc <CUSTOM_HID_Init_FS>:
/**
  * @brief  Initializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_Init_FS(void)
{
 8006ecc:	b480      	push	{r7}
 8006ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006ed0:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <CUSTOM_HID_DeInit_FS>:
/**
  * @brief  DeInitializes the CUSTOM HID media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_DeInit_FS(void)
{
 8006edc:	b480      	push	{r7}
 8006ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 5 */
  return (USBD_OK);
 8006ee0:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <CUSTOM_HID_OutEvent_FS>:
  * @param  event_idx: Event index
  * @param  state: Event state
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CUSTOM_HID_OutEvent_FS(uint8_t event_idx, uint8_t state)
{
 8006eec:	b580      	push	{r7, lr}
 8006eee:	b082      	sub	sp, #8
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	4603      	mov	r3, r0
 8006ef4:	460a      	mov	r2, r1
 8006ef6:	71fb      	strb	r3, [r7, #7]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN 6 */
  UNUSED(event_idx);
  UNUSED(state);

  /* Start next USB packet transfer once data processing is completed */
  if (USBD_CUSTOM_HID_ReceivePacket(&hUsbDeviceFS) != (uint8_t)USBD_OK)
 8006efc:	4806      	ldr	r0, [pc, #24]	@ (8006f18 <CUSTOM_HID_OutEvent_FS+0x2c>)
 8006efe:	f7fe fc49 	bl	8005794 <USBD_CUSTOM_HID_ReceivePacket>
 8006f02:	4603      	mov	r3, r0
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d002      	beq.n	8006f0e <CUSTOM_HID_OutEvent_FS+0x22>
  {
    return -1;
 8006f08:	f04f 33ff 	mov.w	r3, #4294967295
 8006f0c:	e000      	b.n	8006f10 <CUSTOM_HID_OutEvent_FS+0x24>
  }

  return (USBD_OK);
 8006f0e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3708      	adds	r7, #8
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	20000240 	.word	0x20000240

08006f1c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f1c:	b480      	push	{r7}
 8006f1e:	b083      	sub	sp, #12
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	4603      	mov	r3, r0
 8006f24:	6039      	str	r1, [r7, #0]
 8006f26:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	2212      	movs	r2, #18
 8006f2c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006f2e:	4b03      	ldr	r3, [pc, #12]	@ (8006f3c <USBD_FS_DeviceDescriptor+0x20>)
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	370c      	adds	r7, #12
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr
 8006f3c:	20000194 	.word	0x20000194

08006f40 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	4603      	mov	r3, r0
 8006f48:	6039      	str	r1, [r7, #0]
 8006f4a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	2204      	movs	r2, #4
 8006f50:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006f52:	4b03      	ldr	r3, [pc, #12]	@ (8006f60 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006f54:	4618      	mov	r0, r3
 8006f56:	370c      	adds	r7, #12
 8006f58:	46bd      	mov	sp, r7
 8006f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5e:	4770      	bx	lr
 8006f60:	200001a8 	.word	0x200001a8

08006f64 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
 8006f6a:	4603      	mov	r3, r0
 8006f6c:	6039      	str	r1, [r7, #0]
 8006f6e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006f70:	79fb      	ldrb	r3, [r7, #7]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d105      	bne.n	8006f82 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f76:	683a      	ldr	r2, [r7, #0]
 8006f78:	4907      	ldr	r1, [pc, #28]	@ (8006f98 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f7a:	4808      	ldr	r0, [pc, #32]	@ (8006f9c <USBD_FS_ProductStrDescriptor+0x38>)
 8006f7c:	f7ff fe96 	bl	8006cac <USBD_GetString>
 8006f80:	e004      	b.n	8006f8c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006f82:	683a      	ldr	r2, [r7, #0]
 8006f84:	4904      	ldr	r1, [pc, #16]	@ (8006f98 <USBD_FS_ProductStrDescriptor+0x34>)
 8006f86:	4805      	ldr	r0, [pc, #20]	@ (8006f9c <USBD_FS_ProductStrDescriptor+0x38>)
 8006f88:	f7ff fe90 	bl	8006cac <USBD_GetString>
  }
  return USBD_StrDesc;
 8006f8c:	4b02      	ldr	r3, [pc, #8]	@ (8006f98 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006f8e:	4618      	mov	r0, r3
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	2000051c 	.word	0x2000051c
 8006f9c:	0800779c 	.word	0x0800779c

08006fa0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b082      	sub	sp, #8
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	6039      	str	r1, [r7, #0]
 8006faa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006fac:	683a      	ldr	r2, [r7, #0]
 8006fae:	4904      	ldr	r1, [pc, #16]	@ (8006fc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006fb0:	4804      	ldr	r0, [pc, #16]	@ (8006fc4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006fb2:	f7ff fe7b 	bl	8006cac <USBD_GetString>
  return USBD_StrDesc;
 8006fb6:	4b02      	ldr	r3, [pc, #8]	@ (8006fc0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3708      	adds	r7, #8
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}
 8006fc0:	2000051c 	.word	0x2000051c
 8006fc4:	080077ac 	.word	0x080077ac

08006fc8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fc8:	b580      	push	{r7, lr}
 8006fca:	b082      	sub	sp, #8
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	4603      	mov	r3, r0
 8006fd0:	6039      	str	r1, [r7, #0]
 8006fd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	221a      	movs	r2, #26
 8006fd8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006fda:	f000 f843 	bl	8007064 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006fde:	4b02      	ldr	r3, [pc, #8]	@ (8006fe8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3708      	adds	r7, #8
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	200001ac 	.word	0x200001ac

08006fec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
 8006ff2:	4603      	mov	r3, r0
 8006ff4:	6039      	str	r1, [r7, #0]
 8006ff6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006ff8:	79fb      	ldrb	r3, [r7, #7]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d105      	bne.n	800700a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	4907      	ldr	r1, [pc, #28]	@ (8007020 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007002:	4808      	ldr	r0, [pc, #32]	@ (8007024 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007004:	f7ff fe52 	bl	8006cac <USBD_GetString>
 8007008:	e004      	b.n	8007014 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800700a:	683a      	ldr	r2, [r7, #0]
 800700c:	4904      	ldr	r1, [pc, #16]	@ (8007020 <USBD_FS_ConfigStrDescriptor+0x34>)
 800700e:	4805      	ldr	r0, [pc, #20]	@ (8007024 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007010:	f7ff fe4c 	bl	8006cac <USBD_GetString>
  }
  return USBD_StrDesc;
 8007014:	4b02      	ldr	r3, [pc, #8]	@ (8007020 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007016:	4618      	mov	r0, r3
 8007018:	3708      	adds	r7, #8
 800701a:	46bd      	mov	sp, r7
 800701c:	bd80      	pop	{r7, pc}
 800701e:	bf00      	nop
 8007020:	2000051c 	.word	0x2000051c
 8007024:	080077c0 	.word	0x080077c0

08007028 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b082      	sub	sp, #8
 800702c:	af00      	add	r7, sp, #0
 800702e:	4603      	mov	r3, r0
 8007030:	6039      	str	r1, [r7, #0]
 8007032:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007034:	79fb      	ldrb	r3, [r7, #7]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d105      	bne.n	8007046 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800703a:	683a      	ldr	r2, [r7, #0]
 800703c:	4907      	ldr	r1, [pc, #28]	@ (800705c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800703e:	4808      	ldr	r0, [pc, #32]	@ (8007060 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007040:	f7ff fe34 	bl	8006cac <USBD_GetString>
 8007044:	e004      	b.n	8007050 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007046:	683a      	ldr	r2, [r7, #0]
 8007048:	4904      	ldr	r1, [pc, #16]	@ (800705c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800704a:	4805      	ldr	r0, [pc, #20]	@ (8007060 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800704c:	f7ff fe2e 	bl	8006cac <USBD_GetString>
  }
  return USBD_StrDesc;
 8007050:	4b02      	ldr	r3, [pc, #8]	@ (800705c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007052:	4618      	mov	r0, r3
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
 800705a:	bf00      	nop
 800705c:	2000051c 	.word	0x2000051c
 8007060:	080077d4 	.word	0x080077d4

08007064 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007064:	b580      	push	{r7, lr}
 8007066:	b084      	sub	sp, #16
 8007068:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800706a:	4b0f      	ldr	r3, [pc, #60]	@ (80070a8 <Get_SerialNum+0x44>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007070:	4b0e      	ldr	r3, [pc, #56]	@ (80070ac <Get_SerialNum+0x48>)
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007076:	4b0e      	ldr	r3, [pc, #56]	@ (80070b0 <Get_SerialNum+0x4c>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800707c:	68fa      	ldr	r2, [r7, #12]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	4413      	add	r3, r2
 8007082:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2b00      	cmp	r3, #0
 8007088:	d009      	beq.n	800709e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800708a:	2208      	movs	r2, #8
 800708c:	4909      	ldr	r1, [pc, #36]	@ (80070b4 <Get_SerialNum+0x50>)
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f000 f814 	bl	80070bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007094:	2204      	movs	r2, #4
 8007096:	4908      	ldr	r1, [pc, #32]	@ (80070b8 <Get_SerialNum+0x54>)
 8007098:	68b8      	ldr	r0, [r7, #8]
 800709a:	f000 f80f 	bl	80070bc <IntToUnicode>
  }
}
 800709e:	bf00      	nop
 80070a0:	3710      	adds	r7, #16
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	1fff7a10 	.word	0x1fff7a10
 80070ac:	1fff7a14 	.word	0x1fff7a14
 80070b0:	1fff7a18 	.word	0x1fff7a18
 80070b4:	200001ae 	.word	0x200001ae
 80070b8:	200001be 	.word	0x200001be

080070bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80070bc:	b480      	push	{r7}
 80070be:	b087      	sub	sp, #28
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	60f8      	str	r0, [r7, #12]
 80070c4:	60b9      	str	r1, [r7, #8]
 80070c6:	4613      	mov	r3, r2
 80070c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80070ca:	2300      	movs	r3, #0
 80070cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80070ce:	2300      	movs	r3, #0
 80070d0:	75fb      	strb	r3, [r7, #23]
 80070d2:	e027      	b.n	8007124 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	0f1b      	lsrs	r3, r3, #28
 80070d8:	2b09      	cmp	r3, #9
 80070da:	d80b      	bhi.n	80070f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	0f1b      	lsrs	r3, r3, #28
 80070e0:	b2da      	uxtb	r2, r3
 80070e2:	7dfb      	ldrb	r3, [r7, #23]
 80070e4:	005b      	lsls	r3, r3, #1
 80070e6:	4619      	mov	r1, r3
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	440b      	add	r3, r1
 80070ec:	3230      	adds	r2, #48	@ 0x30
 80070ee:	b2d2      	uxtb	r2, r2
 80070f0:	701a      	strb	r2, [r3, #0]
 80070f2:	e00a      	b.n	800710a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	0f1b      	lsrs	r3, r3, #28
 80070f8:	b2da      	uxtb	r2, r3
 80070fa:	7dfb      	ldrb	r3, [r7, #23]
 80070fc:	005b      	lsls	r3, r3, #1
 80070fe:	4619      	mov	r1, r3
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	440b      	add	r3, r1
 8007104:	3237      	adds	r2, #55	@ 0x37
 8007106:	b2d2      	uxtb	r2, r2
 8007108:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	011b      	lsls	r3, r3, #4
 800710e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007110:	7dfb      	ldrb	r3, [r7, #23]
 8007112:	005b      	lsls	r3, r3, #1
 8007114:	3301      	adds	r3, #1
 8007116:	68ba      	ldr	r2, [r7, #8]
 8007118:	4413      	add	r3, r2
 800711a:	2200      	movs	r2, #0
 800711c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800711e:	7dfb      	ldrb	r3, [r7, #23]
 8007120:	3301      	adds	r3, #1
 8007122:	75fb      	strb	r3, [r7, #23]
 8007124:	7dfa      	ldrb	r2, [r7, #23]
 8007126:	79fb      	ldrb	r3, [r7, #7]
 8007128:	429a      	cmp	r2, r3
 800712a:	d3d3      	bcc.n	80070d4 <IntToUnicode+0x18>
  }
}
 800712c:	bf00      	nop
 800712e:	bf00      	nop
 8007130:	371c      	adds	r7, #28
 8007132:	46bd      	mov	sp, r7
 8007134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007138:	4770      	bx	lr
	...

0800713c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b08a      	sub	sp, #40	@ 0x28
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007144:	f107 0314 	add.w	r3, r7, #20
 8007148:	2200      	movs	r2, #0
 800714a:	601a      	str	r2, [r3, #0]
 800714c:	605a      	str	r2, [r3, #4]
 800714e:	609a      	str	r2, [r3, #8]
 8007150:	60da      	str	r2, [r3, #12]
 8007152:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800715c:	d13a      	bne.n	80071d4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800715e:	2300      	movs	r3, #0
 8007160:	613b      	str	r3, [r7, #16]
 8007162:	4b1e      	ldr	r3, [pc, #120]	@ (80071dc <HAL_PCD_MspInit+0xa0>)
 8007164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007166:	4a1d      	ldr	r2, [pc, #116]	@ (80071dc <HAL_PCD_MspInit+0xa0>)
 8007168:	f043 0301 	orr.w	r3, r3, #1
 800716c:	6313      	str	r3, [r2, #48]	@ 0x30
 800716e:	4b1b      	ldr	r3, [pc, #108]	@ (80071dc <HAL_PCD_MspInit+0xa0>)
 8007170:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007172:	f003 0301 	and.w	r3, r3, #1
 8007176:	613b      	str	r3, [r7, #16]
 8007178:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800717a:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800717e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007180:	2302      	movs	r3, #2
 8007182:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007184:	2300      	movs	r3, #0
 8007186:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007188:	2303      	movs	r3, #3
 800718a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800718c:	230a      	movs	r3, #10
 800718e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007190:	f107 0314 	add.w	r3, r7, #20
 8007194:	4619      	mov	r1, r3
 8007196:	4812      	ldr	r0, [pc, #72]	@ (80071e0 <HAL_PCD_MspInit+0xa4>)
 8007198:	f7fa faf6 	bl	8001788 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800719c:	4b0f      	ldr	r3, [pc, #60]	@ (80071dc <HAL_PCD_MspInit+0xa0>)
 800719e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80071a0:	4a0e      	ldr	r2, [pc, #56]	@ (80071dc <HAL_PCD_MspInit+0xa0>)
 80071a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80071a6:	6353      	str	r3, [r2, #52]	@ 0x34
 80071a8:	2300      	movs	r3, #0
 80071aa:	60fb      	str	r3, [r7, #12]
 80071ac:	4b0b      	ldr	r3, [pc, #44]	@ (80071dc <HAL_PCD_MspInit+0xa0>)
 80071ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071b0:	4a0a      	ldr	r2, [pc, #40]	@ (80071dc <HAL_PCD_MspInit+0xa0>)
 80071b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80071b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80071b8:	4b08      	ldr	r3, [pc, #32]	@ (80071dc <HAL_PCD_MspInit+0xa0>)
 80071ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80071bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80071c0:	60fb      	str	r3, [r7, #12]
 80071c2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80071c4:	2200      	movs	r2, #0
 80071c6:	2100      	movs	r1, #0
 80071c8:	2043      	movs	r0, #67	@ 0x43
 80071ca:	f7fa faa6 	bl	800171a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80071ce:	2043      	movs	r0, #67	@ 0x43
 80071d0:	f7fa fabf 	bl	8001752 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80071d4:	bf00      	nop
 80071d6:	3728      	adds	r7, #40	@ 0x28
 80071d8:	46bd      	mov	sp, r7
 80071da:	bd80      	pop	{r7, pc}
 80071dc:	40023800 	.word	0x40023800
 80071e0:	40020000 	.word	0x40020000

080071e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b082      	sub	sp, #8
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	f8d3 2508 	ldr.w	r2, [r3, #1288]	@ 0x508
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	f203 43c4 	addw	r3, r3, #1220	@ 0x4c4
 80071f8:	4619      	mov	r1, r3
 80071fa:	4610      	mov	r0, r2
 80071fc:	f7fe fbf9 	bl	80059f2 <USBD_LL_SetupStage>
}
 8007200:	bf00      	nop
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
 8007210:	460b      	mov	r3, r1
 8007212:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 800721a:	78fa      	ldrb	r2, [r7, #3]
 800721c:	6879      	ldr	r1, [r7, #4]
 800721e:	4613      	mov	r3, r2
 8007220:	00db      	lsls	r3, r3, #3
 8007222:	4413      	add	r3, r2
 8007224:	009b      	lsls	r3, r3, #2
 8007226:	440b      	add	r3, r1
 8007228:	f503 7323 	add.w	r3, r3, #652	@ 0x28c
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	78fb      	ldrb	r3, [r7, #3]
 8007230:	4619      	mov	r1, r3
 8007232:	f7fe fc33 	bl	8005a9c <USBD_LL_DataOutStage>
}
 8007236:	bf00      	nop
 8007238:	3708      	adds	r7, #8
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}

0800723e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800723e:	b580      	push	{r7, lr}
 8007240:	b082      	sub	sp, #8
 8007242:	af00      	add	r7, sp, #0
 8007244:	6078      	str	r0, [r7, #4]
 8007246:	460b      	mov	r3, r1
 8007248:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	@ 0x508
 8007250:	78fa      	ldrb	r2, [r7, #3]
 8007252:	6879      	ldr	r1, [r7, #4]
 8007254:	4613      	mov	r3, r2
 8007256:	00db      	lsls	r3, r3, #3
 8007258:	4413      	add	r3, r2
 800725a:	009b      	lsls	r3, r3, #2
 800725c:	440b      	add	r3, r1
 800725e:	334c      	adds	r3, #76	@ 0x4c
 8007260:	681a      	ldr	r2, [r3, #0]
 8007262:	78fb      	ldrb	r3, [r7, #3]
 8007264:	4619      	mov	r1, r3
 8007266:	f7fe fccc 	bl	8005c02 <USBD_LL_DataInStage>
}
 800726a:	bf00      	nop
 800726c:	3708      	adds	r7, #8
 800726e:	46bd      	mov	sp, r7
 8007270:	bd80      	pop	{r7, pc}

08007272 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007272:	b580      	push	{r7, lr}
 8007274:	b082      	sub	sp, #8
 8007276:	af00      	add	r7, sp, #0
 8007278:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8007280:	4618      	mov	r0, r3
 8007282:	f7fe fe00 	bl	8005e86 <USBD_LL_SOF>
}
 8007286:	bf00      	nop
 8007288:	3708      	adds	r7, #8
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800728e:	b580      	push	{r7, lr}
 8007290:	b084      	sub	sp, #16
 8007292:	af00      	add	r7, sp, #0
 8007294:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007296:	2301      	movs	r3, #1
 8007298:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	68db      	ldr	r3, [r3, #12]
 800729e:	2b02      	cmp	r3, #2
 80072a0:	d001      	beq.n	80072a6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80072a2:	f7f9 fbff 	bl	8000aa4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80072ac:	7bfa      	ldrb	r2, [r7, #15]
 80072ae:	4611      	mov	r1, r2
 80072b0:	4618      	mov	r0, r3
 80072b2:	f7fe fdaa 	bl	8005e0a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80072bc:	4618      	mov	r0, r3
 80072be:	f7fe fd52 	bl	8005d66 <USBD_LL_Reset>
}
 80072c2:	bf00      	nop
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}
	...

080072cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b082      	sub	sp, #8
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80072da:	4618      	mov	r0, r3
 80072dc:	f7fe fda5 	bl	8005e2a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	6812      	ldr	r2, [r2, #0]
 80072ee:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80072f2:	f043 0301 	orr.w	r3, r3, #1
 80072f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	6a1b      	ldr	r3, [r3, #32]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d005      	beq.n	800730c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007300:	4b04      	ldr	r3, [pc, #16]	@ (8007314 <HAL_PCD_SuspendCallback+0x48>)
 8007302:	691b      	ldr	r3, [r3, #16]
 8007304:	4a03      	ldr	r2, [pc, #12]	@ (8007314 <HAL_PCD_SuspendCallback+0x48>)
 8007306:	f043 0306 	orr.w	r3, r3, #6
 800730a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800730c:	bf00      	nop
 800730e:	3708      	adds	r7, #8
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}
 8007314:	e000ed00 	.word	0xe000ed00

08007318 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b082      	sub	sp, #8
 800731c:	af00      	add	r7, sp, #0
 800731e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8007326:	4618      	mov	r0, r3
 8007328:	f7fe fd95 	bl	8005e56 <USBD_LL_Resume>
}
 800732c:	bf00      	nop
 800732e:	3708      	adds	r7, #8
 8007330:	46bd      	mov	sp, r7
 8007332:	bd80      	pop	{r7, pc}

08007334 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
 800733c:	460b      	mov	r3, r1
 800733e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 8007346:	78fa      	ldrb	r2, [r7, #3]
 8007348:	4611      	mov	r1, r2
 800734a:	4618      	mov	r0, r3
 800734c:	f7fe fded 	bl	8005f2a <USBD_LL_IsoOUTIncomplete>
}
 8007350:	bf00      	nop
 8007352:	3708      	adds	r7, #8
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
 8007360:	460b      	mov	r3, r1
 8007362:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800736a:	78fa      	ldrb	r2, [r7, #3]
 800736c:	4611      	mov	r1, r2
 800736e:	4618      	mov	r0, r3
 8007370:	f7fe fda9 	bl	8005ec6 <USBD_LL_IsoINIncomplete>
}
 8007374:	bf00      	nop
 8007376:	3708      	adds	r7, #8
 8007378:	46bd      	mov	sp, r7
 800737a:	bd80      	pop	{r7, pc}

0800737c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b082      	sub	sp, #8
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 800738a:	4618      	mov	r0, r3
 800738c:	f7fe fdff 	bl	8005f8e <USBD_LL_DevConnected>
}
 8007390:	bf00      	nop
 8007392:	3708      	adds	r7, #8
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}

08007398 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b082      	sub	sp, #8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	@ 0x508
 80073a6:	4618      	mov	r0, r3
 80073a8:	f7fe fdfc 	bl	8005fa4 <USBD_LL_DevDisconnected>
}
 80073ac:	bf00      	nop
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d13c      	bne.n	800743e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80073c4:	4a20      	ldr	r2, [pc, #128]	@ (8007448 <USBD_LL_Init+0x94>)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8c2 3508 	str.w	r3, [r2, #1288]	@ 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	4a1e      	ldr	r2, [pc, #120]	@ (8007448 <USBD_LL_Init+0x94>)
 80073d0:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80073d4:	4b1c      	ldr	r3, [pc, #112]	@ (8007448 <USBD_LL_Init+0x94>)
 80073d6:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 80073da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80073dc:	4b1a      	ldr	r3, [pc, #104]	@ (8007448 <USBD_LL_Init+0x94>)
 80073de:	2204      	movs	r2, #4
 80073e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80073e2:	4b19      	ldr	r3, [pc, #100]	@ (8007448 <USBD_LL_Init+0x94>)
 80073e4:	2202      	movs	r2, #2
 80073e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80073e8:	4b17      	ldr	r3, [pc, #92]	@ (8007448 <USBD_LL_Init+0x94>)
 80073ea:	2200      	movs	r2, #0
 80073ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80073ee:	4b16      	ldr	r3, [pc, #88]	@ (8007448 <USBD_LL_Init+0x94>)
 80073f0:	2202      	movs	r2, #2
 80073f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80073f4:	4b14      	ldr	r3, [pc, #80]	@ (8007448 <USBD_LL_Init+0x94>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80073fa:	4b13      	ldr	r3, [pc, #76]	@ (8007448 <USBD_LL_Init+0x94>)
 80073fc:	2200      	movs	r2, #0
 80073fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007400:	4b11      	ldr	r3, [pc, #68]	@ (8007448 <USBD_LL_Init+0x94>)
 8007402:	2200      	movs	r2, #0
 8007404:	625a      	str	r2, [r3, #36]	@ 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007406:	4b10      	ldr	r3, [pc, #64]	@ (8007448 <USBD_LL_Init+0x94>)
 8007408:	2200      	movs	r2, #0
 800740a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800740c:	4b0e      	ldr	r3, [pc, #56]	@ (8007448 <USBD_LL_Init+0x94>)
 800740e:	2200      	movs	r2, #0
 8007410:	631a      	str	r2, [r3, #48]	@ 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007412:	480d      	ldr	r0, [pc, #52]	@ (8007448 <USBD_LL_Init+0x94>)
 8007414:	f7fa fb87 	bl	8001b26 <HAL_PCD_Init>
 8007418:	4603      	mov	r3, r0
 800741a:	2b00      	cmp	r3, #0
 800741c:	d001      	beq.n	8007422 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800741e:	f7f9 fb41 	bl	8000aa4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007422:	2180      	movs	r1, #128	@ 0x80
 8007424:	4808      	ldr	r0, [pc, #32]	@ (8007448 <USBD_LL_Init+0x94>)
 8007426:	f7fb fdc6 	bl	8002fb6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800742a:	2240      	movs	r2, #64	@ 0x40
 800742c:	2100      	movs	r1, #0
 800742e:	4806      	ldr	r0, [pc, #24]	@ (8007448 <USBD_LL_Init+0x94>)
 8007430:	f7fb fd7a 	bl	8002f28 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007434:	2280      	movs	r2, #128	@ 0x80
 8007436:	2101      	movs	r1, #1
 8007438:	4803      	ldr	r0, [pc, #12]	@ (8007448 <USBD_LL_Init+0x94>)
 800743a:	f7fb fd75 	bl	8002f28 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800743e:	2300      	movs	r3, #0
}
 8007440:	4618      	mov	r0, r3
 8007442:	3708      	adds	r7, #8
 8007444:	46bd      	mov	sp, r7
 8007446:	bd80      	pop	{r7, pc}
 8007448:	2000071c 	.word	0x2000071c

0800744c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800744c:	b580      	push	{r7, lr}
 800744e:	b084      	sub	sp, #16
 8007450:	af00      	add	r7, sp, #0
 8007452:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007454:	2300      	movs	r3, #0
 8007456:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007458:	2300      	movs	r3, #0
 800745a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007462:	4618      	mov	r0, r3
 8007464:	f7fa fc7c 	bl	8001d60 <HAL_PCD_Start>
 8007468:	4603      	mov	r3, r0
 800746a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800746c:	7bfb      	ldrb	r3, [r7, #15]
 800746e:	4618      	mov	r0, r3
 8007470:	f000 f930 	bl	80076d4 <USBD_Get_USB_Status>
 8007474:	4603      	mov	r3, r0
 8007476:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007478:	7bbb      	ldrb	r3, [r7, #14]
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b084      	sub	sp, #16
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
 800748a:	4608      	mov	r0, r1
 800748c:	4611      	mov	r1, r2
 800748e:	461a      	mov	r2, r3
 8007490:	4603      	mov	r3, r0
 8007492:	70fb      	strb	r3, [r7, #3]
 8007494:	460b      	mov	r3, r1
 8007496:	70bb      	strb	r3, [r7, #2]
 8007498:	4613      	mov	r3, r2
 800749a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800749c:	2300      	movs	r3, #0
 800749e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074a0:	2300      	movs	r3, #0
 80074a2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80074aa:	78bb      	ldrb	r3, [r7, #2]
 80074ac:	883a      	ldrh	r2, [r7, #0]
 80074ae:	78f9      	ldrb	r1, [r7, #3]
 80074b0:	f7fb f94d 	bl	800274e <HAL_PCD_EP_Open>
 80074b4:	4603      	mov	r3, r0
 80074b6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074b8:	7bfb      	ldrb	r3, [r7, #15]
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 f90a 	bl	80076d4 <USBD_Get_USB_Status>
 80074c0:	4603      	mov	r3, r0
 80074c2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80074c4:	7bbb      	ldrb	r3, [r7, #14]
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3710      	adds	r7, #16
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b084      	sub	sp, #16
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
 80074d6:	460b      	mov	r3, r1
 80074d8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80074da:	2300      	movs	r3, #0
 80074dc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80074de:	2300      	movs	r3, #0
 80074e0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80074e8:	78fa      	ldrb	r2, [r7, #3]
 80074ea:	4611      	mov	r1, r2
 80074ec:	4618      	mov	r0, r3
 80074ee:	f7fb f996 	bl	800281e <HAL_PCD_EP_Close>
 80074f2:	4603      	mov	r3, r0
 80074f4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80074f6:	7bfb      	ldrb	r3, [r7, #15]
 80074f8:	4618      	mov	r0, r3
 80074fa:	f000 f8eb 	bl	80076d4 <USBD_Get_USB_Status>
 80074fe:	4603      	mov	r3, r0
 8007500:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007502:	7bbb      	ldrb	r3, [r7, #14]
}
 8007504:	4618      	mov	r0, r3
 8007506:	3710      	adds	r7, #16
 8007508:	46bd      	mov	sp, r7
 800750a:	bd80      	pop	{r7, pc}

0800750c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800750c:	b580      	push	{r7, lr}
 800750e:	b084      	sub	sp, #16
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	460b      	mov	r3, r1
 8007516:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007518:	2300      	movs	r3, #0
 800751a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800751c:	2300      	movs	r3, #0
 800751e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007526:	78fa      	ldrb	r2, [r7, #3]
 8007528:	4611      	mov	r1, r2
 800752a:	4618      	mov	r0, r3
 800752c:	f7fb fa56 	bl	80029dc <HAL_PCD_EP_SetStall>
 8007530:	4603      	mov	r3, r0
 8007532:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007534:	7bfb      	ldrb	r3, [r7, #15]
 8007536:	4618      	mov	r0, r3
 8007538:	f000 f8cc 	bl	80076d4 <USBD_Get_USB_Status>
 800753c:	4603      	mov	r3, r0
 800753e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007540:	7bbb      	ldrb	r3, [r7, #14]
}
 8007542:	4618      	mov	r0, r3
 8007544:	3710      	adds	r7, #16
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}

0800754a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800754a:	b580      	push	{r7, lr}
 800754c:	b084      	sub	sp, #16
 800754e:	af00      	add	r7, sp, #0
 8007550:	6078      	str	r0, [r7, #4]
 8007552:	460b      	mov	r3, r1
 8007554:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007556:	2300      	movs	r3, #0
 8007558:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800755a:	2300      	movs	r3, #0
 800755c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8007564:	78fa      	ldrb	r2, [r7, #3]
 8007566:	4611      	mov	r1, r2
 8007568:	4618      	mov	r0, r3
 800756a:	f7fb fa9b 	bl	8002aa4 <HAL_PCD_EP_ClrStall>
 800756e:	4603      	mov	r3, r0
 8007570:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007572:	7bfb      	ldrb	r3, [r7, #15]
 8007574:	4618      	mov	r0, r3
 8007576:	f000 f8ad 	bl	80076d4 <USBD_Get_USB_Status>
 800757a:	4603      	mov	r3, r0
 800757c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800757e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007580:	4618      	mov	r0, r3
 8007582:	3710      	adds	r7, #16
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}

08007588 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007588:	b480      	push	{r7}
 800758a:	b085      	sub	sp, #20
 800758c:	af00      	add	r7, sp, #0
 800758e:	6078      	str	r0, [r7, #4]
 8007590:	460b      	mov	r3, r1
 8007592:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800759a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800759c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	da0b      	bge.n	80075bc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80075a4:	78fb      	ldrb	r3, [r7, #3]
 80075a6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075aa:	68f9      	ldr	r1, [r7, #12]
 80075ac:	4613      	mov	r3, r2
 80075ae:	00db      	lsls	r3, r3, #3
 80075b0:	4413      	add	r3, r2
 80075b2:	009b      	lsls	r3, r3, #2
 80075b4:	440b      	add	r3, r1
 80075b6:	333e      	adds	r3, #62	@ 0x3e
 80075b8:	781b      	ldrb	r3, [r3, #0]
 80075ba:	e00b      	b.n	80075d4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80075bc:	78fb      	ldrb	r3, [r7, #3]
 80075be:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80075c2:	68f9      	ldr	r1, [r7, #12]
 80075c4:	4613      	mov	r3, r2
 80075c6:	00db      	lsls	r3, r3, #3
 80075c8:	4413      	add	r3, r2
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	440b      	add	r3, r1
 80075ce:	f203 237e 	addw	r3, r3, #638	@ 0x27e
 80075d2:	781b      	ldrb	r3, [r3, #0]
  }
}
 80075d4:	4618      	mov	r0, r3
 80075d6:	3714      	adds	r7, #20
 80075d8:	46bd      	mov	sp, r7
 80075da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075de:	4770      	bx	lr

080075e0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b084      	sub	sp, #16
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
 80075e8:	460b      	mov	r3, r1
 80075ea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075ec:	2300      	movs	r3, #0
 80075ee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075f0:	2300      	movs	r3, #0
 80075f2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80075fa:	78fa      	ldrb	r2, [r7, #3]
 80075fc:	4611      	mov	r1, r2
 80075fe:	4618      	mov	r0, r3
 8007600:	f7fb f880 	bl	8002704 <HAL_PCD_SetAddress>
 8007604:	4603      	mov	r3, r0
 8007606:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007608:	7bfb      	ldrb	r3, [r7, #15]
 800760a:	4618      	mov	r0, r3
 800760c:	f000 f862 	bl	80076d4 <USBD_Get_USB_Status>
 8007610:	4603      	mov	r3, r0
 8007612:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007614:	7bbb      	ldrb	r3, [r7, #14]
}
 8007616:	4618      	mov	r0, r3
 8007618:	3710      	adds	r7, #16
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}

0800761e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800761e:	b580      	push	{r7, lr}
 8007620:	b086      	sub	sp, #24
 8007622:	af00      	add	r7, sp, #0
 8007624:	60f8      	str	r0, [r7, #12]
 8007626:	607a      	str	r2, [r7, #4]
 8007628:	603b      	str	r3, [r7, #0]
 800762a:	460b      	mov	r3, r1
 800762c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800762e:	2300      	movs	r3, #0
 8007630:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007632:	2300      	movs	r3, #0
 8007634:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800763c:	7af9      	ldrb	r1, [r7, #11]
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	687a      	ldr	r2, [r7, #4]
 8007642:	f7fb f981 	bl	8002948 <HAL_PCD_EP_Transmit>
 8007646:	4603      	mov	r3, r0
 8007648:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800764a:	7dfb      	ldrb	r3, [r7, #23]
 800764c:	4618      	mov	r0, r3
 800764e:	f000 f841 	bl	80076d4 <USBD_Get_USB_Status>
 8007652:	4603      	mov	r3, r0
 8007654:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007656:	7dbb      	ldrb	r3, [r7, #22]
}
 8007658:	4618      	mov	r0, r3
 800765a:	3718      	adds	r7, #24
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b086      	sub	sp, #24
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	607a      	str	r2, [r7, #4]
 800766a:	603b      	str	r3, [r7, #0]
 800766c:	460b      	mov	r3, r1
 800766e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007670:	2300      	movs	r3, #0
 8007672:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007674:	2300      	movs	r3, #0
 8007676:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800767e:	7af9      	ldrb	r1, [r7, #11]
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	687a      	ldr	r2, [r7, #4]
 8007684:	f7fb f915 	bl	80028b2 <HAL_PCD_EP_Receive>
 8007688:	4603      	mov	r3, r0
 800768a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800768c:	7dfb      	ldrb	r3, [r7, #23]
 800768e:	4618      	mov	r0, r3
 8007690:	f000 f820 	bl	80076d4 <USBD_Get_USB_Status>
 8007694:	4603      	mov	r3, r0
 8007696:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007698:	7dbb      	ldrb	r3, [r7, #22]
}
 800769a:	4618      	mov	r0, r3
 800769c:	3718      	adds	r7, #24
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}
	...

080076a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80076a4:	b480      	push	{r7}
 80076a6:	b083      	sub	sp, #12
 80076a8:	af00      	add	r7, sp, #0
 80076aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CUSTOM_HID_HandleTypeDef)/4+1)];/* On 32-bit boundary */
  return mem;
 80076ac:	4b03      	ldr	r3, [pc, #12]	@ (80076bc <USBD_static_malloc+0x18>)
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	370c      	adds	r7, #12
 80076b2:	46bd      	mov	sp, r7
 80076b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b8:	4770      	bx	lr
 80076ba:	bf00      	nop
 80076bc:	20000c28 	.word	0x20000c28

080076c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b083      	sub	sp, #12
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]

}
 80076c8:	bf00      	nop
 80076ca:	370c      	adds	r7, #12
 80076cc:	46bd      	mov	sp, r7
 80076ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d2:	4770      	bx	lr

080076d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b085      	sub	sp, #20
 80076d8:	af00      	add	r7, sp, #0
 80076da:	4603      	mov	r3, r0
 80076dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076de:	2300      	movs	r3, #0
 80076e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80076e2:	79fb      	ldrb	r3, [r7, #7]
 80076e4:	2b03      	cmp	r3, #3
 80076e6:	d817      	bhi.n	8007718 <USBD_Get_USB_Status+0x44>
 80076e8:	a201      	add	r2, pc, #4	@ (adr r2, 80076f0 <USBD_Get_USB_Status+0x1c>)
 80076ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076ee:	bf00      	nop
 80076f0:	08007701 	.word	0x08007701
 80076f4:	08007707 	.word	0x08007707
 80076f8:	0800770d 	.word	0x0800770d
 80076fc:	08007713 	.word	0x08007713
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	73fb      	strb	r3, [r7, #15]
    break;
 8007704:	e00b      	b.n	800771e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007706:	2303      	movs	r3, #3
 8007708:	73fb      	strb	r3, [r7, #15]
    break;
 800770a:	e008      	b.n	800771e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800770c:	2301      	movs	r3, #1
 800770e:	73fb      	strb	r3, [r7, #15]
    break;
 8007710:	e005      	b.n	800771e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007712:	2303      	movs	r3, #3
 8007714:	73fb      	strb	r3, [r7, #15]
    break;
 8007716:	e002      	b.n	800771e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007718:	2303      	movs	r3, #3
 800771a:	73fb      	strb	r3, [r7, #15]
    break;
 800771c:	bf00      	nop
  }
  return usb_status;
 800771e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3714      	adds	r7, #20
 8007724:	46bd      	mov	sp, r7
 8007726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772a:	4770      	bx	lr

0800772c <memset>:
 800772c:	4402      	add	r2, r0
 800772e:	4603      	mov	r3, r0
 8007730:	4293      	cmp	r3, r2
 8007732:	d100      	bne.n	8007736 <memset+0xa>
 8007734:	4770      	bx	lr
 8007736:	f803 1b01 	strb.w	r1, [r3], #1
 800773a:	e7f9      	b.n	8007730 <memset+0x4>

0800773c <__libc_init_array>:
 800773c:	b570      	push	{r4, r5, r6, lr}
 800773e:	4d0d      	ldr	r5, [pc, #52]	@ (8007774 <__libc_init_array+0x38>)
 8007740:	4c0d      	ldr	r4, [pc, #52]	@ (8007778 <__libc_init_array+0x3c>)
 8007742:	1b64      	subs	r4, r4, r5
 8007744:	10a4      	asrs	r4, r4, #2
 8007746:	2600      	movs	r6, #0
 8007748:	42a6      	cmp	r6, r4
 800774a:	d109      	bne.n	8007760 <__libc_init_array+0x24>
 800774c:	4d0b      	ldr	r5, [pc, #44]	@ (800777c <__libc_init_array+0x40>)
 800774e:	4c0c      	ldr	r4, [pc, #48]	@ (8007780 <__libc_init_array+0x44>)
 8007750:	f000 f818 	bl	8007784 <_init>
 8007754:	1b64      	subs	r4, r4, r5
 8007756:	10a4      	asrs	r4, r4, #2
 8007758:	2600      	movs	r6, #0
 800775a:	42a6      	cmp	r6, r4
 800775c:	d105      	bne.n	800776a <__libc_init_array+0x2e>
 800775e:	bd70      	pop	{r4, r5, r6, pc}
 8007760:	f855 3b04 	ldr.w	r3, [r5], #4
 8007764:	4798      	blx	r3
 8007766:	3601      	adds	r6, #1
 8007768:	e7ee      	b.n	8007748 <__libc_init_array+0xc>
 800776a:	f855 3b04 	ldr.w	r3, [r5], #4
 800776e:	4798      	blx	r3
 8007770:	3601      	adds	r6, #1
 8007772:	e7f2      	b.n	800775a <__libc_init_array+0x1e>
 8007774:	08007804 	.word	0x08007804
 8007778:	08007804 	.word	0x08007804
 800777c:	08007804 	.word	0x08007804
 8007780:	08007808 	.word	0x08007808

08007784 <_init>:
 8007784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007786:	bf00      	nop
 8007788:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800778a:	bc08      	pop	{r3}
 800778c:	469e      	mov	lr, r3
 800778e:	4770      	bx	lr

08007790 <_fini>:
 8007790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007792:	bf00      	nop
 8007794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007796:	bc08      	pop	{r3}
 8007798:	469e      	mov	lr, r3
 800779a:	4770      	bx	lr
